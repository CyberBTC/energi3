// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MasternodeRegistryV1ABI is the input ABI used to generate the binding from.
const MasternodeRegistryV1ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"active\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"active_collateral\",\"type\":\"uint256\"},{\"name\":\"total_collateral\",\"type\":\"uint256\"},{\"name\":\"max_of_all_times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_masternode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"require_validation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"invalidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mn_status\",\"outputs\":[{\"name\":\"sw_features\",\"type\":\"uint256\"},{\"name\":\"last_heartbeat\",\"type\":\"uint256\"},{\"name\":\"inactive_since\",\"type\":\"uint256\"},{\"name\":\"validator_index\",\"type\":\"uint256\"},{\"name\":\"invalidation_since\",\"type\":\"uint256\"},{\"name\":\"invalidations\",\"type\":\"uint256\"},{\"name\":\"seq_payouts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validator_list\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced_collateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cleanup_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active_collateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"isValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"block_number\",\"type\":\"uint256\"},{\"name\":\"block_hash\",\"type\":\"bytes32\"},{\"name\":\"sw_features\",\"type\":\"uint256\"}],\"name\":\"heartbeat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownerInfo\",\"outputs\":[{\"name\":\"masternode\",\"type\":\"address\"},{\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"validationTarget\",\"outputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"denounce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_ever_collateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"onCollateralUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"},{\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"name\":\"enode\",\"type\":\"bytes32[2]\"}],\"name\":\"announce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validation_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerate\",\"outputs\":[{\"name\":\"masternodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_token_proxy\",\"type\":\"address\"},{\"name\":\"_treasury_proxy\",\"type\":\"address\"},{\"name\":\"_config\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Heartbeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"Announced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Denounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Invalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Deactivated\",\"type\":\"event\"}]"

// MasternodeRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const MasternodeRegistryV1Bin = `60806040523480156200001157600080fd5b5060405162003e9338038062003e93833981810160405260e08110156200003757600080fd5b5080516020820151604080840151600080546001600160a01b0319166001600160a01b038616179055905192939192909160600190620000779062000174565b604051809103906000f08015801562000094573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b039384161790915560038054821686841617905560048054909116918416919091179055805160085560208101516009556040810151600a556060810151600b81905569021e19e0c9bab24000008110156200016957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e697469616c20636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b505050505062000182565b61097b806200351883390190565b61338680620001926000396000f3fe6080604052600436106101d75760003560e01c806384afd47f11610102578063ca0e551f11610095578063d70d5c3011610064578063d70d5c3014610786578063dd227a22146107d7578063ec556889146107ec578063ff9f78b314610801576101d7565b8063ca0e551f146106b1578063cb4f40c5146106f1578063cdc7d4ad14610706578063ce5494bb14610746576101d7565b8063a2731784116100d1578063a273178414610607578063ab00fdc41461061c578063b83e160514610631578063c3db74d614610671576101d7565b806384afd47f146105535780638b1b925f1461056857806391ceac96146105bc5780639c5e8ae2146105f2576101d7565b806335ab13f61161017a578063521f284d11610149578063521f284d146104ff57806357f2a7d8146105145780635f6e2c7b146105295780636d41ff4e1461053e576101d7565b806335ab13f61461040857806337a3931f1461041d5780634d1b4dae1461045d5780634e60b981146104d5576101d7565b80631a26763c116101b65780631a26763c146103715780631c4b774b146103af578063228cb733146103eb5780632d059305146103f3576101d7565b8062f55d9d1461023e57806306661abd146102805780630aae7a6b146102c0575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561024a57600080fd5b5061027e6004803603602081101561026157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610866565b005b34801561028c57600080fd5b5061029561090e565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102cc57600080fd5b50610300600480360360208110156102e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610928565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b8381101561034e578181015183820152602001610336565b505050509050018381526020018281526020019550505050505060405180910390f35b34801561037d57600080fd5b50610386610a27565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103bb57600080fd5b506103d9600480360360208110156103d257600080fd5b5035610a43565b60408051918252519081900360200190f35b61027e610b7b565b3480156103ff57600080fd5b50610386610dd7565b34801561041457600080fd5b506103d9610df3565b34801561042957600080fd5b5061027e6004803603602081101561044057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610df9565b34801561046957600080fd5b5061049d6004803603602081101561048057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611140565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b3480156104e157600080fd5b50610386600480360360208110156104f857600080fd5b503561117d565b34801561050b57600080fd5b506103d96111b1565b34801561052057600080fd5b506103d96111b7565b34801561053557600080fd5b506103d96111bd565b34801561054a57600080fd5b506103d96111c3565b34801561055f57600080fd5b506103866111c9565b34801561057457600080fd5b506105a86004803603602081101561058b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111e5565b604080519115158252519081900360200190f35b3480156105c857600080fd5b5061027e600480360360608110156105df57600080fd5b508035906020810135906040013561121d565b3480156105fe57600080fd5b506103d9611575565b34801561061357600080fd5b5061038661157b565b34801561062857600080fd5b506103d9611597565b34801561063d57600080fd5b506103006004803603602081101561065457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661159d565b34801561067d57600080fd5b506103866004803603602081101561069457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661171c565b3480156106bd57600080fd5b5061027e600480360360208110156106d457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166117bd565b3480156106fd57600080fd5b506103d9611841565b34801561071257600080fd5b5061027e6004803603602081101561072957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611847565b34801561075257600080fd5b5061027e6004803603602081101561076957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a0c565b34801561079257600080fd5b5061027e600480360360808110156107a957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611a9a565b3480156107e357600080fd5b506103d9611e75565b3480156107f857600080fd5b50610386611e7b565b34801561080d57600080fd5b50610816611e97565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561085257818101518382015260200161083a565b505050509050019250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff1633146108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6108f581611f6c565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600e54600554600c54600d54600b54939492939192909190565b6000806109336132ef565b60008061093e61330d565b6002546109619073ffffffffffffffffffffffffffffffffffffffff1688611ffb565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166109ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d6020811015610ad757600080fd5b505190508215801590610b6457508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d6020811015610b6057600080fd5b5051155b15610b7557677ed7cd92ff12000091505b50919050565b60015415610bea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315610d18576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d6020811015610c8f57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b158015610cfd57600080fd5b505af1158015610d11573d6000803e3d6000fd5b5050505050505b677ed7cd92ff120000341415610dcf574360115410610d9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b620186a05a11610da457fe5b34303114610dae57fe5b620186a05a118015610dc55750610dc361212d565b155b15610dcf57610dae565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60015415610e6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000610e766123ae565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69646174696f6e20666f722073656c660000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260409020610f4282826123dd565b610fad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16610fcd8361171c565b73ffffffffffffffffffffffffffffffffffffffff161461104f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420746172676574000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f6020526040902060068101546110e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b600581018054600101905560405173ffffffffffffffffffffffffffffffffffffffff80851691908616907f389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d33190600090a3505060006001555050565b600f602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b6010818154811061118a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600e5481565b600d5481565b600a5481565b600c5481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604081206112159083906123dd565b90505b919050565b6001541561128c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561132557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b8183401461139457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b600061139e6123ae565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f6020526040902060068101549192509061143757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018101544203611c2081106114ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f546f6f206c617465000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610708811161151e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b42600183015583825560405173ffffffffffffffffffffffffffffffffffffffff8416907f76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a6490600090a25050600060015550505050565b60075481565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6000806115a86132ef565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d602081101561164a57600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff86166116d057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b6116d861330d565b6116e28288611ffb565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b600080600554438161172a57fe5b73ffffffffffffffffffffffffffffffffffffffff85166000908152600f602052604081206003015460105493909206935090918284018161176857fe5b0690508082141561178557601054600182018161178157fe5b0690505b6010818154811061179257fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1695945050505050565b6001541561182c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055610dcf8161183c6123ae565b61242e565b600b5481565b600154156118b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b15801561193257600080fd5b505afa158015611946573d6000803e3d6000fd5b505050506040513d602081101561195c57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611982575050610dcf565b61198a61330d565b6002546119ad9073ffffffffffffffffffffffffffffffffffffffff1683611ffb565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f60205260408120919250906119e090836128da565b905060018160038111156119f057fe5b1415611a0057611a00838661242e565b50505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611a9257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611a97815b50565b60015415611b0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611b176123ae565b60025490915073ffffffffffffffffffffffffffffffffffffffff166000611b3e83612a82565b9050611b4a8284612c2c565b611b548287612d04565b611b5d85612da0565b600080611b6a8489612f7f565b915091508373ffffffffffffffffffffffffffffffffffffffff1663f71169df89878a8a8843888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280828437600081840152601f19601f8201169050808301925050508581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015611cd057600080fd5b505af1158015611ce4573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f6020526040902042600182015569021e19e0c9bab240000084046006820155600e80546001908101909155600580549091019055600c805485019055600d8054850190819055600b54811115611d5c57600b8190555b43600483015560108054600384018190556001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8c81169182179092556040805163ffffffff8d168152928a16927f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09918d918d918b91906020820190849080828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690910192835250506040519081900360200192509050a3505060006001555050505050505050565b60095481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6060600554604051908082528060200260200182016040528015611ec5578160200160208202803883390190505b5060065490915073ffffffffffffffffffffffffffffffffffffffff1680611eed5750611f69565b80611ef661330d565b60005b82858281518110611f0657fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254611f37911684611ffb565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff8084169085161415611ef957505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015611fe057600080fd5b505af1158015611ff4573d6000803e3d6000fd5b5050505050565b61200361330d565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d6101008110156120ac57600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b60065460075460009173ffffffffffffffffffffffffffffffffffffffff16908161215d57600192505050611f69565b61216561330d565b6002546121889073ffffffffffffffffffffffffffffffffffffffff1684611ffb565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040902060058101546004820154600683015460019096019593945091929091908510156121db576007859055612237565b60006005840181905543600485015560c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556007555b600061224384866128da565b9050600081600381111561225357fe5b14156122b757612263838361315a565b15806122a25750608085015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b156122b7576001975050505050505050611f69565b60018160038111156122c557fe5b14156122de576122d987866080015161242e565b6123a0565b6006840154156123825760006006850155426002850155602085015161230590889061319a565b60c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831617905560006007819055604051918916917f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c009190a26123a0565b600a548460020154420311156123a0576123a087866080015161242e565b600097505050505050505090565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156123d6575032611f69565b5033611f69565b60006123e761330d565b60025461240a9073ffffffffffffffffffffffffffffffffffffffff1685611ffb565b9050600061241884836128da565b600381111561242357fe5b149150505b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff1661244f61330d565b6124598285611ffb565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166124825750506128d6565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461252057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff16141561258557600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055612753565b60065473ffffffffffffffffffffffffffffffffffffffff858116911614156125f75760c0810151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560006007555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b15801561268e57600080fd5b505af11580156126a2573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b15801561273a57600080fd5b505af115801561274e573d6000803e3d6000fd5b505050505b602080820151600d805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600f90915260409020600601541561279f5761279f84826020015161319a565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600f6020526040808220828155600181018390556002810183905560038101839055600480820184905560058201849055600690910183905581517f72f5f2570000000000000000000000000000000000000000000000000000000081529081019390935251928516926372f5f25792602480820193929182900301818387803b15801561284957600080fd5b505af115801561285d573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b15801561294757600080fd5b505afa15801561295b573d6000803e3d6000fd5b505050506040513d602081101561297157600080fd5b50516080850151604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152815192909316926378c7d9799260248083019392829003018186803b1580156129e457600080fd5b505afa1580156129f8573d6000803e3d6000fd5b505050506040513d6040811015612a0e57600080fd5b508051602091820151918601519093509091508214612a3257600192505050612428565b8351811115612a4657600192505050612428565b6006850154612a5a57600292505050612428565b610e106002028560010154420310612a7757600392505050612428565b506000949350505050565b600354604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638abf6077916004808301926020929190829003018186803b158015612aed57600080fd5b505afa158015612b01573d6000803e3d6000fd5b505050506040513d6020811015612b1757600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282519316926378c7d97992602480840193919291829003018186803b158015612b8557600080fd5b505afa158015612b99573d6000803e3d6000fd5b505050506040513d6040811015612baf57600080fd5b5051905069021e19e0c9bab240000081101561121857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612cab57600080fd5b505afa158015612cbf573d6000803e3d6000fd5b505050506040513d6020811015612cd557600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811615612cff57612cff818361242e565b505050565b612d0c61330d565b612d168383611ffb565b608081015190915073ffffffffffffffffffffffffffffffffffffffff1615612cff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff0000821661ff008316637f0000008314801590612dca575082630a00000014155b8015612de857508263c0000000148015612de657508162a80000145b155b8015612e0b57508263ac000000148015612e0957508162f000001662100000145b155b8015612e1657508215155b8015612e395750826364000000148015612e3757508162c000001662400000145b155b8015612e5757508263a9000000148015612e5557508162fe0000145b155b8015612e7a57508263c6000000148015612e7857508162fe00001662120000145b155b8015612ea557508263c6000000148015612e9657508162330000145b8015612ea3575080616400145b155b8015612ecc57508263cb000000148015612ebd575081155b8015612eca575080617100145b155b8015612ee257508263f00000001663e000000014155b8015612ef857508263f00000001663f000000014155b8015612f0e57508363ffffffff1663ffffffff14155b612f7957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b60065473ffffffffffffffffffffffffffffffffffffffff166000811561310957612fa861330d565b612fb28584611ffb565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b15801561304857600080fd5b505af115801561305c573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b1580156130eb57600080fd5b505af11580156130ff573d6000803e3d6000fd5b5050505050613153565b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600060075580805b9250929050565b6000600854600e54101561317057506001612428565b60095443830390818161317f57fe5b0460010190506002818161318f57fe5b049093109392505050565b60108054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106131ce57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8681168452600f9092526040808420600390810154939092168085529320018190556010805492935090918391908390811061322957fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601080548061327c57fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055908101909155600e805490910190555050600c805491909103905550565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091529056fea265627a7a72305820d383c5c8cf38e904d0354ed7928430adfbbc8e1dc4e4f72a2fc6368c49d756f664736f6c634300050900326080604052600080546001600160a01b03191633179055610956806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063412cbac01161005b578063412cbac01461016857806341c0e1b5146101fa57806372f5f25714610202578063f71169df146102355761007d565b806313af4035146100825780631f9579ca146100b757806328d566be1461010c575b600080fd5b6100b56004803603602081101561009857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661029f565b005b6100b5600480360360a08110156100cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135151591604082013581169160608101351515916080909101351661036c565b61013f6004803603602081101561012257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104b1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61019b6004803603602081101561017e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104d9565b60408051988952602089019790975287870195909552606087019390935273ffffffffffffffffffffffffffffffffffffffff9182166080870152811660a08601521660c084015263ffffffff1660e083015251908190036101000190f35b6100b5610551565b6100b56004803603602081101561021857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105da565b6100b5600480360361012081101561024c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169163ffffffff60408301351691606081019160a08201359160c08101359160e0820135811691610100013516610720565b60005473ffffffffffffffffffffffffffffffffffffffff16331461032557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602052604090208415610460576005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b82156104a9576006810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b505050505050565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015493949293919273ffffffffffffffffffffffffffffffffffffffff918216929082169181169074010000000000000000000000000000000000000000900463ffffffff1688565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b33ff5b60005473ffffffffffffffffffffffffffffffffffffffff16331461066057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff90811660008181526001602081815260408084206004810180549097168552600280845291852080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915595855291839052838255918101839055908101829055600381019190915582548216909255600582018054909116905560060180547fffffffffffffffff000000000000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff80891660009081526001602052604090206004810154909190811690891681146108515773ffffffffffffffffffffffffffffffffffffffff8116156107fd57fe5b73ffffffffffffffffffffffffffffffffffffffff898116600090815260026020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918c169190911790555b5060048101805473ffffffffffffffffffffffffffffffffffffffff998a167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600682018054883560028501556020909801356003840155600183019690965593815560050180549288169284169290921790915590941663ffffffff9390931674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179092161790555056fea265627a7a72305820ae3bf458e29d779abbcd8f02bf4453eed03e8b71ef71c2e217f874afcca120e464736f6c63430005090032`

// DeployMasternodeRegistryV1 deploys a new Ethereum contract, binding an instance of MasternodeRegistryV1 to it.
func DeployMasternodeRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _token_proxy common.Address, _treasury_proxy common.Address, _config [4]*big.Int) (common.Address, *types.Transaction, *MasternodeRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MasternodeRegistryV1Bin), backend, _proxy, _token_proxy, _treasury_proxy, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MasternodeRegistryV1{MasternodeRegistryV1Caller: MasternodeRegistryV1Caller{contract: contract}, MasternodeRegistryV1Transactor: MasternodeRegistryV1Transactor{contract: contract}, MasternodeRegistryV1Filterer: MasternodeRegistryV1Filterer{contract: contract}}, nil
}

// MasternodeRegistryV1Bin is the compiled bytecode of contract after deployment.
const MasternodeRegistryV1RuntimeBin = `6080604052600436106101d75760003560e01c806384afd47f11610102578063ca0e551f11610095578063d70d5c3011610064578063d70d5c3014610786578063dd227a22146107d7578063ec556889146107ec578063ff9f78b314610801576101d7565b8063ca0e551f146106b1578063cb4f40c5146106f1578063cdc7d4ad14610706578063ce5494bb14610746576101d7565b8063a2731784116100d1578063a273178414610607578063ab00fdc41461061c578063b83e160514610631578063c3db74d614610671576101d7565b806384afd47f146105535780638b1b925f1461056857806391ceac96146105bc5780639c5e8ae2146105f2576101d7565b806335ab13f61161017a578063521f284d11610149578063521f284d146104ff57806357f2a7d8146105145780635f6e2c7b146105295780636d41ff4e1461053e576101d7565b806335ab13f61461040857806337a3931f1461041d5780634d1b4dae1461045d5780634e60b981146104d5576101d7565b80631a26763c116101b65780631a26763c146103715780631c4b774b146103af578063228cb733146103eb5780632d059305146103f3576101d7565b8062f55d9d1461023e57806306661abd146102805780630aae7a6b146102c0575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561024a57600080fd5b5061027e6004803603602081101561026157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610866565b005b34801561028c57600080fd5b5061029561090e565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102cc57600080fd5b50610300600480360360208110156102e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610928565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b8381101561034e578181015183820152602001610336565b505050509050018381526020018281526020019550505050505060405180910390f35b34801561037d57600080fd5b50610386610a27565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103bb57600080fd5b506103d9600480360360208110156103d257600080fd5b5035610a43565b60408051918252519081900360200190f35b61027e610b7b565b3480156103ff57600080fd5b50610386610dd7565b34801561041457600080fd5b506103d9610df3565b34801561042957600080fd5b5061027e6004803603602081101561044057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610df9565b34801561046957600080fd5b5061049d6004803603602081101561048057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611140565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b3480156104e157600080fd5b50610386600480360360208110156104f857600080fd5b503561117d565b34801561050b57600080fd5b506103d96111b1565b34801561052057600080fd5b506103d96111b7565b34801561053557600080fd5b506103d96111bd565b34801561054a57600080fd5b506103d96111c3565b34801561055f57600080fd5b506103866111c9565b34801561057457600080fd5b506105a86004803603602081101561058b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166111e5565b604080519115158252519081900360200190f35b3480156105c857600080fd5b5061027e600480360360608110156105df57600080fd5b508035906020810135906040013561121d565b3480156105fe57600080fd5b506103d9611575565b34801561061357600080fd5b5061038661157b565b34801561062857600080fd5b506103d9611597565b34801561063d57600080fd5b506103006004803603602081101561065457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661159d565b34801561067d57600080fd5b506103866004803603602081101561069457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661171c565b3480156106bd57600080fd5b5061027e600480360360208110156106d457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166117bd565b3480156106fd57600080fd5b506103d9611841565b34801561071257600080fd5b5061027e6004803603602081101561072957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611847565b34801561075257600080fd5b5061027e6004803603602081101561076957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a0c565b34801561079257600080fd5b5061027e600480360360808110156107a957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611a9a565b3480156107e357600080fd5b506103d9611e75565b3480156107f857600080fd5b50610386611e7b565b34801561080d57600080fd5b50610816611e97565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561085257818101518382015260200161083a565b505050509050019250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff1633146108ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6108f581611f6c565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600e54600554600c54600d54600b54939492939192909190565b6000806109336132ef565b60008061093e61330d565b6002546109619073ffffffffffffffffffffffffffffffffffffffff1688611ffb565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166109ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d6020811015610ad757600080fd5b505190508215801590610b6457508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d6020811015610b6057600080fd5b5051155b15610b7557677ed7cd92ff12000091505b50919050565b60015415610bea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315610d18576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6557600080fd5b505afa158015610c79573d6000803e3d6000fd5b505050506040513d6020811015610c8f57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b158015610cfd57600080fd5b505af1158015610d11573d6000803e3d6000fd5b5050505050505b677ed7cd92ff120000341415610dcf574360115410610d9857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b620186a05a11610da457fe5b34303114610dae57fe5b620186a05a118015610dc55750610dc361212d565b155b15610dcf57610dae565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60015415610e6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000610e766123ae565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f1357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69646174696f6e20666f722073656c660000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260409020610f4282826123dd565b610fad57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16610fcd8361171c565b73ffffffffffffffffffffffffffffffffffffffff161461104f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420746172676574000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f6020526040902060068101546110e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b600581018054600101905560405173ffffffffffffffffffffffffffffffffffffffff80851691908616907f389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d33190600090a3505060006001555050565b600f602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b6010818154811061118a57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600e5481565b600d5481565b600a5481565b600c5481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604081206112159083906123dd565b90505b919050565b6001541561128c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561132557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b8183401461139457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b600061139e6123ae565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f6020526040902060068101549192509061143757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018101544203611c2081106114ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f546f6f206c617465000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610708811161151e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b42600183015583825560405173ffffffffffffffffffffffffffffffffffffffff8416907f76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a6490600090a25050600060015550505050565b60075481565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6000806115a86132ef565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d602081101561164a57600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff86166116d057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b6116d861330d565b6116e28288611ffb565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b600080600554438161172a57fe5b73ffffffffffffffffffffffffffffffffffffffff85166000908152600f602052604081206003015460105493909206935090918284018161176857fe5b0690508082141561178557601054600182018161178157fe5b0690505b6010818154811061179257fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1695945050505050565b6001541561182c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055610dcf8161183c6123ae565b61242e565b600b5481565b600154156118b657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b15801561193257600080fd5b505afa158015611946573d6000803e3d6000fd5b505050506040513d602081101561195c57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611982575050610dcf565b61198a61330d565b6002546119ad9073ffffffffffffffffffffffffffffffffffffffff1683611ffb565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f60205260408120919250906119e090836128da565b905060018160038111156119f057fe5b1415611a0057611a00838661242e565b50505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611a9257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611a97815b50565b60015415611b0957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611b176123ae565b60025490915073ffffffffffffffffffffffffffffffffffffffff166000611b3e83612a82565b9050611b4a8284612c2c565b611b548287612d04565b611b5d85612da0565b600080611b6a8489612f7f565b915091508373ffffffffffffffffffffffffffffffffffffffff1663f71169df89878a8a8843888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280828437600081840152601f19601f8201169050808301925050508581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015611cd057600080fd5b505af1158015611ce4573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f6020526040902042600182015569021e19e0c9bab240000084046006820155600e80546001908101909155600580549091019055600c805485019055600d8054850190819055600b54811115611d5c57600b8190555b43600483015560108054600384018190556001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8c81169182179092556040805163ffffffff8d168152928a16927f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09918d918d918b91906020820190849080828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690910192835250506040519081900360200192509050a3505060006001555050505050505050565b60095481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6060600554604051908082528060200260200182016040528015611ec5578160200160208202803883390190505b5060065490915073ffffffffffffffffffffffffffffffffffffffff1680611eed5750611f69565b80611ef661330d565b60005b82858281518110611f0657fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254611f37911684611ffb565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff8084169085161415611ef957505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015611fe057600080fd5b505af1158015611ff4573d6000803e3d6000fd5b5050505050565b61200361330d565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b15801561208157600080fd5b505afa158015612095573d6000803e3d6000fd5b505050506040513d6101008110156120ac57600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b60065460075460009173ffffffffffffffffffffffffffffffffffffffff16908161215d57600192505050611f69565b61216561330d565b6002546121889073ffffffffffffffffffffffffffffffffffffffff1684611ffb565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040902060058101546004820154600683015460019096019593945091929091908510156121db576007859055612237565b60006005840181905543600485015560c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556007555b600061224384866128da565b9050600081600381111561225357fe5b14156122b757612263838361315a565b15806122a25750608085015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b156122b7576001975050505050505050611f69565b60018160038111156122c557fe5b14156122de576122d987866080015161242e565b6123a0565b6006840154156123825760006006850155426002850155602085015161230590889061319a565b60c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831617905560006007819055604051918916917f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c009190a26123a0565b600a548460020154420311156123a0576123a087866080015161242e565b600097505050505050505090565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156123d6575032611f69565b5033611f69565b60006123e761330d565b60025461240a9073ffffffffffffffffffffffffffffffffffffffff1685611ffb565b9050600061241884836128da565b600381111561242357fe5b149150505b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff1661244f61330d565b6124598285611ffb565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166124825750506128d6565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461252057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff16141561258557600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055612753565b60065473ffffffffffffffffffffffffffffffffffffffff858116911614156125f75760c0810151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560006007555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b15801561268e57600080fd5b505af11580156126a2573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b15801561273a57600080fd5b505af115801561274e573d6000803e3d6000fd5b505050505b602080820151600d805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600f90915260409020600601541561279f5761279f84826020015161319a565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600f6020526040808220828155600181018390556002810183905560038101839055600480820184905560058201849055600690910183905581517f72f5f2570000000000000000000000000000000000000000000000000000000081529081019390935251928516926372f5f25792602480820193929182900301818387803b15801561284957600080fd5b505af115801561285d573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b15801561294757600080fd5b505afa15801561295b573d6000803e3d6000fd5b505050506040513d602081101561297157600080fd5b50516080850151604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152815192909316926378c7d9799260248083019392829003018186803b1580156129e457600080fd5b505afa1580156129f8573d6000803e3d6000fd5b505050506040513d6040811015612a0e57600080fd5b508051602091820151918601519093509091508214612a3257600192505050612428565b8351811115612a4657600192505050612428565b6006850154612a5a57600292505050612428565b610e106002028560010154420310612a7757600392505050612428565b506000949350505050565b600354604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638abf6077916004808301926020929190829003018186803b158015612aed57600080fd5b505afa158015612b01573d6000803e3d6000fd5b505050506040513d6020811015612b1757600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282519316926378c7d97992602480840193919291829003018186803b158015612b8557600080fd5b505afa158015612b99573d6000803e3d6000fd5b505050506040513d6040811015612baf57600080fd5b5051905069021e19e0c9bab240000081101561121857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612cab57600080fd5b505afa158015612cbf573d6000803e3d6000fd5b505050506040513d6020811015612cd557600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811615612cff57612cff818361242e565b505050565b612d0c61330d565b612d168383611ffb565b608081015190915073ffffffffffffffffffffffffffffffffffffffff1615612cff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff0000821661ff008316637f0000008314801590612dca575082630a00000014155b8015612de857508263c0000000148015612de657508162a80000145b155b8015612e0b57508263ac000000148015612e0957508162f000001662100000145b155b8015612e1657508215155b8015612e395750826364000000148015612e3757508162c000001662400000145b155b8015612e5757508263a9000000148015612e5557508162fe0000145b155b8015612e7a57508263c6000000148015612e7857508162fe00001662120000145b155b8015612ea557508263c6000000148015612e9657508162330000145b8015612ea3575080616400145b155b8015612ecc57508263cb000000148015612ebd575081155b8015612eca575080617100145b155b8015612ee257508263f00000001663e000000014155b8015612ef857508263f00000001663f000000014155b8015612f0e57508363ffffffff1663ffffffff14155b612f7957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b60065473ffffffffffffffffffffffffffffffffffffffff166000811561310957612fa861330d565b612fb28584611ffb565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b15801561304857600080fd5b505af115801561305c573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b1580156130eb57600080fd5b505af11580156130ff573d6000803e3d6000fd5b5050505050613153565b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600060075580805b9250929050565b6000600854600e54101561317057506001612428565b60095443830390818161317f57fe5b0460010190506002818161318f57fe5b049093109392505050565b60108054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081106131ce57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8681168452600f9092526040808420600390810154939092168085529320018190556010805492935090918391908390811061322957fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601080548061327c57fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055908101909155600e805490910190555050600c805491909103905550565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091529056fea265627a7a72305820d383c5c8cf38e904d0354ed7928430adfbbc8e1dc4e4f72a2fc6368c49d756f664736f6c63430005090032`

// MasternodeRegistryV1 is an auto generated Go binding around an Ethereum contract.
type MasternodeRegistryV1 struct {
	MasternodeRegistryV1Caller     // Read-only binding to the contract
	MasternodeRegistryV1Transactor // Write-only binding to the contract
	MasternodeRegistryV1Filterer   // Log filterer for contract events
}

// MasternodeRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type MasternodeRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MasternodeRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MasternodeRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MasternodeRegistryV1Session struct {
	Contract     *MasternodeRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MasternodeRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MasternodeRegistryV1CallerSession struct {
	Contract *MasternodeRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// MasternodeRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MasternodeRegistryV1TransactorSession struct {
	Contract     *MasternodeRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// MasternodeRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type MasternodeRegistryV1Raw struct {
	Contract *MasternodeRegistryV1 // Generic contract binding to access the raw methods on
}

// MasternodeRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MasternodeRegistryV1CallerRaw struct {
	Contract *MasternodeRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// MasternodeRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MasternodeRegistryV1TransactorRaw struct {
	Contract *MasternodeRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMasternodeRegistryV1 creates a new instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1(address common.Address, backend bind.ContractBackend) (*MasternodeRegistryV1, error) {
	contract, err := bindMasternodeRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1{MasternodeRegistryV1Caller: MasternodeRegistryV1Caller{contract: contract}, MasternodeRegistryV1Transactor: MasternodeRegistryV1Transactor{contract: contract}, MasternodeRegistryV1Filterer: MasternodeRegistryV1Filterer{contract: contract}}, nil
}

// NewMasternodeRegistryV1Caller creates a new read-only instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*MasternodeRegistryV1Caller, error) {
	contract, err := bindMasternodeRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1Caller{contract: contract}, nil
}

// NewMasternodeRegistryV1Transactor creates a new write-only instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*MasternodeRegistryV1Transactor, error) {
	contract, err := bindMasternodeRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1Transactor{contract: contract}, nil
}

// NewMasternodeRegistryV1Filterer creates a new log filterer instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*MasternodeRegistryV1Filterer, error) {
	contract, err := bindMasternodeRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1Filterer{contract: contract}, nil
}

// bindMasternodeRegistryV1 binds a generic wrapper to an already deployed contract.
func bindMasternodeRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV1 *MasternodeRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV1.Contract.MasternodeRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV1 *MasternodeRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.MasternodeRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV1 *MasternodeRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.MasternodeRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) CleanupPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "cleanup_period")
	return *ret0, err
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.CleanupPeriod(&_MasternodeRegistryV1.CallOpts)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.CleanupPeriod(&_MasternodeRegistryV1.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Count(opts *bind.CallOpts) (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	ret := new(struct {
		Active           *big.Int
		Total            *big.Int
		ActiveCollateral *big.Int
		TotalCollateral  *big.Int
		MaxOfAllTimes    *big.Int
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "count")
	return *ret, err
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Count(&_MasternodeRegistryV1.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Count(&_MasternodeRegistryV1.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) CurrentMasternode(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "current_masternode")
	return *ret0, err
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.CurrentMasternode(&_MasternodeRegistryV1.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.CurrentMasternode(&_MasternodeRegistryV1.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) CurrentPayouts(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "current_payouts")
	return *ret0, err
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) CurrentPayouts() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.CurrentPayouts(&_MasternodeRegistryV1.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) CurrentPayouts() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.CurrentPayouts(&_MasternodeRegistryV1.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Enumerate(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "enumerate")
	return *ret0, err
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV1.Contract.Enumerate(&_MasternodeRegistryV1.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV1.Contract.Enumerate(&_MasternodeRegistryV1.CallOpts)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) GetReward(opts *bind.CallOpts, _blockNumber *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "getReward", _blockNumber)
	return *ret0, err
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.GetReward(&_MasternodeRegistryV1.CallOpts, _blockNumber)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.GetReward(&_MasternodeRegistryV1.CallOpts, _blockNumber)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Info(opts *bind.CallOpts, masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Owner          common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "info", masternode)
	return *ret, err
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Info(&_MasternodeRegistryV1.CallOpts, masternode)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Info(&_MasternodeRegistryV1.CallOpts, masternode)
}

// IsValid is a free data retrieval call binding the contract method 0x8b1b925f.
//
// Solidity: function isValid(address masternode) constant returns(bool)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) IsValid(opts *bind.CallOpts, masternode common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "isValid", masternode)
	return *ret0, err
}

// IsValid is a free data retrieval call binding the contract method 0x8b1b925f.
//
// Solidity: function isValid(address masternode) constant returns(bool)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) IsValid(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV1.Contract.IsValid(&_MasternodeRegistryV1.CallOpts, masternode)
}

// IsValid is a free data retrieval call binding the contract method 0x8b1b925f.
//
// Solidity: function isValid(address masternode) constant returns(bool)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) IsValid(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV1.Contract.IsValid(&_MasternodeRegistryV1.CallOpts, masternode)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnActive(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_active")
	return *ret0, err
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnActive() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnActive(&_MasternodeRegistryV1.CallOpts)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnActive() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnActive(&_MasternodeRegistryV1.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnActiveCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_active_collateral")
	return *ret0, err
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnActiveCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnActiveCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnAnnounced(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_announced")
	return *ret0, err
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnAnnounced() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnAnnounced(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnAnnounced() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnAnnounced(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnAnnouncedCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_announced_collateral")
	return *ret0, err
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnEverCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_ever_collateral")
	return *ret0, err
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnEverCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnEverCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 last_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidation_since, uint256 invalidations, uint256 seq_payouts)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	SwFeatures        *big.Int
	LastHeartbeat     *big.Int
	InactiveSince     *big.Int
	ValidatorIndex    *big.Int
	InvalidationSince *big.Int
	Invalidations     *big.Int
	SeqPayouts        *big.Int
}, error) {
	ret := new(struct {
		SwFeatures        *big.Int
		LastHeartbeat     *big.Int
		InactiveSince     *big.Int
		ValidatorIndex    *big.Int
		InvalidationSince *big.Int
		Invalidations     *big.Int
		SeqPayouts        *big.Int
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_status", arg0)
	return *ret, err
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 last_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidation_since, uint256 invalidations, uint256 seq_payouts)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnStatus(arg0 common.Address) (struct {
	SwFeatures        *big.Int
	LastHeartbeat     *big.Int
	InactiveSince     *big.Int
	ValidatorIndex    *big.Int
	InvalidationSince *big.Int
	Invalidations     *big.Int
	SeqPayouts        *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.MnStatus(&_MasternodeRegistryV1.CallOpts, arg0)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 last_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidation_since, uint256 invalidations, uint256 seq_payouts)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnStatus(arg0 common.Address) (struct {
	SwFeatures        *big.Int
	LastHeartbeat     *big.Int
	InactiveSince     *big.Int
	ValidatorIndex    *big.Int
	InvalidationSince *big.Int
	Invalidations     *big.Int
	SeqPayouts        *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.MnStatus(&_MasternodeRegistryV1.CallOpts, arg0)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) OwnerInfo(opts *bind.CallOpts, owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Masternode     common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "ownerInfo", owner)
	return *ret, err
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.OwnerInfo(&_MasternodeRegistryV1.CallOpts, owner)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.OwnerInfo(&_MasternodeRegistryV1.CallOpts, owner)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Proxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.Proxy(&_MasternodeRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.Proxy(&_MasternodeRegistryV1.CallOpts)
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) RequireValidation(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "require_validation")
	return *ret0, err
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) RequireValidation() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.RequireValidation(&_MasternodeRegistryV1.CallOpts)
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) RequireValidation() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.RequireValidation(&_MasternodeRegistryV1.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) TokenProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "token_proxy")
	return *ret0, err
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TokenProxy(&_MasternodeRegistryV1.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TokenProxy(&_MasternodeRegistryV1.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) TreasuryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "treasury_proxy")
	return *ret0, err
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TreasuryProxy(&_MasternodeRegistryV1.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TreasuryProxy(&_MasternodeRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) V1storage() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.V1storage(&_MasternodeRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.V1storage(&_MasternodeRegistryV1.CallOpts)
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) ValidationTarget(opts *bind.CallOpts, masternode common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "validationTarget", masternode)
	return *ret0, err
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) ValidationTarget(masternode common.Address) (common.Address, error) {
	return _MasternodeRegistryV1.Contract.ValidationTarget(&_MasternodeRegistryV1.CallOpts, masternode)
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) ValidationTarget(masternode common.Address) (common.Address, error) {
	return _MasternodeRegistryV1.Contract.ValidationTarget(&_MasternodeRegistryV1.CallOpts, masternode)
}

// ValidationPeriod is a free data retrieval call binding the contract method 0xdd227a22.
//
// Solidity: function validation_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) ValidationPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "validation_period")
	return *ret0, err
}

// ValidationPeriod is a free data retrieval call binding the contract method 0xdd227a22.
//
// Solidity: function validation_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) ValidationPeriod() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.ValidationPeriod(&_MasternodeRegistryV1.CallOpts)
}

// ValidationPeriod is a free data retrieval call binding the contract method 0xdd227a22.
//
// Solidity: function validation_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) ValidationPeriod() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.ValidationPeriod(&_MasternodeRegistryV1.CallOpts)
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) ValidatorList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "validator_list", arg0)
	return *ret0, err
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) ValidatorList(arg0 *big.Int) (common.Address, error) {
	return _MasternodeRegistryV1.Contract.ValidatorList(&_MasternodeRegistryV1.CallOpts, arg0)
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) ValidatorList(arg0 *big.Int) (common.Address, error) {
	return _MasternodeRegistryV1.Contract.ValidatorList(&_MasternodeRegistryV1.CallOpts, arg0)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Announce(opts *bind.TransactOpts, masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "announce", masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Announce(&_MasternodeRegistryV1.TransactOpts, masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Announce(&_MasternodeRegistryV1.TransactOpts, masternode, ipv4address, enode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Denounce(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "denounce", masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Denounce(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Denounce(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Destroy(&_MasternodeRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Destroy(&_MasternodeRegistryV1.TransactOpts, _newImpl)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Heartbeat(opts *bind.TransactOpts, block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "heartbeat", block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Heartbeat(&_MasternodeRegistryV1.TransactOpts, block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Heartbeat(&_MasternodeRegistryV1.TransactOpts, block_number, block_hash, sw_features)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Invalidate(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "invalidate", masternode)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Invalidate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Invalidate(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Invalidate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Invalidate(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Migrate(&_MasternodeRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Migrate(&_MasternodeRegistryV1.TransactOpts, _oldImpl)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) OnCollateralUpdate(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "onCollateralUpdate", owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.OnCollateralUpdate(&_MasternodeRegistryV1.TransactOpts, owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.OnCollateralUpdate(&_MasternodeRegistryV1.TransactOpts, owner)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Reward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "reward")
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Reward(&_MasternodeRegistryV1.TransactOpts)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Reward(&_MasternodeRegistryV1.TransactOpts)
}

// MasternodeRegistryV1AnnouncedIterator is returned from FilterAnnounced and is used to iterate over the raw logs and unpacked data for Announced events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1AnnouncedIterator struct {
	Event *MasternodeRegistryV1Announced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1AnnouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Announced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Announced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1AnnouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1AnnouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Announced represents a Announced event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Announced struct {
	Masternode  common.Address
	Owner       common.Address
	Ipv4address uint32
	Enode       [2][32]byte
	Collateral  *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAnnounced is a free log retrieval operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterAnnounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV1AnnouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1AnnouncedIterator{contract: _MasternodeRegistryV1.contract, event: "Announced", logs: logs, sub: sub}, nil
}

// WatchAnnounced is a free log subscription operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchAnnounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Announced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Announced)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Announced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1DeactivatedIterator is returned from FilterDeactivated and is used to iterate over the raw logs and unpacked data for Deactivated events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1DeactivatedIterator struct {
	Event *MasternodeRegistryV1Deactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1DeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Deactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Deactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1DeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1DeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Deactivated represents a Deactivated event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Deactivated struct {
	Masternode common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDeactivated is a free log retrieval operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address indexed masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterDeactivated(opts *bind.FilterOpts, masternode []common.Address) (*MasternodeRegistryV1DeactivatedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Deactivated", masternodeRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1DeactivatedIterator{contract: _MasternodeRegistryV1.contract, event: "Deactivated", logs: logs, sub: sub}, nil
}

// WatchDeactivated is a free log subscription operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address indexed masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchDeactivated(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Deactivated, masternode []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Deactivated", masternodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Deactivated)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Deactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1DenouncedIterator is returned from FilterDenounced and is used to iterate over the raw logs and unpacked data for Denounced events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1DenouncedIterator struct {
	Event *MasternodeRegistryV1Denounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1DenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Denounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Denounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1DenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1DenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Denounced represents a Denounced event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Denounced struct {
	Masternode common.Address
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDenounced is a free log retrieval operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterDenounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV1DenouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1DenouncedIterator{contract: _MasternodeRegistryV1.contract, event: "Denounced", logs: logs, sub: sub}, nil
}

// WatchDenounced is a free log subscription operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchDenounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Denounced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Denounced)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Denounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1HeartbeatIterator is returned from FilterHeartbeat and is used to iterate over the raw logs and unpacked data for Heartbeat events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1HeartbeatIterator struct {
	Event *MasternodeRegistryV1Heartbeat // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1HeartbeatIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Heartbeat)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Heartbeat)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1HeartbeatIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1HeartbeatIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Heartbeat represents a Heartbeat event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Heartbeat struct {
	Masternode common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterHeartbeat is a free log retrieval operation binding the contract event 0x76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a64.
//
// Solidity: event Heartbeat(address indexed masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterHeartbeat(opts *bind.FilterOpts, masternode []common.Address) (*MasternodeRegistryV1HeartbeatIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Heartbeat", masternodeRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1HeartbeatIterator{contract: _MasternodeRegistryV1.contract, event: "Heartbeat", logs: logs, sub: sub}, nil
}

// WatchHeartbeat is a free log subscription operation binding the contract event 0x76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a64.
//
// Solidity: event Heartbeat(address indexed masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchHeartbeat(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Heartbeat, masternode []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Heartbeat", masternodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Heartbeat)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Heartbeat", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1InvalidationIterator is returned from FilterInvalidation and is used to iterate over the raw logs and unpacked data for Invalidation events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1InvalidationIterator struct {
	Event *MasternodeRegistryV1Invalidation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1InvalidationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Invalidation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Invalidation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1InvalidationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1InvalidationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Invalidation represents a Invalidation event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Invalidation struct {
	Masternode common.Address
	Validator  common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInvalidation is a free log retrieval operation binding the contract event 0x389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d331.
//
// Solidity: event Invalidation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterInvalidation(opts *bind.FilterOpts, masternode []common.Address, validator []common.Address) (*MasternodeRegistryV1InvalidationIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Invalidation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1InvalidationIterator{contract: _MasternodeRegistryV1.contract, event: "Invalidation", logs: logs, sub: sub}, nil
}

// WatchInvalidation is a free log subscription operation binding the contract event 0x389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d331.
//
// Solidity: event Invalidation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchInvalidation(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Invalidation, masternode []common.Address, validator []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Invalidation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Invalidation)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Invalidation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
