// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MasternodeRegistryV1ABI is the input ABI used to generate the binding from.
const MasternodeRegistryV1ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"name\":\"active\",\"type\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\"},{\"name\":\"active_collateral\",\"type\":\"uint256\"},{\"name\":\"total_collateral\",\"type\":\"uint256\"},{\"name\":\"max_of_all_times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_masternode\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"validate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"require_voting_from\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mn_status\",\"outputs\":[{\"name\":\"sw_features\",\"type\":\"uint256\"},{\"name\":\"last_heartbeat\",\"type\":\"uint64\"},{\"name\":\"validations\",\"type\":\"uint32\"},{\"name\":\"votes\",\"type\":\"uint32\"},{\"name\":\"inactive_since\",\"type\":\"uint64\"},{\"name\":\"seq_payouts\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced_collateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cleanup_period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active_collateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"isValid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"block_number\",\"type\":\"uint256\"},{\"name\":\"block_hash\",\"type\":\"bytes32\"},{\"name\":\"sw_features\",\"type\":\"uint256\"}],\"name\":\"heartbeat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_payouts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownerInfo\",\"outputs\":[{\"name\":\"masternode\",\"type\":\"address\"},{\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"name\":\"collateral\",\"type\":\"uint256\"},{\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"denounce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_ever_collateral\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"onCollateralUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"masternode\",\"type\":\"address\"},{\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"name\":\"enode\",\"type\":\"bytes32[2]\"}],\"name\":\"announce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votes_per_cycle\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"votes_max\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerate\",\"outputs\":[{\"name\":\"masternodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_token_proxy\",\"type\":\"address\"},{\"name\":\"_treasury_proxy\",\"type\":\"address\"},{\"name\":\"_config\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Heartbeat\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"indexed\":false,\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"Announced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Denounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Validation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Deactivated\",\"type\":\"event\"}]"

// MasternodeRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const MasternodeRegistryV1Bin = `60806040523480156200001157600080fd5b50604051620041073803806200410783398181016040526101008110156200003857600080fd5b5080516020820151604080840151600080546001600160a01b0319166001600160a01b03861617905590519293919290916060019062000078906200017d565b604051809103906000f08015801562000095573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b03938416179091556003805482168684161790556004805490911691841691909117905580516006556020810151600755604081015160085560608101516009556080810151600a81905569021e19e0c9bab24000008110156200017257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e697469616c20636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b50505050506200018b565b61097b806200378c83390190565b6135f1806200019b6000396000f3fe6080604052600436106101cc5760003560e01c80638b1b925f116100f7578063cb4f40c511610095578063d9b050ec11610064578063d9b050ec146107a1578063ec556889146107b6578063ff235fa3146107cb578063ff9f78b3146107e0576101cc565b8063cb4f40c5146106bb578063cdc7d4ad146106d0578063ce5494bb14610710578063d70d5c3014610750576101cc565b8063a2731784116100d1578063a273178414610611578063ab00fdc414610626578063b83e16051461063b578063ca0e551f1461067b576101cc565b80638b1b925f1461055c57806391ceac96146105b05780639c5e8ae2146105e6576101cc565b80632d0593051161016f57806357f2a7d81161013e57806357f2a7d8146105085780635f6e2c7b1461051d5780636d41ff4e1461053257806384afd47f14610547576101cc565b80632d05930514610428578063483eaf3d1461043d5780634d1b4dae14610452578063521f284d146104da576101cc565b80631a26763c116101ab5780631a26763c146103665780631c4b774b146103a4578063207c64fb146103e0578063228cb73314610420576101cc565b8062f55d9d1461023357806306661abd146102755780630aae7a6b146102b5575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561023f57600080fd5b506102736004803603602081101561025657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610845565b005b34801561028157600080fd5b5061028a6108ed565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102c157600080fd5b506102f5600480360360208110156102d857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610929565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b8381101561034357818101518382015260200161032b565b505050509050018381526020018281526020019550505050505060405180910390f35b34801561037257600080fd5b5061037b610a28565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103b057600080fd5b506103ce600480360360208110156103c757600080fd5b5035610a44565b60408051918252519081900360200190f35b3480156103ec57600080fd5b506102736004803603602081101561040357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b7c565b610273610fa8565b34801561043457600080fd5b5061037b611204565b34801561044957600080fd5b506103ce611220565b34801561045e57600080fd5b506104926004803603602081101561047557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611226565b6040805196875267ffffffffffffffff958616602088015263ffffffff94851687820152929093166060860152909216608084015260ff1660a0830152519081900360c00190f35b3480156104e657600080fd5b506104ef6112ac565b6040805163ffffffff9092168252519081900360200190f35b34801561051457600080fd5b506103ce6112b8565b34801561052957600080fd5b506103ce6112be565b34801561053e57600080fd5b506103ce6112c4565b34801561055357600080fd5b5061037b6112ca565b34801561056857600080fd5b5061059c6004803603602081101561057f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112e6565b604080519115158252519081900360200190f35b3480156105bc57600080fd5b50610273600480360360608110156105d357600080fd5b508035906020810135906040013561131e565b3480156105f257600080fd5b506105fb6116cf565b6040805160ff9092168252519081900360200190f35b34801561061d57600080fd5b5061037b6116f0565b34801561063257600080fd5b506104ef61170c565b34801561064757600080fd5b506102f56004803603602081101561065e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611730565b34801561068757600080fd5b506102736004803603602081101561069e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118af565b3480156106c757600080fd5b506103ce611933565b3480156106dc57600080fd5b50610273600480360360208110156106f357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611939565b34801561071c57600080fd5b506102736004803603602081101561073357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611afe565b34801561075c57600080fd5b506102736004803603608081101561077357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611b8c565b3480156107ad57600080fd5b506103ce611ff4565b3480156107c257600080fd5b5061037b611ffa565b3480156107d757600080fd5b506103ce612016565b3480156107ec57600080fd5b506107f561201c565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610831578181015183820152602001610819565b505050509050019250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff1633146108cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6108d481612107565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600d54600454600b54600c54600a5463ffffffff9485169574010000000000000000000000000000000000000000909404909416939192909190565b60008061093461355a565b60008061093f613578565b6002546109629073ffffffffffffffffffffffffffffffffffffffff1688612196565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166109eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d6020811015610ad857600080fd5b505190508215801590610b6557508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b3757600080fd5b505afa158015610b4b573d6000803e3d6000fd5b505050506040513d6020811015610b6157600080fd5b5051155b15610b7657677ed7cd92ff12000091505b50919050565b60015415610beb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000610bf96122c8565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c9657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f566f746520666f722073656c6600000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e60205260409020610cc582826122f7565b610d3057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b60018101546c01000000000000000000000000900463ffffffff16610db657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f206d6f726520766f74657300000000000000000000000000000000000000604482015290519081900360640190fd5b600181810180547fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff81166c010000000000000000000000009182900463ffffffff9081167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff011690910217905573ffffffffffffffffffffffffffffffffffffffff84166000908152600e60205260409020908101547801000000000000000000000000000000000000000000000000900460ff16610ed657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b600854600182015468010000000000000000900463ffffffff161015610f43576001808201805463ffffffff680100000000000000008083048216909401169092027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff9092169190911790555b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fecf3d22a6c5bee8410ef008f28f974ab2b99754941406d83f2e79834bab78b6d60405160405180910390a3505060006001555050565b6001541561101757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315611145576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b15801561109257600080fd5b505afa1580156110a6573d6000803e3d6000fd5b505050506040513d60208110156110bc57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b15801561112a57600080fd5b505af115801561113e573d6000803e3d6000fd5b5050505050505b677ed7cd92ff1200003414156111fc5743600f54106111c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b620186a05a116111d157fe5b343031146111db57fe5b620186a05a1180156111f257506111f0612348565b155b156111fc576111db565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b600e602052600090815260409020805460019091015467ffffffffffffffff8082169163ffffffff6801000000000000000082048116926c0100000000000000000000000083049091169170010000000000000000000000000000000081049091169060ff78010000000000000000000000000000000000000000000000009091041686565b600d5463ffffffff1681565b600c5481565b60095481565b600b5481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e602052604081206113169083906122f7565b90505b919050565b6001541561138d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561142657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b8183401461149557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b600061149f6122c8565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e602052604090206001810154919250907801000000000000000000000000000000000000000000000000900460ff1661155757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b600181015467ffffffffffffffff164203611c2081106115d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f546f6f206c617465000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610708811161164857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff1617905583825560405173ffffffffffffffffffffffffffffffffffffffff8416907f76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a6490600090a25050600060015550505050565b60055474010000000000000000000000000000000000000000900460ff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60045474010000000000000000000000000000000000000000900463ffffffff1681565b60008061173b61355a565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b1580156117b357600080fd5b505afa1580156117c7573d6000803e3d6000fd5b505050506040513d60208110156117dd57600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff861661186357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b61186b613578565b6118758288612196565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b6001541561191e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556111fc8161192e6122c8565b6127da565b600a5481565b600154156119a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d6020811015611a4e57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611a745750506111fc565b611a7c613578565b600254611a9f9073ffffffffffffffffffffffffffffffffffffffff1683612196565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040812091925090611ad29083612d63565b90506001816003811115611ae257fe5b1415611af257611af283866127da565b50505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b8457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611b89815b50565b60015415611bfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611c096122c8565b60025490915073ffffffffffffffffffffffffffffffffffffffff166000611c3083612f33565b9050611c3c82846130dd565b611c4682876131b5565b611c4f85613251565b600080611c5c8489613322565b915091508373ffffffffffffffffffffffffffffffffffffffff1663f71169df89878a8a8843888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280828437600081840152601f19601f8201169050808301925050508581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015611dc257600080fd5b505af1158015611dd6573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600e60205260409020600180820180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff16177fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000069021e19e0c9bab2400000880460ff1602179055600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000811663ffffffff9182168401821617909155600480547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff811674010000000000000000000000000000000000000000918290048416909401909216909102919091179055600b805485019055600c8054850190819055600a54811115611f2f57600a8190555b8673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c098b8b89604051808463ffffffff1663ffffffff16815260200183600260200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690910192835250506040519081900360200192509050a3505060006001555050505050505050565b60065481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6060600460149054906101000a900463ffffffff1663ffffffff16604051908082528060200260200182016040528015612060578160200160208202803883390190505b5060055490915073ffffffffffffffffffffffffffffffffffffffff16806120885750612104565b80612091613578565b60005b828582815181106120a157fe5b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526002546120d2911684612196565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff808416908516141561209457505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b15801561217b57600080fd5b505af115801561218f573d6000803e3d6000fd5b5050505050565b61219e613578565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b15801561221c57600080fd5b505afa158015612230573d6000803e3d6000fd5b505050506040513d61010081101561224757600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156122f0575032612104565b5033612104565b6000612301613578565b6002546123249073ffffffffffffffffffffffffffffffffffffffff1685612196565b905060006123328483612d63565b600381111561233d57fe5b149150505b92915050565b60055460009073ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff168161239157600192505050612104565b612399613578565b6002546123bc9073ffffffffffffffffffffffffffffffffffffffff1684612196565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600e60205260409020600654600180830180547fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff166c0100000000000000000000000063ffffffff9485160217908190559501949293509091680100000000000000008104909116907801000000000000000000000000000000000000000000000000900460ff90811690851610156124b457600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff87160217905561254a565b6001820180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff16905560c0830151600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555b60006125568385612d63565b9050600081600381111561256657fe5b14156125c8576125758261351a565b15806125b45750608084015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b156125c85760019650505050505050612104565b60018160038111156125d657fe5b14156125ef576125ea8685608001516127da565b6127cd565b60018301547801000000000000000000000000000000000000000000000000900460ff1615612791576001830180547fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004267ffffffffffffffff1602178155600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000811663ffffffff9182167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01909116179055602085810151600b805491909103905581547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff1690915560c0850151600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055604080519189168252517f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00929181900390910190a16127cd565b6009546001840154700100000000000000000000000000000000900467ffffffffffffffff16420311156127cd576127cd8685608001516127da565b6000965050505050505090565b60025473ffffffffffffffffffffffffffffffffffffffff166127fb613578565b6128058285612196565b608081015190915073ffffffffffffffffffffffffffffffffffffffff1661282e575050612d5f565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146128cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff16141561293157600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055612b1c565b60055473ffffffffffffffffffffffffffffffffffffffff858116911614156129c05760c0810151600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b158015612a5757600080fd5b505af1158015612a6b573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b158015612b0357600080fd5b505af1158015612b17573d6000803e3d6000fd5b505050505b602081810151600c805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600e90915260409020600101547801000000000000000000000000000000000000000000000000900460ff1615612be057600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000811663ffffffff9182167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019091161790556020810151600b80549190910390555b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600e602052604080822082815560010180547fffffffffffffff0000000000000000000000000000000000000000000000000016905580517f72f5f257000000000000000000000000000000000000000000000000000000008152600481019390935251928516926372f5f25792602480820193929182900301818387803b158015612c8857600080fd5b505af1158015612c9c573d6000803e3d6000fd5b5050600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff7401000000000000000000000000000000000000000080840482169290920116027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9091161790555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015612dd057600080fd5b505afa158015612de4573d6000803e3d6000fd5b505050506040513d6020811015612dfa57600080fd5b50516080850151604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152815192909316926378c7d9799260248083019392829003018186803b158015612e6d57600080fd5b505afa158015612e81573d6000803e3d6000fd5b505050506040513d6040811015612e9757600080fd5b508051602091820151918601519093509091508214612ebb57600192505050612342565b8351811115612ecf57600192505050612342565b60018501547801000000000000000000000000000000000000000000000000900460ff16612f0257600292505050612342565b6001850154611c2067ffffffffffffffff909116420310612f2857600392505050612342565b506000949350505050565b600354604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638abf6077916004808301926020929190829003018186803b158015612f9e57600080fd5b505afa158015612fb2573d6000803e3d6000fd5b505050506040513d6020811015612fc857600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282519316926378c7d97992602480840193919291829003018186803b15801561303657600080fd5b505afa15801561304a573d6000803e3d6000fd5b505050506040513d604081101561306057600080fd5b5051905069021e19e0c9bab240000081101561131957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561315c57600080fd5b505afa158015613170573d6000803e3d6000fd5b505050506040513d602081101561318657600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116156131b0576131b081836127da565b505050565b6131bd613578565b6131c78383612196565b608081015190915073ffffffffffffffffffffffffffffffffffffffff16156131b057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff00008216637f0000008214801590613276575081630a00000014155b801561329457508163c000000014801561329257508062a80000145b155b80156132b757508163ac0000001480156132b557508062f000001662100000145b155b6131b057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff16600081156134ac5761334b613578565b6133558584612196565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b1580156133eb57600080fd5b505af11580156133ff573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b15801561348e57600080fd5b505af11580156134a2573d6000803e3d6000fd5b5050505050613513565b5050600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905580805b9250929050565b600d5460075460009163ffffffff169081101561353b576001915050611319565b60085460028204908082111561354f578091505b509092101592915050565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091529056fea265627a7a7230582088101da8814488f2f646af4db9ae32695e96b608717a328a63bc5da6a3b4c48764736f6c634300050900326080604052600080546001600160a01b03191633179055610956806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063412cbac01161005b578063412cbac01461016857806341c0e1b5146101fa57806372f5f25714610202578063f71169df146102355761007d565b806313af4035146100825780631f9579ca146100b757806328d566be1461010c575b600080fd5b6100b56004803603602081101561009857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661029f565b005b6100b5600480360360a08110156100cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135151591604082013581169160608101351515916080909101351661036c565b61013f6004803603602081101561012257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104b1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61019b6004803603602081101561017e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104d9565b60408051988952602089019790975287870195909552606087019390935273ffffffffffffffffffffffffffffffffffffffff9182166080870152811660a08601521660c084015263ffffffff1660e083015251908190036101000190f35b6100b5610551565b6100b56004803603602081101561021857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105da565b6100b5600480360361012081101561024c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169163ffffffff60408301351691606081019160a08201359160c08101359160e0820135811691610100013516610720565b60005473ffffffffffffffffffffffffffffffffffffffff16331461032557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602052604090208415610460576005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b82156104a9576006810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b505050505050565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015493949293919273ffffffffffffffffffffffffffffffffffffffff918216929082169181169074010000000000000000000000000000000000000000900463ffffffff1688565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b33ff5b60005473ffffffffffffffffffffffffffffffffffffffff16331461066057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff90811660008181526001602081815260408084206004810180549097168552600280845291852080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915595855291839052838255918101839055908101829055600381019190915582548216909255600582018054909116905560060180547fffffffffffffffff000000000000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff80891660009081526001602052604090206004810154909190811690891681146108515773ffffffffffffffffffffffffffffffffffffffff8116156107fd57fe5b73ffffffffffffffffffffffffffffffffffffffff898116600090815260026020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918c169190911790555b5060048101805473ffffffffffffffffffffffffffffffffffffffff998a167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600682018054883560028501556020909801356003840155600183019690965593815560050180549288169284169290921790915590941663ffffffff9390931674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179092161790555056fea265627a7a72305820a58871695538551978a38de156851b8f789842d2f4d250013d55d9242ab14f2664736f6c63430005090032`

// DeployMasternodeRegistryV1 deploys a new Ethereum contract, binding an instance of MasternodeRegistryV1 to it.
func DeployMasternodeRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _token_proxy common.Address, _treasury_proxy common.Address, _config [5]*big.Int) (common.Address, *types.Transaction, *MasternodeRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MasternodeRegistryV1Bin), backend, _proxy, _token_proxy, _treasury_proxy, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MasternodeRegistryV1{MasternodeRegistryV1Caller: MasternodeRegistryV1Caller{contract: contract}, MasternodeRegistryV1Transactor: MasternodeRegistryV1Transactor{contract: contract}, MasternodeRegistryV1Filterer: MasternodeRegistryV1Filterer{contract: contract}}, nil
}

// MasternodeRegistryV1Bin is the compiled bytecode of contract after deployment.
const MasternodeRegistryV1RuntimeBin = `6080604052600436106101cc5760003560e01c80638b1b925f116100f7578063cb4f40c511610095578063d9b050ec11610064578063d9b050ec146107a1578063ec556889146107b6578063ff235fa3146107cb578063ff9f78b3146107e0576101cc565b8063cb4f40c5146106bb578063cdc7d4ad146106d0578063ce5494bb14610710578063d70d5c3014610750576101cc565b8063a2731784116100d1578063a273178414610611578063ab00fdc414610626578063b83e16051461063b578063ca0e551f1461067b576101cc565b80638b1b925f1461055c57806391ceac96146105b05780639c5e8ae2146105e6576101cc565b80632d0593051161016f57806357f2a7d81161013e57806357f2a7d8146105085780635f6e2c7b1461051d5780636d41ff4e1461053257806384afd47f14610547576101cc565b80632d05930514610428578063483eaf3d1461043d5780634d1b4dae14610452578063521f284d146104da576101cc565b80631a26763c116101ab5780631a26763c146103665780631c4b774b146103a4578063207c64fb146103e0578063228cb73314610420576101cc565b8062f55d9d1461023357806306661abd146102755780630aae7a6b146102b5575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561023f57600080fd5b506102736004803603602081101561025657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610845565b005b34801561028157600080fd5b5061028a6108ed565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b3480156102c157600080fd5b506102f5600480360360208110156102d857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610929565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b8381101561034357818101518382015260200161032b565b505050509050018381526020018281526020019550505050505060405180910390f35b34801561037257600080fd5b5061037b610a28565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103b057600080fd5b506103ce600480360360208110156103c757600080fd5b5035610a44565b60408051918252519081900360200190f35b3480156103ec57600080fd5b506102736004803603602081101561040357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610b7c565b610273610fa8565b34801561043457600080fd5b5061037b611204565b34801561044957600080fd5b506103ce611220565b34801561045e57600080fd5b506104926004803603602081101561047557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611226565b6040805196875267ffffffffffffffff958616602088015263ffffffff94851687820152929093166060860152909216608084015260ff1660a0830152519081900360c00190f35b3480156104e657600080fd5b506104ef6112ac565b6040805163ffffffff9092168252519081900360200190f35b34801561051457600080fd5b506103ce6112b8565b34801561052957600080fd5b506103ce6112be565b34801561053e57600080fd5b506103ce6112c4565b34801561055357600080fd5b5061037b6112ca565b34801561056857600080fd5b5061059c6004803603602081101561057f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166112e6565b604080519115158252519081900360200190f35b3480156105bc57600080fd5b50610273600480360360608110156105d357600080fd5b508035906020810135906040013561131e565b3480156105f257600080fd5b506105fb6116cf565b6040805160ff9092168252519081900360200190f35b34801561061d57600080fd5b5061037b6116f0565b34801561063257600080fd5b506104ef61170c565b34801561064757600080fd5b506102f56004803603602081101561065e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611730565b34801561068757600080fd5b506102736004803603602081101561069e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118af565b3480156106c757600080fd5b506103ce611933565b3480156106dc57600080fd5b50610273600480360360208110156106f357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611939565b34801561071c57600080fd5b506102736004803603602081101561073357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611afe565b34801561075c57600080fd5b506102736004803603608081101561077357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611b8c565b3480156107ad57600080fd5b506103ce611ff4565b3480156107c257600080fd5b5061037b611ffa565b3480156107d757600080fd5b506103ce612016565b3480156107ec57600080fd5b506107f561201c565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610831578181015183820152602001610819565b505050509050019250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff1633146108cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6108d481612107565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600d54600454600b54600c54600a5463ffffffff9485169574010000000000000000000000000000000000000000909404909416939192909190565b60008061093461355a565b60008061093f613578565b6002546109629073ffffffffffffffffffffffffffffffffffffffff1688612196565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166109eb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d6020811015610ad857600080fd5b505190508215801590610b6557508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610b3757600080fd5b505afa158015610b4b573d6000803e3d6000fd5b505050506040513d6020811015610b6157600080fd5b5051155b15610b7657677ed7cd92ff12000091505b50919050565b60015415610beb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000610bf96122c8565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c9657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f566f746520666f722073656c6600000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e60205260409020610cc582826122f7565b610d3057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b60018101546c01000000000000000000000000900463ffffffff16610db657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f206d6f726520766f74657300000000000000000000000000000000000000604482015290519081900360640190fd5b600181810180547fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff81166c010000000000000000000000009182900463ffffffff9081167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff011690910217905573ffffffffffffffffffffffffffffffffffffffff84166000908152600e60205260409020908101547801000000000000000000000000000000000000000000000000900460ff16610ed657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b600854600182015468010000000000000000900463ffffffff161015610f43576001808201805463ffffffff680100000000000000008083048216909401169092027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff9092169190911790555b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fecf3d22a6c5bee8410ef008f28f974ab2b99754941406d83f2e79834bab78b6d60405160405180910390a3505060006001555050565b6001541561101757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315611145576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b15801561109257600080fd5b505afa1580156110a6573d6000803e3d6000fd5b505050506040513d60208110156110bc57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b15801561112a57600080fd5b505af115801561113e573d6000803e3d6000fd5b5050505050505b677ed7cd92ff1200003414156111fc5743600f54106111c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b620186a05a116111d157fe5b343031146111db57fe5b620186a05a1180156111f257506111f0612348565b155b156111fc576111db565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b600e602052600090815260409020805460019091015467ffffffffffffffff8082169163ffffffff6801000000000000000082048116926c0100000000000000000000000083049091169170010000000000000000000000000000000081049091169060ff78010000000000000000000000000000000000000000000000009091041686565b600d5463ffffffff1681565b600c5481565b60095481565b600b5481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e602052604081206113169083906122f7565b90505b919050565b6001541561138d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561142657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b8183401461149557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b600061149f6122c8565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600e602052604090206001810154919250907801000000000000000000000000000000000000000000000000900460ff1661155757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b600181015467ffffffffffffffff164203611c2081106115d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f546f6f206c617465000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610708811161164857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001820180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff1617905583825560405173ffffffffffffffffffffffffffffffffffffffff8416907f76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a6490600090a25050600060015550505050565b60055474010000000000000000000000000000000000000000900460ff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60045474010000000000000000000000000000000000000000900463ffffffff1681565b60008061173b61355a565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b1580156117b357600080fd5b505afa1580156117c7573d6000803e3d6000fd5b505050506040513d60208110156117dd57600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff861661186357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b61186b613578565b6118758288612196565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b6001541561191e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556111fc8161192e6122c8565b6127da565b600a5481565b600154156119a857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b158015611a2457600080fd5b505afa158015611a38573d6000803e3d6000fd5b505050506040513d6020811015611a4e57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611a745750506111fc565b611a7c613578565b600254611a9f9073ffffffffffffffffffffffffffffffffffffffff1683612196565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600e6020526040812091925090611ad29083612d63565b90506001816003811115611ae257fe5b1415611af257611af283866127da565b50505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b8457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611b89815b50565b60015415611bfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611c096122c8565b60025490915073ffffffffffffffffffffffffffffffffffffffff166000611c3083612f33565b9050611c3c82846130dd565b611c4682876131b5565b611c4f85613251565b600080611c5c8489613322565b915091508373ffffffffffffffffffffffffffffffffffffffff1663f71169df89878a8a8843888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280828437600081840152601f19601f8201169050808301925050508581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015611dc257600080fd5b505af1158015611dd6573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600e60205260409020600180820180547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000164267ffffffffffffffff16177fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000069021e19e0c9bab2400000880460ff1602179055600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000811663ffffffff9182168401821617909155600480547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff811674010000000000000000000000000000000000000000918290048416909401909216909102919091179055600b805485019055600c8054850190819055600a54811115611f2f57600a8190555b8673ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c098b8b89604051808463ffffffff1663ffffffff16815260200183600260200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690910192835250506040519081900360200192509050a3505060006001555050505050505050565b60065481565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b6060600460149054906101000a900463ffffffff1663ffffffff16604051908082528060200260200182016040528015612060578160200160208202803883390190505b5060055490915073ffffffffffffffffffffffffffffffffffffffff16806120885750612104565b80612091613578565b60005b828582815181106120a157fe5b73ffffffffffffffffffffffffffffffffffffffff92831660209182029290920101526002546120d2911684612196565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff808416908516141561209457505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b15801561217b57600080fd5b505af115801561218f573d6000803e3d6000fd5b5050505050565b61219e613578565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b15801561221c57600080fd5b505afa158015612230573d6000803e3d6000fd5b505050506040513d61010081101561224757600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156122f0575032612104565b5033612104565b6000612301613578565b6002546123249073ffffffffffffffffffffffffffffffffffffffff1685612196565b905060006123328483612d63565b600381111561233d57fe5b149150505b92915050565b60055460009073ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000900460ff168161239157600192505050612104565b612399613578565b6002546123bc9073ffffffffffffffffffffffffffffffffffffffff1684612196565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600e60205260409020600654600180830180547fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff166c0100000000000000000000000063ffffffff9485160217908190559501949293509091680100000000000000008104909116907801000000000000000000000000000000000000000000000000900460ff90811690851610156124b457600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff87160217905561254a565b6001820180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff16905560c0830151600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555b60006125568385612d63565b9050600081600381111561256657fe5b14156125c8576125758261351a565b15806125b45750608084015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b156125c85760019650505050505050612104565b60018160038111156125d657fe5b14156125ef576125ea8685608001516127da565b6127cd565b60018301547801000000000000000000000000000000000000000000000000900460ff1615612791576001830180547fffffffffffffff000000000000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004267ffffffffffffffff1602178155600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000811663ffffffff9182167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01909116179055602085810151600b805491909103905581547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff1690915560c0850151600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055604080519189168252517f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00929181900390910190a16127cd565b6009546001840154700100000000000000000000000000000000900467ffffffffffffffff16420311156127cd576127cd8685608001516127da565b6000965050505050505090565b60025473ffffffffffffffffffffffffffffffffffffffff166127fb613578565b6128058285612196565b608081015190915073ffffffffffffffffffffffffffffffffffffffff1661282e575050612d5f565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146128cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff16141561293157600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055612b1c565b60055473ffffffffffffffffffffffffffffffffffffffff858116911614156129c05760c0810151600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b158015612a5757600080fd5b505af1158015612a6b573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b158015612b0357600080fd5b505af1158015612b17573d6000803e3d6000fd5b505050505b602081810151600c805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600e90915260409020600101547801000000000000000000000000000000000000000000000000900460ff1615612be057600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000811663ffffffff9182167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019091161790556020810151600b80549190910390555b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600e602052604080822082815560010180547fffffffffffffff0000000000000000000000000000000000000000000000000016905580517f72f5f257000000000000000000000000000000000000000000000000000000008152600481019390935251928516926372f5f25792602480820193929182900301818387803b158015612c8857600080fd5b505af1158015612c9c573d6000803e3d6000fd5b5050600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63ffffffff7401000000000000000000000000000000000000000080840482169290920116027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff9091161790555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015612dd057600080fd5b505afa158015612de4573d6000803e3d6000fd5b505050506040513d6020811015612dfa57600080fd5b50516080850151604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283166004820152815192909316926378c7d9799260248083019392829003018186803b158015612e6d57600080fd5b505afa158015612e81573d6000803e3d6000fd5b505050506040513d6040811015612e9757600080fd5b508051602091820151918601519093509091508214612ebb57600192505050612342565b8351811115612ecf57600192505050612342565b60018501547801000000000000000000000000000000000000000000000000900460ff16612f0257600292505050612342565b6001850154611c2067ffffffffffffffff909116420310612f2857600392505050612342565b506000949350505050565b600354604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff1691638abf6077916004808301926020929190829003018186803b158015612f9e57600080fd5b505afa158015612fb2573d6000803e3d6000fd5b505050506040513d6020811015612fc857600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282519316926378c7d97992602480840193919291829003018186803b15801561303657600080fd5b505afa15801561304a573d6000803e3d6000fd5b505050506040513d604081101561306057600080fd5b5051905069021e19e0c9bab240000081101561131957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561315c57600080fd5b505afa158015613170573d6000803e3d6000fd5b505050506040513d602081101561318657600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116156131b0576131b081836127da565b505050565b6131bd613578565b6131c78383612196565b608081015190915073ffffffffffffffffffffffffffffffffffffffff16156131b057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff00008216637f0000008214801590613276575081630a00000014155b801561329457508163c000000014801561329257508062a80000145b155b80156132b757508163ac0000001480156132b557508062f000001662100000145b155b6131b057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60055473ffffffffffffffffffffffffffffffffffffffff16600081156134ac5761334b613578565b6133558584612196565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b1580156133eb57600080fd5b505af11580156133ff573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b15801561348e57600080fd5b505af11580156134a2573d6000803e3d6000fd5b5050505050613513565b5050600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316177fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16905580805b9250929050565b600d5460075460009163ffffffff169081101561353b576001915050611319565b60085460028204908082111561354f578091505b509092101592915050565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101919091529056fea265627a7a7230582088101da8814488f2f646af4db9ae32695e96b608717a328a63bc5da6a3b4c48764736f6c63430005090032`

// MasternodeRegistryV1 is an auto generated Go binding around an Ethereum contract.
type MasternodeRegistryV1 struct {
	MasternodeRegistryV1Caller     // Read-only binding to the contract
	MasternodeRegistryV1Transactor // Write-only binding to the contract
	MasternodeRegistryV1Filterer   // Log filterer for contract events
}

// MasternodeRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type MasternodeRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MasternodeRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MasternodeRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MasternodeRegistryV1Session struct {
	Contract     *MasternodeRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MasternodeRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MasternodeRegistryV1CallerSession struct {
	Contract *MasternodeRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// MasternodeRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MasternodeRegistryV1TransactorSession struct {
	Contract     *MasternodeRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// MasternodeRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type MasternodeRegistryV1Raw struct {
	Contract *MasternodeRegistryV1 // Generic contract binding to access the raw methods on
}

// MasternodeRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MasternodeRegistryV1CallerRaw struct {
	Contract *MasternodeRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// MasternodeRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MasternodeRegistryV1TransactorRaw struct {
	Contract *MasternodeRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMasternodeRegistryV1 creates a new instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1(address common.Address, backend bind.ContractBackend) (*MasternodeRegistryV1, error) {
	contract, err := bindMasternodeRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1{MasternodeRegistryV1Caller: MasternodeRegistryV1Caller{contract: contract}, MasternodeRegistryV1Transactor: MasternodeRegistryV1Transactor{contract: contract}, MasternodeRegistryV1Filterer: MasternodeRegistryV1Filterer{contract: contract}}, nil
}

// NewMasternodeRegistryV1Caller creates a new read-only instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*MasternodeRegistryV1Caller, error) {
	contract, err := bindMasternodeRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1Caller{contract: contract}, nil
}

// NewMasternodeRegistryV1Transactor creates a new write-only instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*MasternodeRegistryV1Transactor, error) {
	contract, err := bindMasternodeRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1Transactor{contract: contract}, nil
}

// NewMasternodeRegistryV1Filterer creates a new log filterer instance of MasternodeRegistryV1, bound to a specific deployed contract.
func NewMasternodeRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*MasternodeRegistryV1Filterer, error) {
	contract, err := bindMasternodeRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1Filterer{contract: contract}, nil
}

// bindMasternodeRegistryV1 binds a generic wrapper to an already deployed contract.
func bindMasternodeRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV1 *MasternodeRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV1.Contract.MasternodeRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV1 *MasternodeRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.MasternodeRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV1 *MasternodeRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.MasternodeRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) CleanupPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "cleanup_period")
	return *ret0, err
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.CleanupPeriod(&_MasternodeRegistryV1.CallOpts)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.CleanupPeriod(&_MasternodeRegistryV1.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Count(opts *bind.CallOpts) (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	ret := new(struct {
		Active           *big.Int
		Total            *big.Int
		ActiveCollateral *big.Int
		TotalCollateral  *big.Int
		MaxOfAllTimes    *big.Int
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "count")
	return *ret, err
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Count(&_MasternodeRegistryV1.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Count(&_MasternodeRegistryV1.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) CurrentMasternode(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "current_masternode")
	return *ret0, err
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.CurrentMasternode(&_MasternodeRegistryV1.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.CurrentMasternode(&_MasternodeRegistryV1.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint8)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) CurrentPayouts(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "current_payouts")
	return *ret0, err
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint8)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) CurrentPayouts() (uint8, error) {
	return _MasternodeRegistryV1.Contract.CurrentPayouts(&_MasternodeRegistryV1.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint8)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) CurrentPayouts() (uint8, error) {
	return _MasternodeRegistryV1.Contract.CurrentPayouts(&_MasternodeRegistryV1.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Enumerate(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "enumerate")
	return *ret0, err
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV1.Contract.Enumerate(&_MasternodeRegistryV1.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV1.Contract.Enumerate(&_MasternodeRegistryV1.CallOpts)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) GetReward(opts *bind.CallOpts, _blockNumber *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "getReward", _blockNumber)
	return *ret0, err
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.GetReward(&_MasternodeRegistryV1.CallOpts, _blockNumber)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.GetReward(&_MasternodeRegistryV1.CallOpts, _blockNumber)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Info(opts *bind.CallOpts, masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Owner          common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "info", masternode)
	return *ret, err
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Info(&_MasternodeRegistryV1.CallOpts, masternode)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.Info(&_MasternodeRegistryV1.CallOpts, masternode)
}

// IsValid is a free data retrieval call binding the contract method 0x8b1b925f.
//
// Solidity: function isValid(address masternode) constant returns(bool)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) IsValid(opts *bind.CallOpts, masternode common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "isValid", masternode)
	return *ret0, err
}

// IsValid is a free data retrieval call binding the contract method 0x8b1b925f.
//
// Solidity: function isValid(address masternode) constant returns(bool)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) IsValid(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV1.Contract.IsValid(&_MasternodeRegistryV1.CallOpts, masternode)
}

// IsValid is a free data retrieval call binding the contract method 0x8b1b925f.
//
// Solidity: function isValid(address masternode) constant returns(bool)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) IsValid(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV1.Contract.IsValid(&_MasternodeRegistryV1.CallOpts, masternode)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint32)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnActive(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_active")
	return *ret0, err
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint32)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnActive() (uint32, error) {
	return _MasternodeRegistryV1.Contract.MnActive(&_MasternodeRegistryV1.CallOpts)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint32)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnActive() (uint32, error) {
	return _MasternodeRegistryV1.Contract.MnActive(&_MasternodeRegistryV1.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnActiveCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_active_collateral")
	return *ret0, err
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnActiveCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnActiveCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint32)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnAnnounced(opts *bind.CallOpts) (uint32, error) {
	var (
		ret0 = new(uint32)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_announced")
	return *ret0, err
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint32)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnAnnounced() (uint32, error) {
	return _MasternodeRegistryV1.Contract.MnAnnounced(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint32)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnAnnounced() (uint32, error) {
	return _MasternodeRegistryV1.Contract.MnAnnounced(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnAnnouncedCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_announced_collateral")
	return *ret0, err
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnEverCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_ever_collateral")
	return *ret0, err
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnEverCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.MnEverCollateral(&_MasternodeRegistryV1.CallOpts)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint64 last_heartbeat, uint32 validations, uint32 votes, uint64 inactive_since, uint8 seq_payouts)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) MnStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	SwFeatures    *big.Int
	LastHeartbeat uint64
	Validations   uint32
	Votes         uint32
	InactiveSince uint64
	SeqPayouts    uint8
}, error) {
	ret := new(struct {
		SwFeatures    *big.Int
		LastHeartbeat uint64
		Validations   uint32
		Votes         uint32
		InactiveSince uint64
		SeqPayouts    uint8
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "mn_status", arg0)
	return *ret, err
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint64 last_heartbeat, uint32 validations, uint32 votes, uint64 inactive_since, uint8 seq_payouts)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) MnStatus(arg0 common.Address) (struct {
	SwFeatures    *big.Int
	LastHeartbeat uint64
	Validations   uint32
	Votes         uint32
	InactiveSince uint64
	SeqPayouts    uint8
}, error) {
	return _MasternodeRegistryV1.Contract.MnStatus(&_MasternodeRegistryV1.CallOpts, arg0)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint64 last_heartbeat, uint32 validations, uint32 votes, uint64 inactive_since, uint8 seq_payouts)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) MnStatus(arg0 common.Address) (struct {
	SwFeatures    *big.Int
	LastHeartbeat uint64
	Validations   uint32
	Votes         uint32
	InactiveSince uint64
	SeqPayouts    uint8
}, error) {
	return _MasternodeRegistryV1.Contract.MnStatus(&_MasternodeRegistryV1.CallOpts, arg0)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) OwnerInfo(opts *bind.CallOpts, owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Masternode     common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV1.contract.Call(opts, out, "ownerInfo", owner)
	return *ret, err
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.OwnerInfo(&_MasternodeRegistryV1.CallOpts, owner)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV1.Contract.OwnerInfo(&_MasternodeRegistryV1.CallOpts, owner)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Proxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.Proxy(&_MasternodeRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.Proxy(&_MasternodeRegistryV1.CallOpts)
}

// RequireVotingFrom is a free data retrieval call binding the contract method 0x483eaf3d.
//
// Solidity: function require_voting_from() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) RequireVotingFrom(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "require_voting_from")
	return *ret0, err
}

// RequireVotingFrom is a free data retrieval call binding the contract method 0x483eaf3d.
//
// Solidity: function require_voting_from() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) RequireVotingFrom() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.RequireVotingFrom(&_MasternodeRegistryV1.CallOpts)
}

// RequireVotingFrom is a free data retrieval call binding the contract method 0x483eaf3d.
//
// Solidity: function require_voting_from() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) RequireVotingFrom() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.RequireVotingFrom(&_MasternodeRegistryV1.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) TokenProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "token_proxy")
	return *ret0, err
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TokenProxy(&_MasternodeRegistryV1.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TokenProxy(&_MasternodeRegistryV1.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) TreasuryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "treasury_proxy")
	return *ret0, err
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TreasuryProxy(&_MasternodeRegistryV1.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.TreasuryProxy(&_MasternodeRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) V1storage() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.V1storage(&_MasternodeRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _MasternodeRegistryV1.Contract.V1storage(&_MasternodeRegistryV1.CallOpts)
}

// VotesMax is a free data retrieval call binding the contract method 0xff235fa3.
//
// Solidity: function votes_max() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) VotesMax(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "votes_max")
	return *ret0, err
}

// VotesMax is a free data retrieval call binding the contract method 0xff235fa3.
//
// Solidity: function votes_max() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) VotesMax() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.VotesMax(&_MasternodeRegistryV1.CallOpts)
}

// VotesMax is a free data retrieval call binding the contract method 0xff235fa3.
//
// Solidity: function votes_max() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) VotesMax() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.VotesMax(&_MasternodeRegistryV1.CallOpts)
}

// VotesPerCycle is a free data retrieval call binding the contract method 0xd9b050ec.
//
// Solidity: function votes_per_cycle() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Caller) VotesPerCycle(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV1.contract.Call(opts, out, "votes_per_cycle")
	return *ret0, err
}

// VotesPerCycle is a free data retrieval call binding the contract method 0xd9b050ec.
//
// Solidity: function votes_per_cycle() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) VotesPerCycle() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.VotesPerCycle(&_MasternodeRegistryV1.CallOpts)
}

// VotesPerCycle is a free data retrieval call binding the contract method 0xd9b050ec.
//
// Solidity: function votes_per_cycle() constant returns(uint256)
func (_MasternodeRegistryV1 *MasternodeRegistryV1CallerSession) VotesPerCycle() (*big.Int, error) {
	return _MasternodeRegistryV1.Contract.VotesPerCycle(&_MasternodeRegistryV1.CallOpts)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Announce(opts *bind.TransactOpts, masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "announce", masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Announce(&_MasternodeRegistryV1.TransactOpts, masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Announce(&_MasternodeRegistryV1.TransactOpts, masternode, ipv4address, enode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Denounce(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "denounce", masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Denounce(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Denounce(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Destroy(&_MasternodeRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Destroy(&_MasternodeRegistryV1.TransactOpts, _newImpl)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Heartbeat(opts *bind.TransactOpts, block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "heartbeat", block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Heartbeat(&_MasternodeRegistryV1.TransactOpts, block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Heartbeat(&_MasternodeRegistryV1.TransactOpts, block_number, block_hash, sw_features)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Migrate(&_MasternodeRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Migrate(&_MasternodeRegistryV1.TransactOpts, _oldImpl)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) OnCollateralUpdate(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "onCollateralUpdate", owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.OnCollateralUpdate(&_MasternodeRegistryV1.TransactOpts, owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.OnCollateralUpdate(&_MasternodeRegistryV1.TransactOpts, owner)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Reward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "reward")
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Reward(&_MasternodeRegistryV1.TransactOpts)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Reward(&_MasternodeRegistryV1.TransactOpts)
}

// Validate is a paid mutator transaction binding the contract method 0x207c64fb.
//
// Solidity: function validate(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Transactor) Validate(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.contract.Transact(opts, "validate", masternode)
}

// Validate is a paid mutator transaction binding the contract method 0x207c64fb.
//
// Solidity: function validate(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1Session) Validate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Validate(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// Validate is a paid mutator transaction binding the contract method 0x207c64fb.
//
// Solidity: function validate(address masternode) returns()
func (_MasternodeRegistryV1 *MasternodeRegistryV1TransactorSession) Validate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV1.Contract.Validate(&_MasternodeRegistryV1.TransactOpts, masternode)
}

// MasternodeRegistryV1AnnouncedIterator is returned from FilterAnnounced and is used to iterate over the raw logs and unpacked data for Announced events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1AnnouncedIterator struct {
	Event *MasternodeRegistryV1Announced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1AnnouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Announced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Announced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1AnnouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1AnnouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Announced represents a Announced event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Announced struct {
	Masternode  common.Address
	Owner       common.Address
	Ipv4address uint32
	Enode       [2][32]byte
	Collateral  *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAnnounced is a free log retrieval operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterAnnounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV1AnnouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1AnnouncedIterator{contract: _MasternodeRegistryV1.contract, event: "Announced", logs: logs, sub: sub}, nil
}

// WatchAnnounced is a free log subscription operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchAnnounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Announced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Announced)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Announced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1DeactivatedIterator is returned from FilterDeactivated and is used to iterate over the raw logs and unpacked data for Deactivated events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1DeactivatedIterator struct {
	Event *MasternodeRegistryV1Deactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1DeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Deactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Deactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1DeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1DeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Deactivated represents a Deactivated event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Deactivated struct {
	Masternode common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDeactivated is a free log retrieval operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterDeactivated(opts *bind.FilterOpts) (*MasternodeRegistryV1DeactivatedIterator, error) {

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Deactivated")
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1DeactivatedIterator{contract: _MasternodeRegistryV1.contract, event: "Deactivated", logs: logs, sub: sub}, nil
}

// WatchDeactivated is a free log subscription operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchDeactivated(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Deactivated) (event.Subscription, error) {

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Deactivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Deactivated)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Deactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1DenouncedIterator is returned from FilterDenounced and is used to iterate over the raw logs and unpacked data for Denounced events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1DenouncedIterator struct {
	Event *MasternodeRegistryV1Denounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1DenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Denounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Denounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1DenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1DenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Denounced represents a Denounced event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Denounced struct {
	Masternode common.Address
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDenounced is a free log retrieval operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterDenounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV1DenouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1DenouncedIterator{contract: _MasternodeRegistryV1.contract, event: "Denounced", logs: logs, sub: sub}, nil
}

// WatchDenounced is a free log subscription operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchDenounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Denounced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Denounced)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Denounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1HeartbeatIterator is returned from FilterHeartbeat and is used to iterate over the raw logs and unpacked data for Heartbeat events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1HeartbeatIterator struct {
	Event *MasternodeRegistryV1Heartbeat // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1HeartbeatIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Heartbeat)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Heartbeat)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1HeartbeatIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1HeartbeatIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Heartbeat represents a Heartbeat event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Heartbeat struct {
	Masternode common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterHeartbeat is a free log retrieval operation binding the contract event 0x76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a64.
//
// Solidity: event Heartbeat(address indexed masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterHeartbeat(opts *bind.FilterOpts, masternode []common.Address) (*MasternodeRegistryV1HeartbeatIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Heartbeat", masternodeRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1HeartbeatIterator{contract: _MasternodeRegistryV1.contract, event: "Heartbeat", logs: logs, sub: sub}, nil
}

// WatchHeartbeat is a free log subscription operation binding the contract event 0x76fd25e9b1ccb2a2eb85da234dd15c82d9eec18877d3e6fc916eb7330fe04a64.
//
// Solidity: event Heartbeat(address indexed masternode)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchHeartbeat(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Heartbeat, masternode []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Heartbeat", masternodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Heartbeat)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Heartbeat", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV1ValidationIterator is returned from FilterValidation and is used to iterate over the raw logs and unpacked data for Validation events raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1ValidationIterator struct {
	Event *MasternodeRegistryV1Validation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV1ValidationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV1Validation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV1Validation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV1ValidationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV1ValidationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV1Validation represents a Validation event raised by the MasternodeRegistryV1 contract.
type MasternodeRegistryV1Validation struct {
	Masternode common.Address
	Validator  common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterValidation is a free log retrieval operation binding the contract event 0xecf3d22a6c5bee8410ef008f28f974ab2b99754941406d83f2e79834bab78b6d.
//
// Solidity: event Validation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) FilterValidation(opts *bind.FilterOpts, masternode []common.Address, validator []common.Address) (*MasternodeRegistryV1ValidationIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.FilterLogs(opts, "Validation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV1ValidationIterator{contract: _MasternodeRegistryV1.contract, event: "Validation", logs: logs, sub: sub}, nil
}

// WatchValidation is a free log subscription operation binding the contract event 0xecf3d22a6c5bee8410ef008f28f974ab2b99754941406d83f2e79834bab78b6d.
//
// Solidity: event Validation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV1 *MasternodeRegistryV1Filterer) WatchValidation(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV1Validation, masternode []common.Address, validator []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV1.contract.WatchLogs(opts, "Validation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV1Validation)
				if err := _MasternodeRegistryV1.contract.UnpackLog(event, "Validation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
