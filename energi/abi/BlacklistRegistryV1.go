// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BlacklistRegistryV1ABI is the input ABI used to generate the binding from.
const BlacklistRegistryV1ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"revokeProposal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"enforce\",\"type\":\"address\"},{\"name\":\"revoke\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateBlocked\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateAll\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compensation_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"item_id\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"bytes20\"}],\"name\":\"collectMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_mnregistry_proxy\",\"type\":\"address\"},{\"name\":\"_migration\",\"type\":\"address\"},{\"name\":\"_compensatin_fund\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"BlacklistProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"WhitelistProposal\",\"type\":\"event\"}]"

// BlacklistRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const BlacklistRegistryV1Bin = `60806040523480156200001157600080fd5b506040516200422438038062004224833981810160405260808110156200003757600080fd5b5080516020820151604080840151606090940151600080546001600160a01b0319166001600160a01b0386161790559051929391926200007790620000e7565b604051809103906000f08015801562000094573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b0393841617909155600380548216958316959095179094556004805485169382169390931790925560058054909316911617905550620000f5565b61099c806200388883390190565b61378380620001056000396000f3fe608060405260043610620000fd5760003560e01c80635603125c1162000097578063f44411521162000061578063f44411521462000408578063fe575a871462000420578063fe7334e81462000478578063fed01c30146200049057620000fd565b80635603125c146200032a578063bc393afb1462000394578063ce5494bb14620003ac578063ec55688914620003f057620000fd565b80631705a3bd11620000d95780631705a3bd146200024d5780632a7736ad14620002655780632d059305146200029b5780633341b44514620002b357620000fd565b8062f55d9d14620001645780630126795114620001aa57806306ec16f81462000209575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156200017157600080fd5b50620001a8600480360360208110156200018a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620004e6565b005b620001e060048036036020811015620001c257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000591565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156200021657600080fd5b50620001a8600480360360208110156200022f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000dc9565b3480156200025a57600080fd5b50620001e06200155c565b620001e0600480360360208110156200027d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001578565b348015620002a857600080fd5b50620001e062001d0d565b348015620002c057600080fd5b50620002f760048036036020811015620002d957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001d29565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815291909216602082015281519081900390910190f35b3480156200033757600080fd5b506200034262001dde565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200038057818101518382015260200162000366565b505050509050019250505060405180910390f35b348015620003a157600080fd5b506200034262001fa0565b348015620003b957600080fd5b50620001a860048036036020811015620003d257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620020c0565b348015620003fd57600080fd5b50620001e062002150565b3480156200041557600080fd5b50620001e06200216c565b3480156200042d57600080fd5b5062000464600480360360208110156200044657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002188565b604080519115158252519081900360200190f35b3480156200048557600080fd5b50620001e0620023a0565b3480156200049d57600080fd5b50620001a860048036036040811015620004b657600080fd5b50803590602001357fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016620023bc565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200056d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b620005788162002567565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60006001546000146200060557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805534683635c9adc5dea00000146200068157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916000918291849163323ab40991602480820192606092909190829003018186803b158015620006fd57600080fd5b505afa15801562000712573d6000803e3d6000fd5b505050506040513d60608110156200072957600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff82161562000c005773ffffffffffffffffffffffffffffffffffffffff81161562000a37578073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620007b857600080fd5b505afa158015620007cd573d6000803e3d6000fd5b505050506040513d6020811015620007e457600080fd5b5051156200094f578173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200083557600080fd5b505af11580156200084a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200089757600080fd5b505af1158015620008ac573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200093057600080fd5b505af115801562000945573d6000803e3d6000fd5b5050505062000a31565b8073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200099657600080fd5b505afa158015620009ab573d6000803e3d6000fd5b505050506040513d6020811015620009c257600080fd5b50511562000a3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202831290000000000000000000000000000604482015290519081900360640190fd5b62000c00565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a7e57600080fd5b505afa15801562000a93573d6000803e3d6000fd5b505050506040513d602081101562000aaa57600080fd5b5051801562000b2b57508173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000afb57600080fd5b505afa15801562000b10573d6000803e3d6000fd5b505050506040513d602081101562000b2757600080fd5b5051155b1562000b99578173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000b7a57600080fd5b505af115801562000b8f573d6000803e3d6000fd5b5050505062000c00565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202832290000000000000000000000000000604482015290519081900360640190fd5b60035460009073ffffffffffffffffffffffffffffffffffffffff1662000c26620025f8565b60405162000c34906200262a565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f08015801562000c75573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b15801562000cc157600080fd5b505af115801562000cd6573d6000803e3d6000fd5b5050604080517fac31d62200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b8116600483015286811660248301529151918916945063ac31d6229350604480820193506000929182900301818387803b15801562000d5357600080fd5b505af115801562000d68573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918a1693507fea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557925081900360200190a250506000600155509092915050565b6001541562000e3957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916000918291849163323ab40991602480820192606092909190829003018186803b15801562000eb957600080fd5b505afa15801562000ece573d6000803e3d6000fd5b505050506040513d606081101562000ee557600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff821662000f7657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028312900000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fbd57600080fd5b505afa15801562000fd2573d6000803e3d6000fd5b505050506040513d602081101562000fe957600080fd5b50516200105757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028322900000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200109e57600080fd5b505afa158015620010b3573d6000803e3d6000fd5b505050506040513d6020811015620010ca57600080fd5b5051620011d5578173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200111a57600080fd5b505af11580156200112f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166329092d0e856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015620011b357600080fd5b505af1158015620011c8573d6000803e3d6000fd5b5050505050505062001554565b73ffffffffffffffffffffffffffffffffffffffff81166200125857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028332900000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200129f57600080fd5b505afa158015620012b4573d6000803e3d6000fd5b505050506040513d6020811015620012cb57600080fd5b50516200133957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028342900000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200138057600080fd5b505afa15801562001395573d6000803e3d6000fd5b505050506040513d6020811015620013ac57600080fd5b5051156200145f578173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620013fd57600080fd5b505af115801562001412573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200111a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620014a857600080fd5b505af1158015620014bd573d6000803e3d6000fd5b5050604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152600060248301819052925190881694506345507a9e93506044808301939282900301818387803b1580156200153757600080fd5b505af11580156200154c573d6000803e3d6000fd5b505050505050505b506000600155565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154600014620015ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180553468056bc75e2d63100000146200166857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916000918291849163323ab40991602480820192606092909190829003018186803b158015620016e457600080fd5b505afa158015620016f9573d6000803e3d6000fd5b505050506040513d60608110156200171057600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff8216620017a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283129000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81161562001982578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200180557600080fd5b505afa1580156200181a573d6000803e3d6000fd5b505050506040513d60208110156200183157600080fd5b50516200189f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f416c726561647920616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620018e657600080fd5b505afa158015620018fb573d6000803e3d6000fd5b505050506040513d60208110156200191257600080fd5b50516200197c578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200196257600080fd5b505af115801562001977573d6000803e3d6000fd5b505050505b62001b44565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015620019c957600080fd5b505afa158015620019de573d6000803e3d6000fd5b505050506040513d6020811015620019f557600080fd5b505162001a6357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206170706c696361626c65000000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001aaa57600080fd5b505afa15801562001abf573d6000803e3d6000fd5b505050506040513d602081101562001ad657600080fd5b505162001b4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283229000000000000000000000000000000000000000000604482015290519081900360640190fd5b60035460009073ffffffffffffffffffffffffffffffffffffffff1662001b6a620025f8565b60405162001b78906200262a565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f08015801562001bb9573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b15801562001c0557600080fd5b505af115801562001c1a573d6000803e3d6000fd5b5050604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528681166024830152915191891694506345507a9e9350604480820193506000929182900301818387803b15801562001c9757600080fd5b505af115801562001cac573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918a1693507f2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff925081900360200190a250506000600155509092915050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291516000938493169163323ab409916024808301926060929190829003018186803b15801562001d9f57600080fd5b505afa15801562001db4573d6000803e3d6000fd5b505050506040513d606081101562001dcb57600080fd5b5080516020909101519094909350915050565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b15801562001e4a57600080fd5b505afa15801562001e5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101562001ea757600080fd5b81019080805164010000000081111562001ec057600080fd5b8201602081018481111562001ed457600080fd5b815185602082028301116401000000008211171562001ef257600080fd5b50508051909450925050505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101901562001f9c5762001f4782828151811062001f3957fe5b602002602001015162002188565b62001f9657600082828151811062001f5b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b62001efe565b5090565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b1580156200200c57600080fd5b505afa15801562002021573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200206957600080fd5b8101908080516401000000008111156200208257600080fd5b820160208101848111156200209657600080fd5b8151856020820283011164010000000082111715620020b457600080fd5b50909450505050505b90565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200214757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6200214d815b50565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093929092169183918291849163323ab409916024808301926060929190829003018186803b1580156200220557600080fd5b505afa1580156200221a573d6000803e3d6000fd5b505050506040513d60608110156200223157600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff811615801590620022d657508073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620022a757600080fd5b505afa158015620022bc573d6000803e3d6000fd5b505050506040513d6020811015620022d357600080fd5b50515b15620022e957600093505050506200239b565b73ffffffffffffffffffffffffffffffffffffffff8216158015906200238057508173ffffffffffffffffffffffffffffffffffffffff16632173a8f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200235157600080fd5b505afa15801562002366573d6000803e3d6000fd5b505050506040513d60208110156200237d57600080fd5b50515b156200239357600193505050506200239b565b600093505050505b919050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600154156200242c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556200243f606082901c62002188565b620024ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420626c61636b6c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517fa723b35a0000000000000000000000000000000000000000000000000000000081529283018590527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000841660248401525173ffffffffffffffffffffffffffffffffffffffff9091169163a723b35a91604480830192600092919082900301818387803b1580156200254557600080fd5b505af11580156200255a573d6000803e3d6000fd5b5050600060015550505050565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015620025dc57600080fd5b505af1158015620025f1573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633141562002622575032620020bd565b5033620020bd565b61111680620026398339019056fe608060405234801561001057600080fd5b506040516111163803806111168339818101604052604081101561003357600080fd5b50805160209182015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b03808616918217835562093a8042810160035560048054909516918616919091178455604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051969795968896600a9693958995909485949193638abf60779383830193909290829003018186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d602081101561010c57600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561016957600080fd5b505afa15801561017d573d6000803e3d6000fd5b505050506040513d60a081101561019357600080fd5b50604081015160809091015190925090508061021057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029057fe5b606460ff8616111561029e57fe5b6008829055606460ff8616830204600955603360ff8616106102c557600954600a556102d0565b60646033830204600a555b6000600954116102dc57fe5b6000600a54116102e857fe5b5050505050505050610e17806102ff6000396000f3fe60806040526004361061016a5760003560e01c80637639b1eb116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103ba578063e5225381146103cf578063fe7334e8146103e45761016a565b8063aec2ccae14610350578063c2472ef814610390578063c40a70f8146103a55761016a565b806383197ef0116100b057806383197ef01461031157806391840a6b14610326578063990a663b1461033b5761016a565b80637639b1eb146102e75780637b352962146102fc5761016a565b80633d1db3e91161012257806356c2a0a11161010757806356c2a0a11461027f57806360f96a8f1461029457806375df0f99146102d25761016a565b80633d1db3e9146102555780635051a5ec1461026a5761016a565b806329dcb0cf1161015357806329dcb0cf146102215780632ded3227146102365780633ccfd60b146102405761016a565b80630b62be45146101d15780632173a8f9146101f8575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101dd57600080fd5b506101e66103f9565b60408051918252519081900360200190f35b34801561020457600080fd5b5061020d6103ff565b604080519115158252519081900360200190f35b34801561022d57600080fd5b506101e6610451565b61023e610457565b005b34801561024c57600080fd5b5061023e6104e7565b34801561026157600080fd5b506101e66105a4565b34801561027657600080fd5b5061020d6105aa565b34801561028b57600080fd5b5061023e6105f6565b3480156102a057600080fd5b506102a9610609565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102de57600080fd5b506101e6610625565b3480156102f357600080fd5b506101e661062b565b34801561030857600080fd5b5061020d610631565b34801561031d57600080fd5b5061023e61065b565b34801561033257600080fd5b506101e66106fc565b34801561034757600080fd5b506101e6610702565b34801561035c57600080fd5b5061020d6004803603602081101561037357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610708565b34801561039c57600080fd5b5061023e61071d565b3480156103b157600080fd5b506102a9610730565b3480156103c657600080fd5b506101e661074c565b3480156103db57600080fd5b5061023e610752565b3480156103f057600080fd5b506102a9610aa7565b60025481565b60006104096105aa565b156104165750600161044e565b6006546007546002810282118015610437575069152d02c7e14af680000082115b156104475760019250505061044e565b6000925050505b90565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104ef6105aa565b61055a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f193505050501580156105a1573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105bf5750600161044e565b6105c7610631565b6105d35750600061044e565b6009546007546006540110156105eb5750600061044e565b506007546006541190565b6105fe610ac3565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106485750600a5460065410155b806106565750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b60085481565b60055481565b600b6020526000908152604090205460ff1681565b610725610ac3565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61075a610631565b801561076b57506107696105aa565b155b6107d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461085c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c557600080fd5b505afa1580156108d9573d6000803e3d6000fd5b505050506040513d60208110156108ef57600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d602081101561098757600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f157600080fd5b505afa158015610a05573d6000803e3d6000fd5b505050506040513d6020811015610a1b57600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9e57600080fd5b505afa158015610bb2573d6000803e3d6000fd5b505050506040513d6020811015610bc857600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c7a57600080fd5b50608081015160a09091015160025491955091508110610cfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a72305820721253237c0394b22330a4528569cdf63cb4d77b78d7e02264c67db0f3e061ef64736f6c63430005090032a265627a7a7230582034a601545b93f3952c7c0a9ff15010fd2a72b275a9bd6c0b8668d4a78178eb2c64736f6c634300050900326080604052600080546001600160a01b03191633179055610977806100256000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806345507a9e1161005b57806345507a9e146101675780639aa5b6c4146101a2578063ac31d622146101e8578063da0321cd1461022357610088565b806313af40351461008d57806329092d0e146100c2578063323ab409146100f557806341c0e1b51461015f575b600080fd5b6100c0600480360360208110156100a357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661027b565b005b6100c0600480360360208110156100d857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610348565b6101286004803603602081101561010b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610554565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529290931660208301528183015290519081900360600190f35b6100c0610591565b6100c06004803603604081101561017d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661061a565b6101bf600480360360208110156101b857600080fd5b503561071a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100c0600480360360408110156101fe57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602001351661074e565b61022b61088e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561026757818101518382015260200161024f565b505050509050019250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff16331461030157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ce57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808216600090815260016020526040902080549091166103ff57fe5b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061042f57fe5b600091825260209091200154600282810154815473ffffffffffffffffffffffffffffffffffffffff90931692811061046457fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060028054806104b757fe5b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155930190935573ffffffffffffffffffffffffffffffffffffffff94909416845260019182905260408420805482168155918201805490911690556002019190915550565b600160208190526000918252604090912080549181015460029091015473ffffffffffffffffffffffffffffffffffffffff928316929091169083565b60005473ffffffffffffffffffffffffffffffffffffffff16331461061757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b33ff5b60005473ffffffffffffffffffffffffffffffffffffffff1633146106a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020526040902080549091166106d157fe5b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b6002818154811061072757fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107d457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020526040902080549091161561080657fe5b805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216178255600280549281018390556001830181556000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054939092169216919091179055565b600254604080518281526020808402820101909152606091908180156108be578160200160208202803883390190505b50915060005b8181101561093d57600281815481106108d957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683828151811061091057fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016108c4565b50509056fea265627a7a723058209a2b2c2634322e555a561b44354688db1d66a0ab61781fecf905139a7a67a46964736f6c63430005090032`

// DeployBlacklistRegistryV1 deploys a new Ethereum contract, binding an instance of BlacklistRegistryV1 to it.
func DeployBlacklistRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address, _migration common.Address, _compensatin_fund common.Address) (common.Address, *types.Transaction, *BlacklistRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(BlacklistRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BlacklistRegistryV1Bin), backend, _proxy, _mnregistry_proxy, _migration, _compensatin_fund)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlacklistRegistryV1{BlacklistRegistryV1Caller: BlacklistRegistryV1Caller{contract: contract}, BlacklistRegistryV1Transactor: BlacklistRegistryV1Transactor{contract: contract}, BlacklistRegistryV1Filterer: BlacklistRegistryV1Filterer{contract: contract}}, nil
}

// BlacklistRegistryV1Bin is the compiled bytecode of contract after deployment.
const BlacklistRegistryV1RuntimeBin = `608060405260043610620000fd5760003560e01c80635603125c1162000097578063f44411521162000061578063f44411521462000408578063fe575a871462000420578063fe7334e81462000478578063fed01c30146200049057620000fd565b80635603125c146200032a578063bc393afb1462000394578063ce5494bb14620003ac578063ec55688914620003f057620000fd565b80631705a3bd11620000d95780631705a3bd146200024d5780632a7736ad14620002655780632d059305146200029b5780633341b44514620002b357620000fd565b8062f55d9d14620001645780630126795114620001aa57806306ec16f81462000209575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156200017157600080fd5b50620001a8600480360360208110156200018a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620004e6565b005b620001e060048036036020811015620001c257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000591565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156200021657600080fd5b50620001a8600480360360208110156200022f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000dc9565b3480156200025a57600080fd5b50620001e06200155c565b620001e0600480360360208110156200027d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001578565b348015620002a857600080fd5b50620001e062001d0d565b348015620002c057600080fd5b50620002f760048036036020811015620002d957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001d29565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815291909216602082015281519081900390910190f35b3480156200033757600080fd5b506200034262001dde565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156200038057818101518382015260200162000366565b505050509050019250505060405180910390f35b348015620003a157600080fd5b506200034262001fa0565b348015620003b957600080fd5b50620001a860048036036020811015620003d257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620020c0565b348015620003fd57600080fd5b50620001e062002150565b3480156200041557600080fd5b50620001e06200216c565b3480156200042d57600080fd5b5062000464600480360360208110156200044657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002188565b604080519115158252519081900360200190f35b3480156200048557600080fd5b50620001e0620023a0565b3480156200049d57600080fd5b50620001a860048036036040811015620004b657600080fd5b50803590602001357fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016620023bc565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200056d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b620005788162002567565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60006001546000146200060557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805534683635c9adc5dea00000146200068157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916000918291849163323ab40991602480820192606092909190829003018186803b158015620006fd57600080fd5b505afa15801562000712573d6000803e3d6000fd5b505050506040513d60608110156200072957600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff82161562000c005773ffffffffffffffffffffffffffffffffffffffff81161562000a37578073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620007b857600080fd5b505afa158015620007cd573d6000803e3d6000fd5b505050506040513d6020811015620007e457600080fd5b5051156200094f578173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200083557600080fd5b505af11580156200084a573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200089757600080fd5b505af1158015620008ac573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200093057600080fd5b505af115801562000945573d6000803e3d6000fd5b5050505062000a31565b8073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200099657600080fd5b505afa158015620009ab573d6000803e3d6000fd5b505050506040513d6020811015620009c257600080fd5b50511562000a3157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202831290000000000000000000000000000604482015290519081900360640190fd5b62000c00565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000a7e57600080fd5b505afa15801562000a93573d6000803e3d6000fd5b505050506040513d602081101562000aaa57600080fd5b5051801562000b2b57508173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000afb57600080fd5b505afa15801562000b10573d6000803e3d6000fd5b505050506040513d602081101562000b2757600080fd5b5051155b1562000b99578173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000b7a57600080fd5b505af115801562000b8f573d6000803e3d6000fd5b5050505062000c00565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202832290000000000000000000000000000604482015290519081900360640190fd5b60035460009073ffffffffffffffffffffffffffffffffffffffff1662000c26620025f8565b60405162000c34906200262a565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f08015801562000c75573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b15801562000cc157600080fd5b505af115801562000cd6573d6000803e3d6000fd5b5050604080517fac31d62200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b8116600483015286811660248301529151918916945063ac31d6229350604480820193506000929182900301818387803b15801562000d5357600080fd5b505af115801562000d68573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918a1693507fea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557925081900360200190a250506000600155509092915050565b6001541562000e3957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916000918291849163323ab40991602480820192606092909190829003018186803b15801562000eb957600080fd5b505afa15801562000ece573d6000803e3d6000fd5b505050506040513d606081101562000ee557600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff821662000f7657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028312900000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000fbd57600080fd5b505afa15801562000fd2573d6000803e3d6000fd5b505050506040513d602081101562000fe957600080fd5b50516200105757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028322900000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200109e57600080fd5b505afa158015620010b3573d6000803e3d6000fd5b505050506040513d6020811015620010ca57600080fd5b5051620011d5578173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200111a57600080fd5b505af11580156200112f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166329092d0e856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015620011b357600080fd5b505af1158015620011c8573d6000803e3d6000fd5b5050505050505062001554565b73ffffffffffffffffffffffffffffffffffffffff81166200125857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028332900000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200129f57600080fd5b505afa158015620012b4573d6000803e3d6000fd5b505050506040513d6020811015620012cb57600080fd5b50516200133957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7468696e6720746f20636f6c6c6563742028342900000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200138057600080fd5b505afa15801562001395573d6000803e3d6000fd5b505050506040513d6020811015620013ac57600080fd5b5051156200145f578173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620013fd57600080fd5b505af115801562001412573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200111a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620014a857600080fd5b505af1158015620014bd573d6000803e3d6000fd5b5050604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152600060248301819052925190881694506345507a9e93506044808301939282900301818387803b1580156200153757600080fd5b505af11580156200154c573d6000803e3d6000fd5b505050505050505b506000600155565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154600014620015ec57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180553468056bc75e2d63100000146200166857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916000918291849163323ab40991602480820192606092909190829003018186803b158015620016e457600080fd5b505afa158015620016f9573d6000803e3d6000fd5b505050506040513d60608110156200171057600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff8216620017a157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283129000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81161562001982578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200180557600080fd5b505afa1580156200181a573d6000803e3d6000fd5b505050506040513d60208110156200183157600080fd5b50516200189f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f416c726561647920616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620018e657600080fd5b505afa158015620018fb573d6000803e3d6000fd5b505050506040513d60208110156200191257600080fd5b50516200197c578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200196257600080fd5b505af115801562001977573d6000803e3d6000fd5b505050505b62001b44565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015620019c957600080fd5b505afa158015620019de573d6000803e3d6000fd5b505050506040513d6020811015620019f557600080fd5b505162001a6357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206170706c696361626c65000000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001aaa57600080fd5b505afa15801562001abf573d6000803e3d6000fd5b505050506040513d602081101562001ad657600080fd5b505162001b4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283229000000000000000000000000000000000000000000604482015290519081900360640190fd5b60035460009073ffffffffffffffffffffffffffffffffffffffff1662001b6a620025f8565b60405162001b78906200262a565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f08015801562001bb9573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b15801562001c0557600080fd5b505af115801562001c1a573d6000803e3d6000fd5b5050604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528681166024830152915191891694506345507a9e9350604480820193506000929182900301818387803b15801562001c9757600080fd5b505af115801562001cac573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918a1693507f2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff925081900360200190a250506000600155509092915050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291516000938493169163323ab409916024808301926060929190829003018186803b15801562001d9f57600080fd5b505afa15801562001db4573d6000803e3d6000fd5b505050506040513d606081101562001dcb57600080fd5b5080516020909101519094909350915050565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b15801562001e4a57600080fd5b505afa15801562001e5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101562001ea757600080fd5b81019080805164010000000081111562001ec057600080fd5b8201602081018481111562001ed457600080fd5b815185602082028301116401000000008211171562001ef257600080fd5b50508051909450925050505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101901562001f9c5762001f4782828151811062001f3957fe5b602002602001015162002188565b62001f9657600082828151811062001f5b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b62001efe565b5090565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b1580156200200c57600080fd5b505afa15801562002021573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200206957600080fd5b8101908080516401000000008111156200208257600080fd5b820160208101848111156200209657600080fd5b8151856020820283011164010000000082111715620020b457600080fd5b50909450505050505b90565b60005473ffffffffffffffffffffffffffffffffffffffff1633146200214757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6200214d815b50565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093929092169183918291849163323ab409916024808301926060929190829003018186803b1580156200220557600080fd5b505afa1580156200221a573d6000803e3d6000fd5b505050506040513d60608110156200223157600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff811615801590620022d657508073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620022a757600080fd5b505afa158015620022bc573d6000803e3d6000fd5b505050506040513d6020811015620022d357600080fd5b50515b15620022e957600093505050506200239b565b73ffffffffffffffffffffffffffffffffffffffff8216158015906200238057508173ffffffffffffffffffffffffffffffffffffffff16632173a8f96040518163ffffffff1660e01b815260040160206040518083038186803b1580156200235157600080fd5b505afa15801562002366573d6000803e3d6000fd5b505050506040513d60208110156200237d57600080fd5b50515b156200239357600193505050506200239b565b600093505050505b919050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600154156200242c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556200243f606082901c62002188565b620024ab57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420626c61636b6c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517fa723b35a0000000000000000000000000000000000000000000000000000000081529283018590527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000841660248401525173ffffffffffffffffffffffffffffffffffffffff9091169163a723b35a91604480830192600092919082900301818387803b1580156200254557600080fd5b505af11580156200255a573d6000803e3d6000fd5b5050600060015550505050565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015620025dc57600080fd5b505af1158015620025f1573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff1633141562002622575032620020bd565b5033620020bd565b61111680620026398339019056fe608060405234801561001057600080fd5b506040516111163803806111168339818101604052604081101561003357600080fd5b50805160209182015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b03808616918217835562093a8042810160035560048054909516918616919091178455604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051969795968896600a9693958995909485949193638abf60779383830193909290829003018186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d602081101561010c57600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561016957600080fd5b505afa15801561017d573d6000803e3d6000fd5b505050506040513d60a081101561019357600080fd5b50604081015160809091015190925090508061021057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029057fe5b606460ff8616111561029e57fe5b6008829055606460ff8616830204600955603360ff8616106102c557600954600a556102d0565b60646033830204600a555b6000600954116102dc57fe5b6000600a54116102e857fe5b5050505050505050610e17806102ff6000396000f3fe60806040526004361061016a5760003560e01c80637639b1eb116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103ba578063e5225381146103cf578063fe7334e8146103e45761016a565b8063aec2ccae14610350578063c2472ef814610390578063c40a70f8146103a55761016a565b806383197ef0116100b057806383197ef01461031157806391840a6b14610326578063990a663b1461033b5761016a565b80637639b1eb146102e75780637b352962146102fc5761016a565b80633d1db3e91161012257806356c2a0a11161010757806356c2a0a11461027f57806360f96a8f1461029457806375df0f99146102d25761016a565b80633d1db3e9146102555780635051a5ec1461026a5761016a565b806329dcb0cf1161015357806329dcb0cf146102215780632ded3227146102365780633ccfd60b146102405761016a565b80630b62be45146101d15780632173a8f9146101f8575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101dd57600080fd5b506101e66103f9565b60408051918252519081900360200190f35b34801561020457600080fd5b5061020d6103ff565b604080519115158252519081900360200190f35b34801561022d57600080fd5b506101e6610451565b61023e610457565b005b34801561024c57600080fd5b5061023e6104e7565b34801561026157600080fd5b506101e66105a4565b34801561027657600080fd5b5061020d6105aa565b34801561028b57600080fd5b5061023e6105f6565b3480156102a057600080fd5b506102a9610609565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102de57600080fd5b506101e6610625565b3480156102f357600080fd5b506101e661062b565b34801561030857600080fd5b5061020d610631565b34801561031d57600080fd5b5061023e61065b565b34801561033257600080fd5b506101e66106fc565b34801561034757600080fd5b506101e6610702565b34801561035c57600080fd5b5061020d6004803603602081101561037357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610708565b34801561039c57600080fd5b5061023e61071d565b3480156103b157600080fd5b506102a9610730565b3480156103c657600080fd5b506101e661074c565b3480156103db57600080fd5b5061023e610752565b3480156103f057600080fd5b506102a9610aa7565b60025481565b60006104096105aa565b156104165750600161044e565b6006546007546002810282118015610437575069152d02c7e14af680000082115b156104475760019250505061044e565b6000925050505b90565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104ef6105aa565b61055a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f193505050501580156105a1573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105bf5750600161044e565b6105c7610631565b6105d35750600061044e565b6009546007546006540110156105eb5750600061044e565b506007546006541190565b6105fe610ac3565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106485750600a5460065410155b806106565750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b60085481565b60055481565b600b6020526000908152604090205460ff1681565b610725610ac3565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61075a610631565b801561076b57506107696105aa565b155b6107d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461085c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c557600080fd5b505afa1580156108d9573d6000803e3d6000fd5b505050506040513d60208110156108ef57600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d602081101561098757600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f157600080fd5b505afa158015610a05573d6000803e3d6000fd5b505050506040513d6020811015610a1b57600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9e57600080fd5b505afa158015610bb2573d6000803e3d6000fd5b505050506040513d6020811015610bc857600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c7a57600080fd5b50608081015160a09091015160025491955091508110610cfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a72305820721253237c0394b22330a4528569cdf63cb4d77b78d7e02264c67db0f3e061ef64736f6c63430005090032a265627a7a7230582034a601545b93f3952c7c0a9ff15010fd2a72b275a9bd6c0b8668d4a78178eb2c64736f6c63430005090032`

// BlacklistRegistryV1 is an auto generated Go binding around an Ethereum contract.
type BlacklistRegistryV1 struct {
	BlacklistRegistryV1Caller     // Read-only binding to the contract
	BlacklistRegistryV1Transactor // Write-only binding to the contract
	BlacklistRegistryV1Filterer   // Log filterer for contract events
}

// BlacklistRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type BlacklistRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BlacklistRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BlacklistRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BlacklistRegistryV1Session struct {
	Contract     *BlacklistRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// BlacklistRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BlacklistRegistryV1CallerSession struct {
	Contract *BlacklistRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// BlacklistRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BlacklistRegistryV1TransactorSession struct {
	Contract     *BlacklistRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// BlacklistRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type BlacklistRegistryV1Raw struct {
	Contract *BlacklistRegistryV1 // Generic contract binding to access the raw methods on
}

// BlacklistRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BlacklistRegistryV1CallerRaw struct {
	Contract *BlacklistRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// BlacklistRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BlacklistRegistryV1TransactorRaw struct {
	Contract *BlacklistRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBlacklistRegistryV1 creates a new instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1(address common.Address, backend bind.ContractBackend) (*BlacklistRegistryV1, error) {
	contract, err := bindBlacklistRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1{BlacklistRegistryV1Caller: BlacklistRegistryV1Caller{contract: contract}, BlacklistRegistryV1Transactor: BlacklistRegistryV1Transactor{contract: contract}, BlacklistRegistryV1Filterer: BlacklistRegistryV1Filterer{contract: contract}}, nil
}

// NewBlacklistRegistryV1Caller creates a new read-only instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*BlacklistRegistryV1Caller, error) {
	contract, err := bindBlacklistRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Caller{contract: contract}, nil
}

// NewBlacklistRegistryV1Transactor creates a new write-only instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*BlacklistRegistryV1Transactor, error) {
	contract, err := bindBlacklistRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Transactor{contract: contract}, nil
}

// NewBlacklistRegistryV1Filterer creates a new log filterer instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*BlacklistRegistryV1Filterer, error) {
	contract, err := bindBlacklistRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Filterer{contract: contract}, nil
}

// bindBlacklistRegistryV1 binds a generic wrapper to an already deployed contract.
func bindBlacklistRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BlacklistRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BlacklistRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) CompensationFund(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "compensation_fund")
	return *ret0, err
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) CompensationFund() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.CompensationFund(&_BlacklistRegistryV1.CallOpts)
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) CompensationFund() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.CompensationFund(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateAll(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateAll")
	return *ret0, err
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateAll() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateAll(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateAll() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateAll(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateBlocked(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateBlocked")
	return *ret0, err
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateBlocked() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateBlocked(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateBlocked() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateBlocked(&_BlacklistRegistryV1.CallOpts)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) IsBlacklisted(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "isBlacklisted", addr)
	return *ret0, err
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) IsBlacklisted(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsBlacklisted(&_BlacklistRegistryV1.CallOpts, addr)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) IsBlacklisted(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsBlacklisted(&_BlacklistRegistryV1.CallOpts, addr)
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Migration(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "migration")
	return *ret0, err
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Migration() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Migration(&_BlacklistRegistryV1.CallOpts)
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Migration() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Migration(&_BlacklistRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) MnregistryProxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.MnregistryProxy(&_BlacklistRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) MnregistryProxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.MnregistryProxy(&_BlacklistRegistryV1.CallOpts)
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Proposals(opts *bind.CallOpts, addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
}, error) {
	ret := new(struct {
		Enforce common.Address
		Revoke  common.Address
	})
	out := ret
	err := _BlacklistRegistryV1.contract.Call(opts, out, "proposals", addr)
	return *ret, err
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Proposals(addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
}, error) {
	return _BlacklistRegistryV1.Contract.Proposals(&_BlacklistRegistryV1.CallOpts, addr)
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Proposals(addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
}, error) {
	return _BlacklistRegistryV1.Contract.Proposals(&_BlacklistRegistryV1.CallOpts, addr)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Proxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Proxy(&_BlacklistRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Proxy(&_BlacklistRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) V1storage() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.V1storage(&_BlacklistRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.V1storage(&_BlacklistRegistryV1.CallOpts)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Collect(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "collect", addr)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Collect(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Collect(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Collect(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Collect(&_BlacklistRegistryV1.TransactOpts, addr)
}

// CollectMigration is a paid mutator transaction binding the contract method 0xfed01c30.
//
// Solidity: function collectMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) CollectMigration(opts *bind.TransactOpts, item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "collectMigration", item_id, owner)
}

// CollectMigration is a paid mutator transaction binding the contract method 0xfed01c30.
//
// Solidity: function collectMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) CollectMigration(item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.CollectMigration(&_BlacklistRegistryV1.TransactOpts, item_id, owner)
}

// CollectMigration is a paid mutator transaction binding the contract method 0xfed01c30.
//
// Solidity: function collectMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) CollectMigration(item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.CollectMigration(&_BlacklistRegistryV1.TransactOpts, item_id, owner)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Destroy(&_BlacklistRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Destroy(&_BlacklistRegistryV1.TransactOpts, _newImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Migrate(&_BlacklistRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Migrate(&_BlacklistRegistryV1.TransactOpts, _oldImpl)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Propose(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "propose", addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Propose(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Propose(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Propose(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Propose(&_BlacklistRegistryV1.TransactOpts, addr)
}

// RevokeProposal is a paid mutator transaction binding the contract method 0x2a7736ad.
//
// Solidity: function revokeProposal(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) RevokeProposal(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "revokeProposal", addr)
}

// RevokeProposal is a paid mutator transaction binding the contract method 0x2a7736ad.
//
// Solidity: function revokeProposal(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) RevokeProposal(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.RevokeProposal(&_BlacklistRegistryV1.TransactOpts, addr)
}

// RevokeProposal is a paid mutator transaction binding the contract method 0x2a7736ad.
//
// Solidity: function revokeProposal(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) RevokeProposal(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.RevokeProposal(&_BlacklistRegistryV1.TransactOpts, addr)
}

// BlacklistRegistryV1BlacklistProposalIterator is returned from FilterBlacklistProposal and is used to iterate over the raw logs and unpacked data for BlacklistProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1BlacklistProposalIterator struct {
	Event *BlacklistRegistryV1BlacklistProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1BlacklistProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1BlacklistProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1BlacklistProposal represents a BlacklistProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1BlacklistProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBlacklistProposal is a free log retrieval operation binding the contract event 0xea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557.
//
// Solidity: event BlacklistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterBlacklistProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1BlacklistProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "BlacklistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1BlacklistProposalIterator{contract: _BlacklistRegistryV1.contract, event: "BlacklistProposal", logs: logs, sub: sub}, nil
}

// WatchBlacklistProposal is a free log subscription operation binding the contract event 0xea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557.
//
// Solidity: event BlacklistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchBlacklistProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1BlacklistProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "BlacklistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1BlacklistProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "BlacklistProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BlacklistRegistryV1WhitelistProposalIterator is returned from FilterWhitelistProposal and is used to iterate over the raw logs and unpacked data for WhitelistProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1WhitelistProposalIterator struct {
	Event *BlacklistRegistryV1WhitelistProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1WhitelistProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1WhitelistProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1WhitelistProposal represents a WhitelistProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1WhitelistProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterWhitelistProposal is a free log retrieval operation binding the contract event 0x2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff.
//
// Solidity: event WhitelistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterWhitelistProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1WhitelistProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "WhitelistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1WhitelistProposalIterator{contract: _BlacklistRegistryV1.contract, event: "WhitelistProposal", logs: logs, sub: sub}, nil
}

// WatchWhitelistProposal is a free log subscription operation binding the contract event 0x2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff.
//
// Solidity: event WhitelistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchWhitelistProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1WhitelistProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "WhitelistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1WhitelistProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "WhitelistProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
