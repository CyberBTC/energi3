// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BlacklistRegistryV1ABI is the input ABI used to generate the binding from.
const BlacklistRegistryV1ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"propose\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"migration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proposeRevoke\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isDrainable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proposals\",\"outputs\":[{\"name\":\"enforce\",\"type\":\"address\"},{\"name\":\"revoke\",\"type\":\"address\"},{\"name\":\"drain\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"item_id\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"bytes20\"}],\"name\":\"drainMigration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateBlocked\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"onDrain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateAll\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"proposeDrain\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateDrainable\",\"outputs\":[{\"name\":\"addresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compensation_fund\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_mnregistry_proxy\",\"type\":\"address\"},{\"name\":\"_migration\",\"type\":\"address\"},{\"name\":\"_compensatin_fund\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"BlacklistProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"WhitelistProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"proposal\",\"type\":\"address\"}],\"name\":\"DrainProposal\",\"type\":\"event\"}]"

// BlacklistRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const BlacklistRegistryV1Bin = `60806040523480156200001157600080fd5b506040516200572d3803806200572d833981810160405260808110156200003757600080fd5b5080516020820151604080840151606090940151600080546001600160a01b0319166001600160a01b0386161790559051929391926200007790620000e7565b604051809103906000f08015801562000094573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b0393841617909155600380548216958316959095179094556004805485169382169390931790925560058054909316911617905550620000f5565b610b198062004c1483390190565b614b0f80620001056000396000f3fe608060405260043610620001635760003560e01c80635603125c11620000d3578063ec556889116200007f578063f44411521162000061578063f444115214620005b3578063fe575a8714620005cb578063fe7334e8146200060f5762000163565b8063ec5568891462000583578063ee33f9d2146200059b5762000163565b8063bc393afb11620000b5578063bc393afb14620004f1578063ce5494bb1462000509578063d1e8ebda146200054d5762000163565b80635603125c146200044357806379d7bc0714620004ad5762000163565b8063244fcea511620001335780633303bbb111620001155780633303bbb114620003195780633341b44514620003715780633502a13014620003ed5762000163565b8063244fcea514620002cb5780632d05930514620003015762000163565b8062f55d9d14620001ca57806301267951146200021057806306ec16f8146200026f5780631705a3bd14620002b3575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b348015620001d757600080fd5b506200020e60048036036020811015620001f057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000627565b005b62000246600480360360208110156200022857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620006d2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156200027c57600080fd5b506200020e600480360360208110156200029557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000fe2565b348015620002c057600080fd5b506200024662001afc565b6200024660048036036020811015620002e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001b18565b3480156200030e57600080fd5b5062000246620021e2565b3480156200032657600080fd5b506200035d600480360360208110156200033f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620021fe565b604080519115158252519081900360200190f35b3480156200037e57600080fd5b50620003b5600480360360208110156200039757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620024c0565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b348015620003fa57600080fd5b506200020e600480360360408110156200041357600080fd5b50803590602001357fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001662002580565b3480156200045057600080fd5b506200045b62002739565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015620004995781810151838201526020016200047f565b505050509050019250505060405180910390f35b348015620004ba57600080fd5b506200020e60048036036020811015620004d357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620028fb565b348015620004fe57600080fd5b506200045b62002a01565b3480156200051657600080fd5b506200020e600480360360208110156200052f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002b21565b62000246600480360360208110156200056557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002bb1565b3480156200059057600080fd5b50620002466200310a565b348015620005a857600080fd5b506200045b62003126565b348015620005c057600080fd5b5062000246620032e4565b348015620005d857600080fd5b506200035d60048036036020811015620005f157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662003300565b3480156200061c57600080fd5b506200024662003516565b60005473ffffffffffffffffffffffffffffffffffffffff163314620006ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b620006b98162003532565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60006001546000146200074657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805534683635c9adc5dea0000014620007c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b1580156200083f57600080fd5b505afa15801562000854573d6000803e3d6000fd5b505050506040513d60808110156200086b57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83161562000ee35773ffffffffffffffffffffffffffffffffffffffff82161562000c01578173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200090257600080fd5b505afa15801562000917573d6000803e3d6000fd5b505050506040513d60208110156200092e57600080fd5b50511562000b19578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200097f57600080fd5b505af115801562000994573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620009e157600080fd5b505af1158015620009f6573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff81161562000a7a578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000a6057600080fd5b505af115801562000a75573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801562000afa57600080fd5b505af115801562000b0f573d6000803e3d6000fd5b5050505062000bfb565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000b6057600080fd5b505afa15801562000b75573d6000803e3d6000fd5b505050506040513d602081101562000b8c57600080fd5b50511562000bfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202831290000000000000000000000000000604482015290519081900360640190fd5b62000ee3565b8273ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c4857600080fd5b505afa15801562000c5d573d6000803e3d6000fd5b505050506040513d602081101562000c7457600080fd5b5051801562000cf557508273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cc557600080fd5b505afa15801562000cda573d6000803e3d6000fd5b505050506040513d602081101562000cf157600080fd5b5051155b1562000e7c578273ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000d4457600080fd5b505af115801562000d59573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff81161562000ddd578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000dc357600080fd5b505af115801562000dd8573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801562000e5d57600080fd5b505af115801562000e72573d6000803e3d6000fd5b5050505062000ee3565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202832290000000000000000000000000000604482015290519081900360640190fd5b600062000eef620035c3565b604080517fac31d62200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152808416602483015291519293509087169163ac31d6229160448082019260009290919082900301818387803b15801562000f6c57600080fd5b505af115801562000f81573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918b1693507fea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557925081900360200190a260006001559695505050505050565b600154156200105257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b158015620010d357600080fd5b505afa158015620010e8573d6000803e3d6000fd5b505050506040513d6080811015620010ff57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83166200119857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c6563740000000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015620011df57600080fd5b505afa158015620011f4573d6000803e3d6000fd5b505050506040513d60208110156200120b57600080fd5b50516200127957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f456e666f72636520766f74696e6720696e2070726f6772657373000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620012c057600080fd5b505afa158015620012d5573d6000803e3d6000fd5b505050506040513d6020811015620012ec57600080fd5b5051620013f8578273ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200133c57600080fd5b505af115801562001351573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015620013d557600080fd5b505af1158015620013ea573d6000803e3d6000fd5b505050505050505062001af4565b73ffffffffffffffffffffffffffffffffffffffff811615620016b0578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200145c57600080fd5b505afa15801562001471573d6000803e3d6000fd5b505050506040513d60208110156200148857600080fd5b5051620014f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f447261696e20766f74696e6720696e2070726f67726573730000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200153d57600080fd5b505afa15801562001552573d6000803e3d6000fd5b505050506040513d60208110156200156957600080fd5b505115620015d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4163636f756e74206d75737420626520647261696e6564000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200162157600080fd5b505af115801562001636573d6000803e3d6000fd5b5050604080517f13756c8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152600060248301819052925190891694506313756c8f93506044808301939282900301818387803b158015620013d557600080fd5b73ffffffffffffffffffffffffffffffffffffffff82161562001a8d578173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200171457600080fd5b505afa15801562001729573d6000803e3d6000fd5b505050506040513d60208110156200174057600080fd5b5051620017ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5265766f6b6520766f74696e6720696e2070726f677265737300000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620017f557600080fd5b505afa1580156200180a573d6000803e3d6000fd5b505050506040513d60208110156200182157600080fd5b505115620019ab578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200187257600080fd5b505af115801562001887573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620018d457600080fd5b505af1158015620018e9573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8116156200190c57fe5b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200198c57600080fd5b505af1158015620019a1573d6000803e3d6000fd5b5050505062001a83565b8173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620019f457600080fd5b505af115801562001a09573d6000803e3d6000fd5b5050604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152600060248301819052925190891694506345507a9e93506044808301939282900301818387803b158015620013d557600080fd5b5050505062001af4565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6f2070726f706f73616c7320726561647920746f20636f6c6c656374000000604482015290519081900360640190fd5b506000600155565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600060015460001462001b8c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180553468056bc75e2d631000001462001c0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916000918291849163323ab40991602480820192608092909190829003018186803b15801562001c8457600080fd5b505afa15801562001c99573d6000803e3d6000fd5b505050506040513d608081101562001cb057600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff821662001d4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283129000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81161562001f22578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562001da557600080fd5b505afa15801562001dba573d6000803e3d6000fd5b505050506040513d602081101562001dd157600080fd5b505162001e3f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f416c726561647920616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e8657600080fd5b505afa15801562001e9b573d6000803e3d6000fd5b505050506040513d602081101562001eb257600080fd5b505162001f1c578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001f0257600080fd5b505af115801562001f17573d6000803e3d6000fd5b505050505b620020e4565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562001f6957600080fd5b505afa15801562001f7e573d6000803e3d6000fd5b505050506040513d602081101562001f9557600080fd5b50516200200357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206170706c696361626c65000000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200204a57600080fd5b505afa1580156200205f573d6000803e3d6000fd5b505050506040513d60208110156200207657600080fd5b5051620020e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283229000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000620020f0620035c3565b604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015280841660248301529151929350908616916345507a9e9160448082019260009290919082900301818387803b1580156200216d57600080fd5b505af115801562002182573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918a1693507f2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff925081900360200190a2600060015595945050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093849384938493919092169163323ab409916024808301926080929190829003018186803b1580156200227b57600080fd5b505afa15801562002290573d6000803e3d6000fd5b505050506040513d6080811015620022a757600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff8316620022e65760009350505050620024bb565b8273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200232d57600080fd5b505afa15801562002342573d6000803e3d6000fd5b505050506040513d60208110156200235957600080fd5b50516200236d5760009350505050620024bb565b73ffffffffffffffffffffffffffffffffffffffff8216158015906200240457508173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620023d557600080fd5b505afa158015620023ea573d6000803e3d6000fd5b505050506040513d60208110156200240157600080fd5b50515b15620024175760009350505050620024bb565b73ffffffffffffffffffffffffffffffffffffffff8116620024405760009350505050620024bb565b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200248757600080fd5b505afa1580156200249c573d6000803e3d6000fd5b505050506040513d6020811015620024b357600080fd5b505193505050505b919050565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291516000938493849391169163323ab40991602480820192608092909190829003018186803b1580156200253a57600080fd5b505afa1580156200254f573d6000803e3d6000fd5b505050506040513d60808110156200256657600080fd5b508051602082015160409092015190969195509350915050565b60015415620025f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805562002603606082901c620021fe565b6200266f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420647261696e61626c6500000000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517fa723b35a0000000000000000000000000000000000000000000000000000000081529283018590527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000841660248401525173ffffffffffffffffffffffffffffffffffffffff9091169163a723b35a91604480830192600092919082900301818387803b1580156200270957600080fd5b505af11580156200271e573d6000803e3d6000fd5b50505050620027308160601c620036a6565b50506000600155565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b158015620027a557600080fd5b505afa158015620027ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200280257600080fd5b8101908080516401000000008111156200281b57600080fd5b820160208101848111156200282f57600080fd5b81518560208202830111640100000000821117156200284d57600080fd5b50508051909450925050505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019015620028f757620028a28282815181106200289457fe5b602002602001015162003300565b620028f1576000828281518110620028b657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b62002859565b5090565b600154156200296b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805560005473ffffffffffffffffffffffffffffffffffffffff163214620029f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420636f6e73656e73757300000000000000000000000000000000000000604482015290519081900360640190fd5b62001af481620036a6565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b15801562002a6d57600080fd5b505afa15801562002a82573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101562002aca57600080fd5b81019080805164010000000081111562002ae357600080fd5b8201602081018481111562002af757600080fd5b815185602082028301116401000000008211171562002b1557600080fd5b50909450505050505b90565b60005473ffffffffffffffffffffffffffffffffffffffff16331462002ba857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b62002bae815b50565b600060015460001462002c2557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180553468056bc75e2d631000001462002ca157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b62002cac8262003300565b62002d1857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420626c61636b6c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291519190921691600091839163323ab409916024808301926080929190829003018186803b15801562002d9157600080fd5b505afa15801562002da6573d6000803e3d6000fd5b505050506040513d608081101562002dbd57600080fd5b5060400151905073ffffffffffffffffffffffffffffffffffffffff8116156200300d578073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562002e2857600080fd5b505afa15801562002e3d573d6000803e3d6000fd5b505050506040513d602081101562002e5457600080fd5b50511562002ec357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74206e656564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562002f0a57600080fd5b505afa15801562002f1f573d6000803e3d6000fd5b505050506040513d602081101562002f3657600080fd5b50511562002fa6578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002f8757600080fd5b505af115801562002f9c573d6000803e3d6000fd5b505050506200300d565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f566f74696e6720696e2070726f67726573730000000000000000000000000000604482015290519081900360640190fd5b600062003019620035c3565b604080517f13756c8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015280841660248301529151929350908516916313756c8f9160448082019260009290919082900301818387803b1580156200309657600080fd5b505af1158015620030ab573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8581168252915191891693507fb0163b33033bcea41a78d2d4a9c596c29b0667259543d6d56b8cac8cd92d2cea925081900360200190a26000600155949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b1580156200319257600080fd5b505afa158015620031a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015620031ef57600080fd5b8101908080516401000000008111156200320857600080fd5b820160208101848111156200321c57600080fd5b81518560208202830111640100000000821117156200323a57600080fd5b50508051909450925050505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019015620028f7576200328f8282815181106200328157fe5b6020026020010151620021fe565b620032de576000828281518110620032a357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b62003246565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093929092169183918291849163323ab409916024808301926080929190829003018186803b1580156200337d57600080fd5b505afa15801562003392573d6000803e3d6000fd5b505050506040513d6080811015620033a957600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff8116158015906200344e57508073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200341f57600080fd5b505afa15801562003434573d6000803e3d6000fd5b505050506040513d60208110156200344b57600080fd5b50515b15620034615760009350505050620024bb565b73ffffffffffffffffffffffffffffffffffffffff821615801590620034f857508173ffffffffffffffffffffffffffffffffffffffff16632173a8f96040518163ffffffff1660e01b815260040160206040518083038186803b158015620034c957600080fd5b505afa158015620034de573d6000803e3d6000fd5b505050506040513d6020811015620034f557600080fd5b50515b156200350b5760019350505050620024bb565b506000949350505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015620035a757600080fd5b505af1158015620035bc573d6000803e3d6000fd5b5050505050565b600354600090819073ffffffffffffffffffffffffffffffffffffffff16620035eb62003984565b604051620035f990620039b6565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f0801580156200363a573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156200368657600080fd5b505af11580156200369b573d6000803e3d6000fd5b509394505050505090565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b1580156200372357600080fd5b505afa15801562003738573d6000803e3d6000fd5b505050506040513d60808110156200374f57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff831615620035bc578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620037cb57600080fd5b505af1158015620037e0573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff82161562003864578173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200384a57600080fd5b505af11580156200385f573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff811615620038e4578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620038ca57600080fd5b505af1158015620038df573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200396457600080fd5b505af115801562003979573d6000803e3d6000fd5b505050505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16331415620039ae57503262002b1e565b503362002b1e565b61111680620039c58339019056fe608060405234801561001057600080fd5b506040516111163803806111168339818101604052604081101561003357600080fd5b50805160209182015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b03808616918217835562093a8042810160035560048054909516918616919091178455604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051969795968896600a9693958995909485949193638abf60779383830193909290829003018186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d602081101561010c57600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561016957600080fd5b505afa15801561017d573d6000803e3d6000fd5b505050506040513d60a081101561019357600080fd5b50604081015160809091015190925090508061021057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029057fe5b606460ff8616111561029e57fe5b6008829055606460ff8616830204600955603360ff8616106102c557600954600a556102d0565b60646033830204600a555b6000600954116102dc57fe5b6000600a54116102e857fe5b5050505050505050610e17806102ff6000396000f3fe60806040526004361061016a5760003560e01c80637639b1eb116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103ba578063e5225381146103cf578063fe7334e8146103e45761016a565b8063aec2ccae14610350578063c2472ef814610390578063c40a70f8146103a55761016a565b806383197ef0116100b057806383197ef01461031157806391840a6b14610326578063990a663b1461033b5761016a565b80637639b1eb146102e75780637b352962146102fc5761016a565b80633d1db3e91161012257806356c2a0a11161010757806356c2a0a11461027f57806360f96a8f1461029457806375df0f99146102d25761016a565b80633d1db3e9146102555780635051a5ec1461026a5761016a565b806329dcb0cf1161015357806329dcb0cf146102215780632ded3227146102365780633ccfd60b146102405761016a565b80630b62be45146101d15780632173a8f9146101f8575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101dd57600080fd5b506101e66103f9565b60408051918252519081900360200190f35b34801561020457600080fd5b5061020d6103ff565b604080519115158252519081900360200190f35b34801561022d57600080fd5b506101e6610451565b61023e610457565b005b34801561024c57600080fd5b5061023e6104e7565b34801561026157600080fd5b506101e66105a4565b34801561027657600080fd5b5061020d6105aa565b34801561028b57600080fd5b5061023e6105f6565b3480156102a057600080fd5b506102a9610609565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102de57600080fd5b506101e6610625565b3480156102f357600080fd5b506101e661062b565b34801561030857600080fd5b5061020d610631565b34801561031d57600080fd5b5061023e61065b565b34801561033257600080fd5b506101e66106fc565b34801561034757600080fd5b506101e6610702565b34801561035c57600080fd5b5061020d6004803603602081101561037357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610708565b34801561039c57600080fd5b5061023e61071d565b3480156103b157600080fd5b506102a9610730565b3480156103c657600080fd5b506101e661074c565b3480156103db57600080fd5b5061023e610752565b3480156103f057600080fd5b506102a9610aa7565b60025481565b60006104096105aa565b156104165750600161044e565b6006546007546002810282118015610437575069152d02c7e14af680000082115b156104475760019250505061044e565b6000925050505b90565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104ef6105aa565b61055a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f193505050501580156105a1573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105bf5750600161044e565b6105c7610631565b6105d35750600061044e565b6009546007546006540110156105eb5750600061044e565b506007546006541190565b6105fe610ac3565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106485750600a5460065410155b806106565750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b60085481565b60055481565b600b6020526000908152604090205460ff1681565b610725610ac3565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61075a610631565b801561076b57506107696105aa565b155b6107d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461085c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c557600080fd5b505afa1580156108d9573d6000803e3d6000fd5b505050506040513d60208110156108ef57600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d602081101561098757600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f157600080fd5b505afa158015610a05573d6000803e3d6000fd5b505050506040513d6020811015610a1b57600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9e57600080fd5b505afa158015610bb2573d6000803e3d6000fd5b505050506040513d6020811015610bc857600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c7a57600080fd5b50608081015160a09091015160025491955091508110610cfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a723058202a6a6411737b5c903b23fcba6cbd5d3eb34ca2cbdf243c8ccc762fa63cd558d364736f6c63430005090032a265627a7a72305820bd24f6936ca49d5e8efe18ad1224663174f20145c3ae8098f2cdc9a51ffb154164736f6c634300050900326080604052600080546001600160a01b03191633179055610af4806100256000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806341c0e1b5116100765780639aa5b6c41161005b5780639aa5b6c414610203578063ac31d62214610249578063da0321cd14610284576100a3565b806341c0e1b5146101c057806345507a9e146101c8576100a3565b806313756c8f146100a857806313af4035146100e557806329092d0e14610118578063323ab4091461014b575b600080fd5b6100e3600480360360408110156100be57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166102dc565b005b6100e3600480360360208110156100fb57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166103dc565b6100e36004803603602081101561012e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104a9565b61017e6004803603602081101561016157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106c6565b6040805173ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931682820152606082019290925290519081900360800190f35b6100e361070c565b6100e3600480360360408110156101de57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610795565b6102206004803603602081101561021957600080fd5b5035610895565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6100e36004803603604081101561025f57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160200135166108c9565b61028c610a0b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102c85781810151838201526020016102b0565b505050509050019250505060405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff16331461036257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160205260409020805490911661039357fe5b60020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b60005473ffffffffffffffffffffffffffffffffffffffff16331461046257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461052f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8082166000908152600160205260409020805490911661056057fe5b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061059057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660028260030154815481106105cc57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600280548061061f57fe5b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116909155930190935573ffffffffffffffffffffffffffffffffffffffff9490941684526001918290526040842080548216815591820180548216905560028201805490911690556003019190915550565b6001602081905260009182526040909120805491810154600282015460039092015473ffffffffffffffffffffffffffffffffffffffff93841693918216929091169084565b60005473ffffffffffffffffffffffffffffffffffffffff16331461079257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b33ff5b60005473ffffffffffffffffffffffffffffffffffffffff16331461081b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160205260409020805490911661084c57fe5b60010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b600281815481106108a257fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461094f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020526040902080549091161561098157fe5b805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161782556002805460039093018390556001830181556000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054939092169216919091179055565b60025460408051828152602080840282010190915260609190818015610a3b578160200160208202803883390190505b50915060005b81811015610aba5760028181548110610a5657fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281518110610a8d57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101610a41565b50509056fea265627a7a723058207f9e187886b51239a4620b9a27c6182ffb9f16ac8a088aa4181fba24475d3ef164736f6c63430005090032`

// DeployBlacklistRegistryV1 deploys a new Ethereum contract, binding an instance of BlacklistRegistryV1 to it.
func DeployBlacklistRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address, _migration common.Address, _compensatin_fund common.Address) (common.Address, *types.Transaction, *BlacklistRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(BlacklistRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BlacklistRegistryV1Bin), backend, _proxy, _mnregistry_proxy, _migration, _compensatin_fund)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlacklistRegistryV1{BlacklistRegistryV1Caller: BlacklistRegistryV1Caller{contract: contract}, BlacklistRegistryV1Transactor: BlacklistRegistryV1Transactor{contract: contract}, BlacklistRegistryV1Filterer: BlacklistRegistryV1Filterer{contract: contract}}, nil
}

// BlacklistRegistryV1Bin is the compiled bytecode of contract after deployment.
const BlacklistRegistryV1RuntimeBin = `608060405260043610620001635760003560e01c80635603125c11620000d3578063ec556889116200007f578063f44411521162000061578063f444115214620005b3578063fe575a8714620005cb578063fe7334e8146200060f5762000163565b8063ec5568891462000583578063ee33f9d2146200059b5762000163565b8063bc393afb11620000b5578063bc393afb14620004f1578063ce5494bb1462000509578063d1e8ebda146200054d5762000163565b80635603125c146200044357806379d7bc0714620004ad5762000163565b8063244fcea511620001335780633303bbb111620001155780633303bbb114620003195780633341b44514620003715780633502a13014620003ed5762000163565b8063244fcea514620002cb5780632d05930514620003015762000163565b8062f55d9d14620001ca57806301267951146200021057806306ec16f8146200026f5780631705a3bd14620002b3575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b348015620001d757600080fd5b506200020e60048036036020811015620001f057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000627565b005b62000246600480360360208110156200022857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620006d2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156200027c57600080fd5b506200020e600480360360208110156200029557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662000fe2565b348015620002c057600080fd5b506200024662001afc565b6200024660048036036020811015620002e357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662001b18565b3480156200030e57600080fd5b5062000246620021e2565b3480156200032657600080fd5b506200035d600480360360208110156200033f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620021fe565b604080519115158252519081900360200190f35b3480156200037e57600080fd5b50620003b5600480360360208110156200039757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620024c0565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b348015620003fa57600080fd5b506200020e600480360360408110156200041357600080fd5b50803590602001357fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001662002580565b3480156200045057600080fd5b506200045b62002739565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015620004995781810151838201526020016200047f565b505050509050019250505060405180910390f35b348015620004ba57600080fd5b506200020e60048036036020811015620004d357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16620028fb565b348015620004fe57600080fd5b506200045b62002a01565b3480156200051657600080fd5b506200020e600480360360208110156200052f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002b21565b62000246600480360360208110156200056557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662002bb1565b3480156200059057600080fd5b50620002466200310a565b348015620005a857600080fd5b506200045b62003126565b348015620005c057600080fd5b5062000246620032e4565b348015620005d857600080fd5b506200035d60048036036020811015620005f157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1662003300565b3480156200061c57600080fd5b506200024662003516565b60005473ffffffffffffffffffffffffffffffffffffffff163314620006ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b620006b98162003532565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60006001546000146200074657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805534683635c9adc5dea0000014620007c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b1580156200083f57600080fd5b505afa15801562000854573d6000803e3d6000fd5b505050506040513d60808110156200086b57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83161562000ee35773ffffffffffffffffffffffffffffffffffffffff82161562000c01578173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200090257600080fd5b505afa15801562000917573d6000803e3d6000fd5b505050506040513d60208110156200092e57600080fd5b50511562000b19578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200097f57600080fd5b505af115801562000994573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620009e157600080fd5b505af1158015620009f6573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff81161562000a7a578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000a6057600080fd5b505af115801562000a75573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801562000afa57600080fd5b505af115801562000b0f573d6000803e3d6000fd5b5050505062000bfb565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000b6057600080fd5b505afa15801562000b75573d6000803e3d6000fd5b505050506040513d602081101562000b8c57600080fd5b50511562000bfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202831290000000000000000000000000000604482015290519081900360640190fd5b62000ee3565b8273ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c4857600080fd5b505afa15801562000c5d573d6000803e3d6000fd5b505050506040513d602081101562000c7457600080fd5b5051801562000cf557508273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562000cc557600080fd5b505afa15801562000cda573d6000803e3d6000fd5b505050506040513d602081101562000cf157600080fd5b5051155b1562000e7c578273ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000d4457600080fd5b505af115801562000d59573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff81161562000ddd578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000dc357600080fd5b505af115801562000dd8573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801562000e5d57600080fd5b505af115801562000e72573d6000803e3d6000fd5b5050505062000ee3565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f416c726561647920616374697665202832290000000000000000000000000000604482015290519081900360640190fd5b600062000eef620035c3565b604080517fac31d62200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152808416602483015291519293509087169163ac31d6229160448082019260009290919082900301818387803b15801562000f6c57600080fd5b505af115801562000f81573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918b1693507fea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557925081900360200190a260006001559695505050505050565b600154156200105257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b158015620010d357600080fd5b505afa158015620010e8573d6000803e3d6000fd5b505050506040513d6080811015620010ff57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff83166200119857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c6563740000000000000000000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b158015620011df57600080fd5b505afa158015620011f4573d6000803e3d6000fd5b505050506040513d60208110156200120b57600080fd5b50516200127957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f456e666f72636520766f74696e6720696e2070726f6772657373000000000000604482015290519081900360640190fd5b8273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620012c057600080fd5b505afa158015620012d5573d6000803e3d6000fd5b505050506040513d6020811015620012ec57600080fd5b5051620013f8578273ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200133c57600080fd5b505af115801562001351573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015620013d557600080fd5b505af1158015620013ea573d6000803e3d6000fd5b505050505050505062001af4565b73ffffffffffffffffffffffffffffffffffffffff811615620016b0578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200145c57600080fd5b505afa15801562001471573d6000803e3d6000fd5b505050506040513d60208110156200148857600080fd5b5051620014f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f447261696e20766f74696e6720696e2070726f67726573730000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200153d57600080fd5b505afa15801562001552573d6000803e3d6000fd5b505050506040513d60208110156200156957600080fd5b505115620015d857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4163636f756e74206d75737420626520647261696e6564000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200162157600080fd5b505af115801562001636573d6000803e3d6000fd5b5050604080517f13756c8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152600060248301819052925190891694506313756c8f93506044808301939282900301818387803b158015620013d557600080fd5b73ffffffffffffffffffffffffffffffffffffffff82161562001a8d578173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b1580156200171457600080fd5b505afa15801562001729573d6000803e3d6000fd5b505050506040513d60208110156200174057600080fd5b5051620017ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5265766f6b6520766f74696e6720696e2070726f677265737300000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620017f557600080fd5b505afa1580156200180a573d6000803e3d6000fd5b505050506040513d60208110156200182157600080fd5b505115620019ab578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200187257600080fd5b505af115801562001887573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620018d457600080fd5b505af1158015620018e9573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8116156200190c57fe5b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200198c57600080fd5b505af1158015620019a1573d6000803e3d6000fd5b5050505062001a83565b8173ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620019f457600080fd5b505af115801562001a09573d6000803e3d6000fd5b5050604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152600060248301819052925190891694506345507a9e93506044808301939282900301818387803b158015620013d557600080fd5b5050505062001af4565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4e6f2070726f706f73616c7320726561647920746f20636f6c6c656374000000604482015290519081900360640190fd5b506000600155565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b600060015460001462001b8c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180553468056bc75e2d631000001462001c0857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152915191909216916000918291849163323ab40991602480820192608092909190829003018186803b15801562001c8457600080fd5b505afa15801562001c99573d6000803e3d6000fd5b505050506040513d608081101562001cb057600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff821662001d4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283129000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81161562001f22578073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562001da557600080fd5b505afa15801562001dba573d6000803e3d6000fd5b505050506040513d602081101562001dd157600080fd5b505162001e3f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f416c726561647920616374697665000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e8657600080fd5b505afa15801562001e9b573d6000803e3d6000fd5b505050506040513d602081101562001eb257600080fd5b505162001f1c578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562001f0257600080fd5b505af115801562001f17573d6000803e3d6000fd5b505050505b620020e4565b8173ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562001f6957600080fd5b505afa15801562001f7e573d6000803e3d6000fd5b505050506040513d602081101562001f9557600080fd5b50516200200357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206170706c696361626c65000000000000000000000000000000000000604482015290519081900360640190fd5b8173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200204a57600080fd5b505afa1580156200205f573d6000803e3d6000fd5b505050506040513d60208110156200207657600080fd5b5051620020e457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f206e65656420283229000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000620020f0620035c3565b604080517f45507a9e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015280841660248301529151929350908616916345507a9e9160448082019260009290919082900301818387803b1580156200216d57600080fd5b505af115801562002182573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff85811682529151918a1693507f2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff925081900360200190a2600060015595945050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093849384938493919092169163323ab409916024808301926080929190829003018186803b1580156200227b57600080fd5b505afa15801562002290573d6000803e3d6000fd5b505050506040513d6080811015620022a757600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff8316620022e65760009350505050620024bb565b8273ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200232d57600080fd5b505afa15801562002342573d6000803e3d6000fd5b505050506040513d60208110156200235957600080fd5b50516200236d5760009350505050620024bb565b73ffffffffffffffffffffffffffffffffffffffff8216158015906200240457508173ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b158015620023d557600080fd5b505afa158015620023ea573d6000803e3d6000fd5b505050506040513d60208110156200240157600080fd5b50515b15620024175760009350505050620024bb565b73ffffffffffffffffffffffffffffffffffffffff8116620024405760009350505050620024bb565b8073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200248757600080fd5b505afa1580156200249c573d6000803e3d6000fd5b505050506040513d6020811015620024b357600080fd5b505193505050505b919050565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015291516000938493849391169163323ab40991602480820192608092909190829003018186803b1580156200253a57600080fd5b505afa1580156200254f573d6000803e3d6000fd5b505050506040513d60808110156200256657600080fd5b508051602082015160409092015190969195509350915050565b60015415620025f057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805562002603606082901c620021fe565b6200266f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420647261696e61626c6500000000000000000000000000000000000000604482015290519081900360640190fd5b60048054604080517fa723b35a0000000000000000000000000000000000000000000000000000000081529283018590527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000841660248401525173ffffffffffffffffffffffffffffffffffffffff9091169163a723b35a91604480830192600092919082900301818387803b1580156200270957600080fd5b505af11580156200271e573d6000803e3d6000fd5b50505050620027308160601c620036a6565b50506000600155565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b158015620027a557600080fd5b505afa158015620027ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156200280257600080fd5b8101908080516401000000008111156200281b57600080fd5b820160208101848111156200282f57600080fd5b81518560208202830111640100000000821117156200284d57600080fd5b50508051909450925050505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019015620028f757620028a28282815181106200289457fe5b602002602001015162003300565b620028f1576000828281518110620028b657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b62002859565b5090565b600154156200296b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6001805560005473ffffffffffffffffffffffffffffffffffffffff163214620029f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420636f6e73656e73757300000000000000000000000000000000000000604482015290519081900360640190fd5b62001af481620036a6565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b15801562002a6d57600080fd5b505afa15801562002a82573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101562002aca57600080fd5b81019080805164010000000081111562002ae357600080fd5b8201602081018481111562002af757600080fd5b815185602082028301116401000000008211171562002b1557600080fd5b50909450505050505b90565b60005473ffffffffffffffffffffffffffffffffffffffff16331462002ba857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b62002bae815b50565b600060015460001462002c2557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180553468056bc75e2d631000001462002ca157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b62002cac8262003300565b62002d1857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420626c61636b6c69737465640000000000000000000000000000000000604482015290519081900360640190fd5b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291519190921691600091839163323ab409916024808301926080929190829003018186803b15801562002d9157600080fd5b505afa15801562002da6573d6000803e3d6000fd5b505050506040513d608081101562002dbd57600080fd5b5060400151905073ffffffffffffffffffffffffffffffffffffffff8116156200300d578073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801562002e2857600080fd5b505afa15801562002e3d573d6000803e3d6000fd5b505050506040513d602081101562002e5457600080fd5b50511562002ec357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f4e6f74206e656564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b8073ffffffffffffffffffffffffffffffffffffffff16637b3529626040518163ffffffff1660e01b815260040160206040518083038186803b15801562002f0a57600080fd5b505afa15801562002f1f573d6000803e3d6000fd5b505050506040513d602081101562002f3657600080fd5b50511562002fa6578073ffffffffffffffffffffffffffffffffffffffff1663e52253816040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002f8757600080fd5b505af115801562002f9c573d6000803e3d6000fd5b505050506200300d565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f566f74696e6720696e2070726f67726573730000000000000000000000000000604482015290519081900360640190fd5b600062003019620035c3565b604080517f13756c8f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015280841660248301529151929350908516916313756c8f9160448082019260009290919082900301818387803b1580156200309657600080fd5b505af1158015620030ab573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff8581168252915191891693507fb0163b33033bcea41a78d2d4a9c596c29b0667259543d6d56b8cac8cd92d2cea925081900360200190a26000600155949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517fda0321cd000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163da0321cd916004808301926000929190829003018186803b1580156200319257600080fd5b505afa158015620031a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526020811015620031ef57600080fd5b8101908080516401000000008111156200320857600080fd5b820160208101848111156200321c57600080fd5b81518560208202830111640100000000821117156200323a57600080fd5b50508051909450925050505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019015620028f7576200328f8282815181106200328157fe5b6020026020010151620021fe565b620032de576000828281518110620032a357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b62003246565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151600093929092169183918291849163323ab409916024808301926080929190829003018186803b1580156200337d57600080fd5b505afa15801562003392573d6000803e3d6000fd5b505050506040513d6080811015620033a957600080fd5b508051602090910151909250905073ffffffffffffffffffffffffffffffffffffffff8116158015906200344e57508073ffffffffffffffffffffffffffffffffffffffff16635051a5ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200341f57600080fd5b505afa15801562003434573d6000803e3d6000fd5b505050506040513d60208110156200344b57600080fd5b50515b15620034615760009350505050620024bb565b73ffffffffffffffffffffffffffffffffffffffff821615801590620034f857508173ffffffffffffffffffffffffffffffffffffffff16632173a8f96040518163ffffffff1660e01b815260040160206040518083038186803b158015620034c957600080fd5b505afa158015620034de573d6000803e3d6000fd5b505050506040513d6020811015620034f557600080fd5b50515b156200350b5760019350505050620024bb565b506000949350505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015620035a757600080fd5b505af1158015620035bc573d6000803e3d6000fd5b5050505050565b600354600090819073ffffffffffffffffffffffffffffffffffffffff16620035eb62003984565b604051620035f990620039b6565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604080519182900301906000f0801580156200363a573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156200368657600080fd5b505af11580156200369b573d6000803e3d6000fd5b509394505050505090565b600254604080517f323ab40900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009182918291859163323ab409916024808301926080929190829003018186803b1580156200372357600080fd5b505afa15801562003738573d6000803e3d6000fd5b505050506040513d60808110156200374f57600080fd5b5080516020820151604090920151909450909250905073ffffffffffffffffffffffffffffffffffffffff831615620035bc578273ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620037cb57600080fd5b505af1158015620037e0573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff82161562003864578173ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200384a57600080fd5b505af11580156200385f573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff811615620038e4578073ffffffffffffffffffffffffffffffffffffffff166383197ef06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620038ca57600080fd5b505af1158015620038df573d6000803e3d6000fd5b505050505b8373ffffffffffffffffffffffffffffffffffffffff166329092d0e866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200396457600080fd5b505af115801562003979573d6000803e3d6000fd5b505050505050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16331415620039ae57503262002b1e565b503362002b1e565b61111680620039c58339019056fe608060405234801561001057600080fd5b506040516111163803806111168339818101604052604081101561003357600080fd5b50805160209182015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b03808616918217835562093a8042810160035560048054909516918616919091178455604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051969795968896600a9693958995909485949193638abf60779383830193909290829003018186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d602081101561010c57600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561016957600080fd5b505afa15801561017d573d6000803e3d6000fd5b505050506040513d60a081101561019357600080fd5b50604081015160809091015190925090508061021057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029057fe5b606460ff8616111561029e57fe5b6008829055606460ff8616830204600955603360ff8616106102c557600954600a556102d0565b60646033830204600a555b6000600954116102dc57fe5b6000600a54116102e857fe5b5050505050505050610e17806102ff6000396000f3fe60806040526004361061016a5760003560e01c80637639b1eb116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103ba578063e5225381146103cf578063fe7334e8146103e45761016a565b8063aec2ccae14610350578063c2472ef814610390578063c40a70f8146103a55761016a565b806383197ef0116100b057806383197ef01461031157806391840a6b14610326578063990a663b1461033b5761016a565b80637639b1eb146102e75780637b352962146102fc5761016a565b80633d1db3e91161012257806356c2a0a11161010757806356c2a0a11461027f57806360f96a8f1461029457806375df0f99146102d25761016a565b80633d1db3e9146102555780635051a5ec1461026a5761016a565b806329dcb0cf1161015357806329dcb0cf146102215780632ded3227146102365780633ccfd60b146102405761016a565b80630b62be45146101d15780632173a8f9146101f8575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101dd57600080fd5b506101e66103f9565b60408051918252519081900360200190f35b34801561020457600080fd5b5061020d6103ff565b604080519115158252519081900360200190f35b34801561022d57600080fd5b506101e6610451565b61023e610457565b005b34801561024c57600080fd5b5061023e6104e7565b34801561026157600080fd5b506101e66105a4565b34801561027657600080fd5b5061020d6105aa565b34801561028b57600080fd5b5061023e6105f6565b3480156102a057600080fd5b506102a9610609565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102de57600080fd5b506101e6610625565b3480156102f357600080fd5b506101e661062b565b34801561030857600080fd5b5061020d610631565b34801561031d57600080fd5b5061023e61065b565b34801561033257600080fd5b506101e66106fc565b34801561034757600080fd5b506101e6610702565b34801561035c57600080fd5b5061020d6004803603602081101561037357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610708565b34801561039c57600080fd5b5061023e61071d565b3480156103b157600080fd5b506102a9610730565b3480156103c657600080fd5b506101e661074c565b3480156103db57600080fd5b5061023e610752565b3480156103f057600080fd5b506102a9610aa7565b60025481565b60006104096105aa565b156104165750600161044e565b6006546007546002810282118015610437575069152d02c7e14af680000082115b156104475760019250505061044e565b6000925050505b90565b60035481565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104ef6105aa565b61055a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f193505050501580156105a1573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105bf5750600161044e565b6105c7610631565b6105d35750600061044e565b6009546007546006540110156105eb5750600061044e565b506007546006541190565b6105fe610ac3565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106485750600a5460065410155b806106565750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106e157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b60085481565b60055481565b600b6020526000908152604090205460ff1681565b610725610ac3565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61075a610631565b801561076b57506107696105aa565b155b6107d657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461085c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108c557600080fd5b505afa1580156108d9573d6000803e3d6000fd5b505050506040513d60208110156108ef57600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561095d57600080fd5b505afa158015610971573d6000803e3d6000fd5b505050506040513d602081101561098757600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f157600080fd5b505afa158015610a05573d6000803e3d6000fd5b505050506040513d6020811015610a1b57600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9e57600080fd5b505afa158015610bb2573d6000803e3d6000fd5b505050506040513d6020811015610bc857600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c7a57600080fd5b50608081015160a09091015160025491955091508110610cfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a723058202a6a6411737b5c903b23fcba6cbd5d3eb34ca2cbdf243c8ccc762fa63cd558d364736f6c63430005090032a265627a7a72305820bd24f6936ca49d5e8efe18ad1224663174f20145c3ae8098f2cdc9a51ffb154164736f6c63430005090032`

// BlacklistRegistryV1 is an auto generated Go binding around an Ethereum contract.
type BlacklistRegistryV1 struct {
	BlacklistRegistryV1Caller     // Read-only binding to the contract
	BlacklistRegistryV1Transactor // Write-only binding to the contract
	BlacklistRegistryV1Filterer   // Log filterer for contract events
}

// BlacklistRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type BlacklistRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type BlacklistRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BlacklistRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlacklistRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BlacklistRegistryV1Session struct {
	Contract     *BlacklistRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// BlacklistRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BlacklistRegistryV1CallerSession struct {
	Contract *BlacklistRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// BlacklistRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BlacklistRegistryV1TransactorSession struct {
	Contract     *BlacklistRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// BlacklistRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type BlacklistRegistryV1Raw struct {
	Contract *BlacklistRegistryV1 // Generic contract binding to access the raw methods on
}

// BlacklistRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BlacklistRegistryV1CallerRaw struct {
	Contract *BlacklistRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// BlacklistRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BlacklistRegistryV1TransactorRaw struct {
	Contract *BlacklistRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewBlacklistRegistryV1 creates a new instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1(address common.Address, backend bind.ContractBackend) (*BlacklistRegistryV1, error) {
	contract, err := bindBlacklistRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1{BlacklistRegistryV1Caller: BlacklistRegistryV1Caller{contract: contract}, BlacklistRegistryV1Transactor: BlacklistRegistryV1Transactor{contract: contract}, BlacklistRegistryV1Filterer: BlacklistRegistryV1Filterer{contract: contract}}, nil
}

// NewBlacklistRegistryV1Caller creates a new read-only instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*BlacklistRegistryV1Caller, error) {
	contract, err := bindBlacklistRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Caller{contract: contract}, nil
}

// NewBlacklistRegistryV1Transactor creates a new write-only instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*BlacklistRegistryV1Transactor, error) {
	contract, err := bindBlacklistRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Transactor{contract: contract}, nil
}

// NewBlacklistRegistryV1Filterer creates a new log filterer instance of BlacklistRegistryV1, bound to a specific deployed contract.
func NewBlacklistRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*BlacklistRegistryV1Filterer, error) {
	contract, err := bindBlacklistRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1Filterer{contract: contract}, nil
}

// bindBlacklistRegistryV1 binds a generic wrapper to an already deployed contract.
func bindBlacklistRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BlacklistRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlacklistRegistryV1 *BlacklistRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.BlacklistRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _BlacklistRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) CompensationFund(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "compensation_fund")
	return *ret0, err
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) CompensationFund() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.CompensationFund(&_BlacklistRegistryV1.CallOpts)
}

// CompensationFund is a free data retrieval call binding the contract method 0xf4441152.
//
// Solidity: function compensation_fund() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) CompensationFund() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.CompensationFund(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateAll(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateAll")
	return *ret0, err
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateAll() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateAll(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateAll is a free data retrieval call binding the contract method 0xbc393afb.
//
// Solidity: function enumerateAll() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateAll() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateAll(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateBlocked(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateBlocked")
	return *ret0, err
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateBlocked() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateBlocked(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateBlocked is a free data retrieval call binding the contract method 0x5603125c.
//
// Solidity: function enumerateBlocked() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateBlocked() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateBlocked(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateDrainable is a free data retrieval call binding the contract method 0xee33f9d2.
//
// Solidity: function enumerateDrainable() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) EnumerateDrainable(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "enumerateDrainable")
	return *ret0, err
}

// EnumerateDrainable is a free data retrieval call binding the contract method 0xee33f9d2.
//
// Solidity: function enumerateDrainable() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) EnumerateDrainable() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateDrainable(&_BlacklistRegistryV1.CallOpts)
}

// EnumerateDrainable is a free data retrieval call binding the contract method 0xee33f9d2.
//
// Solidity: function enumerateDrainable() constant returns(address[] addresses)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) EnumerateDrainable() ([]common.Address, error) {
	return _BlacklistRegistryV1.Contract.EnumerateDrainable(&_BlacklistRegistryV1.CallOpts)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) IsBlacklisted(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "isBlacklisted", addr)
	return *ret0, err
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) IsBlacklisted(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsBlacklisted(&_BlacklistRegistryV1.CallOpts, addr)
}

// IsBlacklisted is a free data retrieval call binding the contract method 0xfe575a87.
//
// Solidity: function isBlacklisted(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) IsBlacklisted(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsBlacklisted(&_BlacklistRegistryV1.CallOpts, addr)
}

// IsDrainable is a free data retrieval call binding the contract method 0x3303bbb1.
//
// Solidity: function isDrainable(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) IsDrainable(opts *bind.CallOpts, addr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "isDrainable", addr)
	return *ret0, err
}

// IsDrainable is a free data retrieval call binding the contract method 0x3303bbb1.
//
// Solidity: function isDrainable(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) IsDrainable(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsDrainable(&_BlacklistRegistryV1.CallOpts, addr)
}

// IsDrainable is a free data retrieval call binding the contract method 0x3303bbb1.
//
// Solidity: function isDrainable(address addr) constant returns(bool)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) IsDrainable(addr common.Address) (bool, error) {
	return _BlacklistRegistryV1.Contract.IsDrainable(&_BlacklistRegistryV1.CallOpts, addr)
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Migration(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "migration")
	return *ret0, err
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Migration() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Migration(&_BlacklistRegistryV1.CallOpts)
}

// Migration is a free data retrieval call binding the contract method 0x1705a3bd.
//
// Solidity: function migration() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Migration() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Migration(&_BlacklistRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) MnregistryProxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.MnregistryProxy(&_BlacklistRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) MnregistryProxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.MnregistryProxy(&_BlacklistRegistryV1.CallOpts)
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke, address drain)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Proposals(opts *bind.CallOpts, addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
	Drain   common.Address
}, error) {
	ret := new(struct {
		Enforce common.Address
		Revoke  common.Address
		Drain   common.Address
	})
	out := ret
	err := _BlacklistRegistryV1.contract.Call(opts, out, "proposals", addr)
	return *ret, err
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke, address drain)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Proposals(addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
	Drain   common.Address
}, error) {
	return _BlacklistRegistryV1.Contract.Proposals(&_BlacklistRegistryV1.CallOpts, addr)
}

// Proposals is a free data retrieval call binding the contract method 0x3341b445.
//
// Solidity: function proposals(address addr) constant returns(address enforce, address revoke, address drain)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Proposals(addr common.Address) (struct {
	Enforce common.Address
	Revoke  common.Address
	Drain   common.Address
}, error) {
	return _BlacklistRegistryV1.Contract.Proposals(&_BlacklistRegistryV1.CallOpts, addr)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Proxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Proxy(&_BlacklistRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.Proxy(&_BlacklistRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _BlacklistRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) V1storage() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.V1storage(&_BlacklistRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _BlacklistRegistryV1.Contract.V1storage(&_BlacklistRegistryV1.CallOpts)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Collect(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "collect", addr)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Collect(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Collect(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Collect is a paid mutator transaction binding the contract method 0x06ec16f8.
//
// Solidity: function collect(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Collect(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Collect(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Destroy(&_BlacklistRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Destroy(&_BlacklistRegistryV1.TransactOpts, _newImpl)
}

// DrainMigration is a paid mutator transaction binding the contract method 0x3502a130.
//
// Solidity: function drainMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) DrainMigration(opts *bind.TransactOpts, item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "drainMigration", item_id, owner)
}

// DrainMigration is a paid mutator transaction binding the contract method 0x3502a130.
//
// Solidity: function drainMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) DrainMigration(item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.DrainMigration(&_BlacklistRegistryV1.TransactOpts, item_id, owner)
}

// DrainMigration is a paid mutator transaction binding the contract method 0x3502a130.
//
// Solidity: function drainMigration(uint256 item_id, bytes20 owner) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) DrainMigration(item_id *big.Int, owner [20]byte) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.DrainMigration(&_BlacklistRegistryV1.TransactOpts, item_id, owner)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Migrate(&_BlacklistRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Migrate(&_BlacklistRegistryV1.TransactOpts, _oldImpl)
}

// OnDrain is a paid mutator transaction binding the contract method 0x79d7bc07.
//
// Solidity: function onDrain(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) OnDrain(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "onDrain", addr)
}

// OnDrain is a paid mutator transaction binding the contract method 0x79d7bc07.
//
// Solidity: function onDrain(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) OnDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.OnDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// OnDrain is a paid mutator transaction binding the contract method 0x79d7bc07.
//
// Solidity: function onDrain(address addr) returns()
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) OnDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.OnDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) Propose(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "propose", addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) Propose(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Propose(&_BlacklistRegistryV1.TransactOpts, addr)
}

// Propose is a paid mutator transaction binding the contract method 0x01267951.
//
// Solidity: function propose(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) Propose(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.Propose(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeDrain is a paid mutator transaction binding the contract method 0xd1e8ebda.
//
// Solidity: function proposeDrain(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) ProposeDrain(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "proposeDrain", addr)
}

// ProposeDrain is a paid mutator transaction binding the contract method 0xd1e8ebda.
//
// Solidity: function proposeDrain(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) ProposeDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeDrain is a paid mutator transaction binding the contract method 0xd1e8ebda.
//
// Solidity: function proposeDrain(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) ProposeDrain(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeDrain(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeRevoke is a paid mutator transaction binding the contract method 0x244fcea5.
//
// Solidity: function proposeRevoke(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Transactor) ProposeRevoke(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.contract.Transact(opts, "proposeRevoke", addr)
}

// ProposeRevoke is a paid mutator transaction binding the contract method 0x244fcea5.
//
// Solidity: function proposeRevoke(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Session) ProposeRevoke(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeRevoke(&_BlacklistRegistryV1.TransactOpts, addr)
}

// ProposeRevoke is a paid mutator transaction binding the contract method 0x244fcea5.
//
// Solidity: function proposeRevoke(address addr) returns(address)
func (_BlacklistRegistryV1 *BlacklistRegistryV1TransactorSession) ProposeRevoke(addr common.Address) (*types.Transaction, error) {
	return _BlacklistRegistryV1.Contract.ProposeRevoke(&_BlacklistRegistryV1.TransactOpts, addr)
}

// BlacklistRegistryV1BlacklistProposalIterator is returned from FilterBlacklistProposal and is used to iterate over the raw logs and unpacked data for BlacklistProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1BlacklistProposalIterator struct {
	Event *BlacklistRegistryV1BlacklistProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1BlacklistProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1BlacklistProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1BlacklistProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1BlacklistProposal represents a BlacklistProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1BlacklistProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBlacklistProposal is a free log retrieval operation binding the contract event 0xea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557.
//
// Solidity: event BlacklistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterBlacklistProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1BlacklistProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "BlacklistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1BlacklistProposalIterator{contract: _BlacklistRegistryV1.contract, event: "BlacklistProposal", logs: logs, sub: sub}, nil
}

// WatchBlacklistProposal is a free log subscription operation binding the contract event 0xea0d3b1afc7aa1754f902b277d6f473e2f4a4526e94797814c2042405d692557.
//
// Solidity: event BlacklistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchBlacklistProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1BlacklistProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "BlacklistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1BlacklistProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "BlacklistProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BlacklistRegistryV1DrainProposalIterator is returned from FilterDrainProposal and is used to iterate over the raw logs and unpacked data for DrainProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1DrainProposalIterator struct {
	Event *BlacklistRegistryV1DrainProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1DrainProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1DrainProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1DrainProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1DrainProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1DrainProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1DrainProposal represents a DrainProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1DrainProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDrainProposal is a free log retrieval operation binding the contract event 0xb0163b33033bcea41a78d2d4a9c596c29b0667259543d6d56b8cac8cd92d2cea.
//
// Solidity: event DrainProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterDrainProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1DrainProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "DrainProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1DrainProposalIterator{contract: _BlacklistRegistryV1.contract, event: "DrainProposal", logs: logs, sub: sub}, nil
}

// WatchDrainProposal is a free log subscription operation binding the contract event 0xb0163b33033bcea41a78d2d4a9c596c29b0667259543d6d56b8cac8cd92d2cea.
//
// Solidity: event DrainProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchDrainProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1DrainProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "DrainProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1DrainProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "DrainProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// BlacklistRegistryV1WhitelistProposalIterator is returned from FilterWhitelistProposal and is used to iterate over the raw logs and unpacked data for WhitelistProposal events raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1WhitelistProposalIterator struct {
	Event *BlacklistRegistryV1WhitelistProposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlacklistRegistryV1WhitelistProposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlacklistRegistryV1WhitelistProposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlacklistRegistryV1WhitelistProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlacklistRegistryV1WhitelistProposal represents a WhitelistProposal event raised by the BlacklistRegistryV1 contract.
type BlacklistRegistryV1WhitelistProposal struct {
	Target   common.Address
	Proposal common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterWhitelistProposal is a free log retrieval operation binding the contract event 0x2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff.
//
// Solidity: event WhitelistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) FilterWhitelistProposal(opts *bind.FilterOpts, target []common.Address) (*BlacklistRegistryV1WhitelistProposalIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.FilterLogs(opts, "WhitelistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return &BlacklistRegistryV1WhitelistProposalIterator{contract: _BlacklistRegistryV1.contract, event: "WhitelistProposal", logs: logs, sub: sub}, nil
}

// WatchWhitelistProposal is a free log subscription operation binding the contract event 0x2e46fe8e502a44b05a85d4346d3e208fc845c81a81c9b7e4db08a33dca59faff.
//
// Solidity: event WhitelistProposal(address indexed target, address proposal)
func (_BlacklistRegistryV1 *BlacklistRegistryV1Filterer) WatchWhitelistProposal(opts *bind.WatchOpts, sink chan<- *BlacklistRegistryV1WhitelistProposal, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _BlacklistRegistryV1.contract.WatchLogs(opts, "WhitelistProposal", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlacklistRegistryV1WhitelistProposal)
				if err := _BlacklistRegistryV1.contract.UnpackLog(event, "WhitelistProposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
