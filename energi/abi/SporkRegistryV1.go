// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SporkRegistryV1ABI is the input ABI used to generate the binding from.
const SporkRegistryV1ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_impl\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint256\"},{\"name\":\"_fee_payer\",\"type\":\"address\"}],\"name\":\"createUpgradeProposal\",\"outputs\":[{\"name\":\"proposal\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consensusGasLimits\",\"outputs\":[{\"name\":\"callGas\",\"type\":\"uint256\"},{\"name\":\"xferGas\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_mnregistry_proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// SporkRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const SporkRegistryV1Bin = `608060405234801561001057600080fd5b506040516118043803806118048339818101604052604081101561003357600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b0319918216179091556001805493909216921691909117905561178a8061007a6000396000f3fe6080604052600436106100645760003560e01c8063ce5494bb11610043578063ce5494bb146101a7578063ec556889146101e7578063fe7334e8146101fc57610064565b8062f55d9d146100cb57806362877ccd1461010d578063c00ebced14610179575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156100d757600080fd5b5061010b600480360360208110156100ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610211565b005b6101506004803603606081101561012357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604090910135166102b9565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561018557600080fd5b5061018e610512565b6040805192835260208301919091528051918290030190f35b3480156101b357600080fd5b5061010b600480360360208110156101ca57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661051f565b3480156101f357600080fd5b506101506105ad565b34801561020857600080fd5b506101506105c9565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6102a0816105aa565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600069021e19e0c9bab2400000341461033357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b621275008310156103a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d696e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b6301e1338083111561041857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d617800000000000000000000000000000000000000000000604482015290519081900360640190fd5b3384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858560405161044b906105e5565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f0801580156104a7573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b50505050509392505050565b62e4e1c0906301c9c38090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6105aa815b50565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b611163806105f38339019056fe608060405234801561001057600080fd5b50604051611163380380611163833981810160405260a081101561003357600080fd5b508051602080830151604080850151606086015160809096015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b038086169182178355428b016003556004805490941690851617835585517f8abf6077000000000000000000000000000000000000000000000000000000008152955198999698949793958895603395899589959485949093638abf607793828401939092829003018186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d602081101561011657600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561017357600080fd5b505afa158015610187573d6000803e3d6000fd5b505050506040513d60a081101561019d57600080fd5b50604081015160809091015190925090508061021a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029a57fe5b606460ff861611156102a857fe5b6008829055606460ff8616830204600955603360ff8616106102cf57600954600a556102da565b60646033830204600a555b6000600954116102e657fe5b6000600a54116102f257fe5b5050600d80546001600160a01b03199081163317909155600180546001600160a01b039b8c16908316179055600c805499909a1698169790971790975550505050505050610e1e806103456000396000f3fe6080604052600436106101755760003560e01c80637b352962116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103da578063e5225381146103ef578063fe7334e81461040457610175565b8063aec2ccae14610370578063c2472ef8146103b0578063c40a70f8146103c557610175565b80638abf6077116100b05780638abf60771461033157806391840a6b14610346578063990a663b1461035b57610175565b80637b3529621461030757806383197ef01461031c57610175565b80633d1db3e91161012d57806360f96a8f1161010757806360f96a8f146102c857806375df0f99146102dd5780637639b1eb146102f257610175565b80633d1db3e9146102755780635051a5ec1461028a57806356c2a0a1146102b357610175565b806329dcb0cf1161015e57806329dcb0cf146102415780632ded3227146102565780633ccfd60b1461026057610175565b806302d05d3f146101dc5780630b62be451461021a575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101e857600080fd5b506101f1610419565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561022657600080fd5b5061022f610435565b60408051918252519081900360200190f35b34801561024d57600080fd5b5061022f61043b565b61025e610441565b005b34801561026c57600080fd5b5061025e6104d1565b34801561028157600080fd5b5061022f61058e565b34801561029657600080fd5b5061029f610594565b604080519115158252519081900360200190f35b3480156102bf57600080fd5b5061025e6105e1565b3480156102d457600080fd5b506101f16105f4565b3480156102e957600080fd5b5061022f610610565b3480156102fe57600080fd5b5061022f610616565b34801561031357600080fd5b5061029f61061c565b34801561032857600080fd5b5061025e610646565b34801561033d57600080fd5b506101f16106e7565b34801561035257600080fd5b5061022f610703565b34801561036757600080fd5b5061022f610709565b34801561037c57600080fd5b5061029f6004803603602081101561039357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661070f565b3480156103bc57600080fd5b5061025e610724565b3480156103d157600080fd5b506101f1610737565b3480156103e657600080fd5b5061022f610753565b3480156103fb57600080fd5b5061025e610759565b34801561041057600080fd5b506101f1610aae565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60035481565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146104c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104d9610594565b61054457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f1935050505015801561058b573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105a9575060016105de565b6105b161061c565b6105bd575060006105de565b6009546007546006540110156105d5575060006105de565b50600754600654115b90565b6105e9610aca565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106335750600a5460065410155b806106415750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b600b6020526000908152604090205460ff1681565b61072c610aca565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61076161061c565b80156107725750610770610594565b155b6107dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461086357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d60208110156108f657600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d602081101561098e57600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d6020811015610bcf57600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c8157600080fd5b50608081015160a09091015160025491955091508110610d0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a723058208f0183dba91f88364a246bdee5ae404fd4f17783990d451d64ae393f180ea72d64736f6c63430005090032a265627a7a72305820ce065dacc21704951fa1b7b3dce9c9d63d8d322bbf2b34bbbe0dd544fab4f0e864736f6c63430005090032`

// DeploySporkRegistryV1 deploys a new Ethereum contract, binding an instance of SporkRegistryV1 to it.
func DeploySporkRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address) (common.Address, *types.Transaction, *SporkRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(SporkRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SporkRegistryV1Bin), backend, _proxy, _mnregistry_proxy)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SporkRegistryV1{SporkRegistryV1Caller: SporkRegistryV1Caller{contract: contract}, SporkRegistryV1Transactor: SporkRegistryV1Transactor{contract: contract}, SporkRegistryV1Filterer: SporkRegistryV1Filterer{contract: contract}}, nil
}

// SporkRegistryV1Bin is the compiled bytecode of contract after deployment.
const SporkRegistryV1RuntimeBin = `6080604052600436106100645760003560e01c8063ce5494bb11610043578063ce5494bb146101a7578063ec556889146101e7578063fe7334e8146101fc57610064565b8062f55d9d146100cb57806362877ccd1461010d578063c00ebced14610179575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156100d757600080fd5b5061010b600480360360208110156100ee57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610211565b005b6101506004803603606081101561012357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604090910135166102b9565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561018557600080fd5b5061018e610512565b6040805192835260208301919091528051918290030190f35b3480156101b357600080fd5b5061010b600480360360208110156101ca57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661051f565b3480156101f357600080fd5b506101506105ad565b34801561020857600080fd5b506101506105c9565b60005473ffffffffffffffffffffffffffffffffffffffff16331461029757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6102a0816105aa565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600069021e19e0c9bab2400000341461033357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b621275008310156103a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d696e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b6301e1338083111561041857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d617800000000000000000000000000000000000000000000604482015290519081900360640190fd5b3384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858560405161044b906105e5565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f0801580156104a7573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b50505050509392505050565b62e4e1c0906301c9c38090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105a557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6105aa815b50565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b611163806105f38339019056fe608060405234801561001057600080fd5b50604051611163380380611163833981810160405260a081101561003357600080fd5b508051602080830151604080850151606086015160809096015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b038086169182178355428b016003556004805490941690851617835585517f8abf6077000000000000000000000000000000000000000000000000000000008152955198999698949793958895603395899589959485949093638abf607793828401939092829003018186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d602081101561011657600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561017357600080fd5b505afa158015610187573d6000803e3d6000fd5b505050506040513d60a081101561019d57600080fd5b50604081015160809091015190925090508061021a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029a57fe5b606460ff861611156102a857fe5b6008829055606460ff8616830204600955603360ff8616106102cf57600954600a556102da565b60646033830204600a555b6000600954116102e657fe5b6000600a54116102f257fe5b5050600d80546001600160a01b03199081163317909155600180546001600160a01b039b8c16908316179055600c805499909a1698169790971790975550505050505050610e1e806103456000396000f3fe6080604052600436106101755760003560e01c80637b352962116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103da578063e5225381146103ef578063fe7334e81461040457610175565b8063aec2ccae14610370578063c2472ef8146103b0578063c40a70f8146103c557610175565b80638abf6077116100b05780638abf60771461033157806391840a6b14610346578063990a663b1461035b57610175565b80637b3529621461030757806383197ef01461031c57610175565b80633d1db3e91161012d57806360f96a8f1161010757806360f96a8f146102c857806375df0f99146102dd5780637639b1eb146102f257610175565b80633d1db3e9146102755780635051a5ec1461028a57806356c2a0a1146102b357610175565b806329dcb0cf1161015e57806329dcb0cf146102415780632ded3227146102565780633ccfd60b1461026057610175565b806302d05d3f146101dc5780630b62be451461021a575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101e857600080fd5b506101f1610419565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561022657600080fd5b5061022f610435565b60408051918252519081900360200190f35b34801561024d57600080fd5b5061022f61043b565b61025e610441565b005b34801561026c57600080fd5b5061025e6104d1565b34801561028157600080fd5b5061022f61058e565b34801561029657600080fd5b5061029f610594565b604080519115158252519081900360200190f35b3480156102bf57600080fd5b5061025e6105e1565b3480156102d457600080fd5b506101f16105f4565b3480156102e957600080fd5b5061022f610610565b3480156102fe57600080fd5b5061022f610616565b34801561031357600080fd5b5061029f61061c565b34801561032857600080fd5b5061025e610646565b34801561033d57600080fd5b506101f16106e7565b34801561035257600080fd5b5061022f610703565b34801561036757600080fd5b5061022f610709565b34801561037c57600080fd5b5061029f6004803603602081101561039357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661070f565b3480156103bc57600080fd5b5061025e610724565b3480156103d157600080fd5b506101f1610737565b3480156103e657600080fd5b5061022f610753565b3480156103fb57600080fd5b5061025e610759565b34801561041057600080fd5b506101f1610aae565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60035481565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146104c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104d9610594565b61054457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f1935050505015801561058b573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105a9575060016105de565b6105b161061c565b6105bd575060006105de565b6009546007546006540110156105d5575060006105de565b50600754600654115b90565b6105e9610aca565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106335750600a5460065410155b806106415750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b600b6020526000908152604090205460ff1681565b61072c610aca565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61076161061c565b80156107725750610770610594565b155b6107dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461086357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d60208110156108f657600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d602081101561098e57600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d6020811015610bcf57600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c8157600080fd5b50608081015160a09091015160025491955091508110610d0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a723058208f0183dba91f88364a246bdee5ae404fd4f17783990d451d64ae393f180ea72d64736f6c63430005090032a265627a7a72305820ce065dacc21704951fa1b7b3dce9c9d63d8d322bbf2b34bbbe0dd544fab4f0e864736f6c63430005090032`

// SporkRegistryV1 is an auto generated Go binding around an Ethereum contract.
type SporkRegistryV1 struct {
	SporkRegistryV1Caller     // Read-only binding to the contract
	SporkRegistryV1Transactor // Write-only binding to the contract
	SporkRegistryV1Filterer   // Log filterer for contract events
}

// SporkRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type SporkRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SporkRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SporkRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SporkRegistryV1Session struct {
	Contract     *SporkRegistryV1  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SporkRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SporkRegistryV1CallerSession struct {
	Contract *SporkRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SporkRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SporkRegistryV1TransactorSession struct {
	Contract     *SporkRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SporkRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type SporkRegistryV1Raw struct {
	Contract *SporkRegistryV1 // Generic contract binding to access the raw methods on
}

// SporkRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SporkRegistryV1CallerRaw struct {
	Contract *SporkRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// SporkRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SporkRegistryV1TransactorRaw struct {
	Contract *SporkRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSporkRegistryV1 creates a new instance of SporkRegistryV1, bound to a specific deployed contract.
func NewSporkRegistryV1(address common.Address, backend bind.ContractBackend) (*SporkRegistryV1, error) {
	contract, err := bindSporkRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV1{SporkRegistryV1Caller: SporkRegistryV1Caller{contract: contract}, SporkRegistryV1Transactor: SporkRegistryV1Transactor{contract: contract}, SporkRegistryV1Filterer: SporkRegistryV1Filterer{contract: contract}}, nil
}

// NewSporkRegistryV1Caller creates a new read-only instance of SporkRegistryV1, bound to a specific deployed contract.
func NewSporkRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*SporkRegistryV1Caller, error) {
	contract, err := bindSporkRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV1Caller{contract: contract}, nil
}

// NewSporkRegistryV1Transactor creates a new write-only instance of SporkRegistryV1, bound to a specific deployed contract.
func NewSporkRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*SporkRegistryV1Transactor, error) {
	contract, err := bindSporkRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV1Transactor{contract: contract}, nil
}

// NewSporkRegistryV1Filterer creates a new log filterer instance of SporkRegistryV1, bound to a specific deployed contract.
func NewSporkRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*SporkRegistryV1Filterer, error) {
	contract, err := bindSporkRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV1Filterer{contract: contract}, nil
}

// bindSporkRegistryV1 binds a generic wrapper to an already deployed contract.
func bindSporkRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SporkRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SporkRegistryV1 *SporkRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SporkRegistryV1.Contract.SporkRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SporkRegistryV1 *SporkRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.SporkRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SporkRegistryV1 *SporkRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.SporkRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SporkRegistryV1 *SporkRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SporkRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SporkRegistryV1 *SporkRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SporkRegistryV1 *SporkRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV1 *SporkRegistryV1Caller) ConsensusGasLimits(opts *bind.CallOpts) (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	ret := new(struct {
		CallGas *big.Int
		XferGas *big.Int
	})
	out := ret
	err := _SporkRegistryV1.contract.Call(opts, out, "consensusGasLimits")
	return *ret, err
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV1 *SporkRegistryV1Session) ConsensusGasLimits() (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	return _SporkRegistryV1.Contract.ConsensusGasLimits(&_SporkRegistryV1.CallOpts)
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV1 *SporkRegistryV1CallerSession) ConsensusGasLimits() (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	return _SporkRegistryV1.Contract.ConsensusGasLimits(&_SporkRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV1 *SporkRegistryV1Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV1.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV1 *SporkRegistryV1Session) MnregistryProxy() (common.Address, error) {
	return _SporkRegistryV1.Contract.MnregistryProxy(&_SporkRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV1 *SporkRegistryV1CallerSession) MnregistryProxy() (common.Address, error) {
	return _SporkRegistryV1.Contract.MnregistryProxy(&_SporkRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV1 *SporkRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV1 *SporkRegistryV1Session) Proxy() (common.Address, error) {
	return _SporkRegistryV1.Contract.Proxy(&_SporkRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV1 *SporkRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _SporkRegistryV1.Contract.Proxy(&_SporkRegistryV1.CallOpts)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV1 *SporkRegistryV1Transactor) CreateUpgradeProposal(opts *bind.TransactOpts, _impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.contract.Transact(opts, "createUpgradeProposal", _impl, _period, _fee_payer)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV1 *SporkRegistryV1Session) CreateUpgradeProposal(_impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.CreateUpgradeProposal(&_SporkRegistryV1.TransactOpts, _impl, _period, _fee_payer)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV1 *SporkRegistryV1TransactorSession) CreateUpgradeProposal(_impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.CreateUpgradeProposal(&_SporkRegistryV1.TransactOpts, _impl, _period, _fee_payer)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV1 *SporkRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV1 *SporkRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.Destroy(&_SporkRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV1 *SporkRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.Destroy(&_SporkRegistryV1.TransactOpts, _newImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV1 *SporkRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV1 *SporkRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.Migrate(&_SporkRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV1 *SporkRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV1.Contract.Migrate(&_SporkRegistryV1.TransactOpts, _oldImpl)
}
