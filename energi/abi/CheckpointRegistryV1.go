// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CheckpointRegistryV1ABI is the input ABI used to generate the binding from.
const CheckpointRegistryV1ABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"checkpoint\",\"type\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"propose\",\"outputs\":[{\"name\":\"checkpoint\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkpoints\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CPP_signer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_proxy\",\"type\":\"address\"},{\"name\":\"_mnregistry_proxy\",\"type\":\"address\"},{\"name\":\"_cpp_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// CheckpointRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const CheckpointRegistryV1Bin = `60806040523480156200001157600080fd5b5060405162002103380380620021038339810160408190526200003491620000eb565b600080546001600160a01b0319166001600160a01b0385161790556040516200005d90620000bd565b604051809103906000f0801580156200007a573d6000803e3d6000fd5b50600180546001600160a01b03199081166001600160a01b039384161790915560028054821694831694909417909355600380549093169116179055506200018a565b6105c88062001b3b83390190565b8051620000d88162000165565b92915050565b8051620000d8816200017f565b6000806000606084860312156200010157600080fd5b60006200010f8686620000cb565b93505060206200012286828701620000de565b92505060406200013586828701620000cb565b9150509250925092565b6000620000d88262000159565b6000620000d8826200013f565b6001600160a01b031690565b62000170816200013f565b81146200017c57600080fd5b50565b62000170816200014c565b6119a1806200019a6000396000f3fe6080604052600436106100955760003560e01c80635a48c0b011610069578063d59f17581161004e578063d59f17581461019f578063ec556889146101c1578063fe7334e8146101d657610095565b80635a48c0b01461015d578063ce5494bb1461017f57610095565b8062f55d9d146100d05780632d059305146100f257806351fae9591461011d578063525835211461013d575b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a5c565b60405180910390fd5b3480156100dc57600080fd5b506100f06100eb366004610811565b6101eb565b005b3480156100fe57600080fd5b5061010761025e565b6040516101149190610a06565b60405180910390f35b34801561012957600080fd5b506100f06101383660046107bb565b61027a565b34801561014957600080fd5b5061010761015836600461082f565b610305565b34801561016957600080fd5b5061017261045a565b60405161011491906109dc565b34801561018b57600080fd5b506100f061019a366004610811565b610525565b3480156101ab57600080fd5b506101b461057e565b60405161011491906109ce565b3480156101cd57600080fd5b506101b461059a565b3480156101e257600080fd5b506101076105b6565b60005473ffffffffffffffffffffffffffffffffffffffff16331461023c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a4c565b610245816105d2565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6040517f76cd7cbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906376cd7cbc906102ce90859085906004016109f4565b600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b50505050505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff1661032961065d565b73ffffffffffffffffffffffffffffffffffffffff1614610376576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a3c565b60025460405173ffffffffffffffffffffffffffffffffffffffff90911690849084906103a29061068c565b6103ae93929190610a14565b604051809103906000f0801580156103ca573d6000803e3d6000fd5b506001546040517f0a3b0a4f00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff1690630a3b0a4f90610422908490600401610a06565b600060405180830381600087803b15801561043c57600080fd5b505af1158015610450573d6000803e3d6000fd5b5050505092915050565b600154604080517fd9592ead000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163d9592ead916004808301926000929190829003018186803b1580156104c557600080fd5b505afa1580156104d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261051f919081019061077e565b90505b90565b60005473ffffffffffffffffffffffffffffffffffffffff163314610576576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a4c565b61057b815b50565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6001546040517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906313af403590610628908490600401610a06565b600060405180830381600087803b15801561064257600080fd5b505af1158015610656573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16331415610685575032610522565b5033610522565b610e1780610b4883390190565b600082601f8301126106aa57600080fd5b81516106bd6106b882610a93565b610a6c565b915081818352602084019350602081019050838560208402820111156106e257600080fd5b60005b8381101561045057816106f88882610773565b84525060209283019291909101906001016106e5565b803561071981610b2a565b92915050565b60008083601f84011261073157600080fd5b50813567ffffffffffffffff81111561074957600080fd5b60208301915083600182028301111561076157600080fd5b9250929050565b803561071981610b3e565b805161071981610b3e565b60006020828403121561079057600080fd5b815167ffffffffffffffff8111156107a757600080fd5b6107b384828501610699565b949350505050565b6000806000604084860312156107d057600080fd5b60006107dc8686610768565b935050602084013567ffffffffffffffff8111156107f957600080fd5b6108058682870161071f565b92509250509250925092565b60006020828403121561082357600080fd5b60006107b38484610768565b6000806040838503121561084257600080fd5b600061084e858561070e565b925050602061085f8582860161070e565b9150509250929050565b6000610875838361091a565b505060200190565b61088681610ac7565b82525050565b600061089782610aba565b6108a18185610abe565b93506108ac83610ab4565b8060005b838110156108da5781516108c48882610869565b97506108cf83610ab4565b9250506001016108b0565b509495945050505050565b61088681610522565b60006108fa8385610abe565b9350610907838584610af6565b61091083610b02565b9093019392505050565b61088681610ad2565b6000610930600e83610abe565b7f496e76616c69642063616c6c6572000000000000000000000000000000000000815260200192915050565b6000610969600983610abe565b7f4e6f742070726f78790000000000000000000000000000000000000000000000815260200192915050565b60006109a2600d83610abe565b7f4e6f7420737570706f7274656400000000000000000000000000000000000000815260200192915050565b60208101610719828461087d565b602080825281016109ed818461088c565b9392505050565b602080825281016107b38184866108ee565b60208101610719828461091a565b60608101610a22828661091a565b610a2f60208301856108e5565b6107b360408301846108e5565b6020808252810161071981610923565b602080825281016107198161095c565b6020808252810161071981610995565b60405181810167ffffffffffffffff81118282101715610a8b57600080fd5b604052919050565b600067ffffffffffffffff821115610aaa57600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b600061071982610add565b600061071982610ac7565b73ffffffffffffffffffffffffffffffffffffffff1690565b82818337506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b610b3381610522565b811461057b57600080fd5b610b3381610ad256fe60806040523480156200001157600080fd5b5060405162000e1738038062000e17833981016040819052620000349162000085565b600080546001600160a01b0319166001600160a01b0394909416939093179092554360015560025560035562000127565b8051620000728162000102565b92915050565b805162000072816200011c565b6000806000606084860312156200009b57600080fd5b6000620000a9868662000078565b9350506020620000bc8682870162000065565b9250506040620000cf8682870162000065565b9150509250925092565b60006200007282620000f6565b90565b60006200007282620000d9565b6001600160a01b031690565b6200010d81620000e6565b81146200011957600080fd5b50565b6200010d81620000e9565b610ce080620001376000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806376cd7cbc1161005057806376cd7cbc146100ab578063be9a6555146100c0578063f27959c7146100d557610067565b80632bbe2c881461006c578063370158ea14610095575b600080fd5b61007f61007a36600461080a565b6100ea565b60405161008c9190610b3c565b60405180910390f35b61009d61021c565b60405161008c929190610bab565b6100be6100b9366004610888565b610226565b005b6100c8610589565b60405161008c9190610b9d565b6100dd61058f565b60405161008c9190610aed565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205460609080610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b7d565b60405180910390fd5b6005600182038154811061016357fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018716150201909416939093049283018590048502810185019091528181529283018282801561020f5780601f106101e45761010080835404028352916020019161020f565b820191906000526020600020905b8154815290600101906020018083116101f257829003601f168201915b5050505050915050919050565b6002546003549091565b6105a0600154430310610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b4d565b6041811461029f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b8d565b6000806102ae8385018561084e565b9150915060006001600354868660408181106102c657fe5b6040805160008152602001908190526102ec94939091013560f81c915087908790610afe565b6020604051602081039080840390855afa15801561030e573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff8116600090815260046020529190912054909250159050610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b5d565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061043a91908101906108ca565b6040517f9f8a13d700000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff821690639f8a13d79061048f908590600401610adf565b60206040518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104df9190810190610830565b610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b6d565b6005805460018101808355600092909252610553907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00188886106d6565b505060055473ffffffffffffffffffffffffffffffffffffffff9092166000908152600460205260409020919091555050505050565b60015481565b600554604080518281526020808402820101909152606091908180156105c957816020015b60608152602001906001900390816105b45790505b509150805b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190156106d1576005818154811061060457fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b50505050508382815181106106c157fe5b60200260200101819052506105ce565b505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610735578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610762565b82800160010185558215610762579182015b82811115610762578235825591602001919060010190610747565b5061076e929150610772565b5090565b61078c91905b8082111561076e5760008155600101610778565b90565b803561079a81610c6b565b92915050565b805161079a81610c82565b803561079a81610c8b565b60008083601f8401126107c857600080fd5b50813567ffffffffffffffff8111156107e057600080fd5b6020830191508360018202830111156107f857600080fd5b9250929050565b805161079a81610c94565b60006020828403121561081c57600080fd5b6000610828848461078f565b949350505050565b60006020828403121561084257600080fd5b600061082884846107a0565b6000806040838503121561086157600080fd5b600061086d85856107ab565b925050602061087e858286016107ab565b9150509250929050565b6000806020838503121561089b57600080fd5b823567ffffffffffffffff8111156108b257600080fd5b6108be858286016107b6565b92509250509250929050565b6000602082840312156108dc57600080fd5b600061082884846107ff565b60006108f48383610981565b9392505050565b61090481610bd9565b82525050565b600061091582610bcc565b61091f8185610bd0565b93508360208202850161093185610bc6565b8060005b8581101561096b578484038952815161094e85826108e8565b945061095983610bc6565b60209a909a0199925050600101610935565b5091979650505050505050565b6109048161078c565b600061098c82610bcc565b6109968185610bd0565b93506109a6818560208601610c13565b6109af81610c43565b9093019392505050565b60006109c6601183610bd0565b7f5369676e696e672068617320656e646564000000000000000000000000000000815260200192915050565b60006109ff600e83610bd0565b7f416c7265616479207369676e6564000000000000000000000000000000000000815260200192915050565b6000610a38600d83610bd0565b7f4e6f7420616374697665204d4e00000000000000000000000000000000000000815260200192915050565b6000610a71600e83610bd0565b7f4e6f74207369676e656420796574000000000000000000000000000000000000815260200192915050565b6000610aaa601883610bd0565b7f496e76616c6964207369676e6174757265206c656e6774680000000000000000815260200192915050565b61090481610c0d565b6020810161079a82846108fb565b602080825281016108f4818461090a565b60808101610b0c8287610978565b610b196020830186610ad6565b610b266040830185610978565b610b336060830184610978565b95945050505050565b602080825281016108f48184610981565b6020808252810161079a816109b9565b6020808252810161079a816109f2565b6020808252810161079a81610a2b565b6020808252810161079a81610a64565b6020808252810161079a81610a9d565b6020810161079a8284610978565b60408101610bb98285610978565b6108f46020830184610978565b60200190565b5190565b90815260200190565b600061079a82610bf4565b151590565b600061079a82610bd9565b73ffffffffffffffffffffffffffffffffffffffff1690565b60ff1690565b60005b83811015610c2e578181015183820152602001610c16565b83811115610c3d576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b610c7481610bd9565b8114610c7f57600080fd5b50565b610c7481610be4565b610c748161078c565b610c7481610be956fea365627a7a72305820b950697abfcb681050d7e6a31a46890ceeb794e18e923e1bdf04aa2cbfcd8c156c6578706572696d656e74616cf564736f6c634300050a0040a365627a7a7230582076d56aa07c259fa52866874c0bbf08dea9146640af23a50db30adb480c93325c6c6578706572696d656e74616cf564736f6c634300050a00406080604052600080546001600160a01b031916331790556105a3806100256000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806341c0e1b51161005057806341c0e1b514610094578063b8a242521461009c578063d9592ead146100c557610067565b80630a3b0a4f1461006c57806313af403514610081575b600080fd5b61007f61007a3660046103cc565b6100da565b005b61007f61008f3660046103cc565b6101aa565b61007f610242565b6100af6100aa3660046103f2565b610296565b6040516100bc91906104dd565b60405180910390f35b6100cd6102ca565b6040516100bc91906104c5565b60005473ffffffffffffffffffffffffffffffffffffffff163314610134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012b906104eb565b60405180910390fd5b6001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012b906104eb565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012b906104eb565b33ff5b600181815481106102a357fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600154604080518281526020808402820101909152606091908180156102fa578160200160208202803883390190505b509150805b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190156103ab576001818154811061033557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683828151811061036c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506102ff565b505090565b80356103bb81610540565b92915050565b80356103bb81610557565b6000602082840312156103de57600080fd5b60006103ea84846103b0565b949350505050565b60006020828403121561040457600080fd5b60006103ea84846103c1565b600061041c838361047d565b505060200190565b600061042f82610501565b6104398185610505565b9350610444836104fb565b8060005b8381101561047257815161045c8882610410565b9750610467836104fb565b925050600101610448565b509495945050505050565b61048681610519565b82525050565b6000610499600a83610505565b7f4e6f74206f776e65722100000000000000000000000000000000000000000000815260200192915050565b602080825281016104d68184610424565b9392505050565b602081016103bb828461047d565b602080825281016103bb8161048c565b60200190565b5190565b90815260200190565b60006103bb82610524565b60006103bb8261050e565b73ffffffffffffffffffffffffffffffffffffffff1690565b90565b61054981610519565b811461055457600080fd5b50565b6105498161053d56fea365627a7a723058201982260886df73dabaa85d54786e692c434166ef914f3886fba4f99f54500a996c6578706572696d656e74616cf564736f6c634300050a0040`

// DeployCheckpointRegistryV1 deploys a new Ethereum contract, binding an instance of CheckpointRegistryV1 to it.
func DeployCheckpointRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address, _cpp_signer common.Address) (common.Address, *types.Transaction, *CheckpointRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(CheckpointRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CheckpointRegistryV1Bin), backend, _proxy, _mnregistry_proxy, _cpp_signer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CheckpointRegistryV1{CheckpointRegistryV1Caller: CheckpointRegistryV1Caller{contract: contract}, CheckpointRegistryV1Transactor: CheckpointRegistryV1Transactor{contract: contract}, CheckpointRegistryV1Filterer: CheckpointRegistryV1Filterer{contract: contract}}, nil
}

// CheckpointRegistryV1Bin is the compiled bytecode of contract after deployment.
const CheckpointRegistryV1RuntimeBin = `6080604052600436106100955760003560e01c80635a48c0b011610069578063d59f17581161004e578063d59f17581461019f578063ec556889146101c1578063fe7334e8146101d657610095565b80635a48c0b01461015d578063ce5494bb1461017f57610095565b8062f55d9d146100d05780632d059305146100f257806351fae9591461011d578063525835211461013d575b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a5c565b60405180910390fd5b3480156100dc57600080fd5b506100f06100eb366004610811565b6101eb565b005b3480156100fe57600080fd5b5061010761025e565b6040516101149190610a06565b60405180910390f35b34801561012957600080fd5b506100f06101383660046107bb565b61027a565b34801561014957600080fd5b5061010761015836600461082f565b610305565b34801561016957600080fd5b5061017261045a565b60405161011491906109dc565b34801561018b57600080fd5b506100f061019a366004610811565b610525565b3480156101ab57600080fd5b506101b461057e565b60405161011491906109ce565b3480156101cd57600080fd5b506101b461059a565b3480156101e257600080fd5b506101076105b6565b60005473ffffffffffffffffffffffffffffffffffffffff16331461023c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a4c565b610245816105d2565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6040517f76cd7cbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906376cd7cbc906102ce90859085906004016109f4565b600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b50505050505050565b60035460009073ffffffffffffffffffffffffffffffffffffffff1661032961065d565b73ffffffffffffffffffffffffffffffffffffffff1614610376576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a3c565b60025460405173ffffffffffffffffffffffffffffffffffffffff90911690849084906103a29061068c565b6103ae93929190610a14565b604051809103906000f0801580156103ca573d6000803e3d6000fd5b506001546040517f0a3b0a4f00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff1690630a3b0a4f90610422908490600401610a06565b600060405180830381600087803b15801561043c57600080fd5b505af1158015610450573d6000803e3d6000fd5b5050505092915050565b600154604080517fd9592ead000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163d9592ead916004808301926000929190829003018186803b1580156104c557600080fd5b505afa1580156104d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261051f919081019061077e565b90505b90565b60005473ffffffffffffffffffffffffffffffffffffffff163314610576576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100c790610a4c565b61057b815b50565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6001546040517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906313af403590610628908490600401610a06565b600060405180830381600087803b15801561064257600080fd5b505af1158015610656573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff16331415610685575032610522565b5033610522565b610e1780610b4883390190565b600082601f8301126106aa57600080fd5b81516106bd6106b882610a93565b610a6c565b915081818352602084019350602081019050838560208402820111156106e257600080fd5b60005b8381101561045057816106f88882610773565b84525060209283019291909101906001016106e5565b803561071981610b2a565b92915050565b60008083601f84011261073157600080fd5b50813567ffffffffffffffff81111561074957600080fd5b60208301915083600182028301111561076157600080fd5b9250929050565b803561071981610b3e565b805161071981610b3e565b60006020828403121561079057600080fd5b815167ffffffffffffffff8111156107a757600080fd5b6107b384828501610699565b949350505050565b6000806000604084860312156107d057600080fd5b60006107dc8686610768565b935050602084013567ffffffffffffffff8111156107f957600080fd5b6108058682870161071f565b92509250509250925092565b60006020828403121561082357600080fd5b60006107b38484610768565b6000806040838503121561084257600080fd5b600061084e858561070e565b925050602061085f8582860161070e565b9150509250929050565b6000610875838361091a565b505060200190565b61088681610ac7565b82525050565b600061089782610aba565b6108a18185610abe565b93506108ac83610ab4565b8060005b838110156108da5781516108c48882610869565b97506108cf83610ab4565b9250506001016108b0565b509495945050505050565b61088681610522565b60006108fa8385610abe565b9350610907838584610af6565b61091083610b02565b9093019392505050565b61088681610ad2565b6000610930600e83610abe565b7f496e76616c69642063616c6c6572000000000000000000000000000000000000815260200192915050565b6000610969600983610abe565b7f4e6f742070726f78790000000000000000000000000000000000000000000000815260200192915050565b60006109a2600d83610abe565b7f4e6f7420737570706f7274656400000000000000000000000000000000000000815260200192915050565b60208101610719828461087d565b602080825281016109ed818461088c565b9392505050565b602080825281016107b38184866108ee565b60208101610719828461091a565b60608101610a22828661091a565b610a2f60208301856108e5565b6107b360408301846108e5565b6020808252810161071981610923565b602080825281016107198161095c565b6020808252810161071981610995565b60405181810167ffffffffffffffff81118282101715610a8b57600080fd5b604052919050565b600067ffffffffffffffff821115610aaa57600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b600061071982610add565b600061071982610ac7565b73ffffffffffffffffffffffffffffffffffffffff1690565b82818337506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b610b3381610522565b811461057b57600080fd5b610b3381610ad256fe60806040523480156200001157600080fd5b5060405162000e1738038062000e17833981016040819052620000349162000085565b600080546001600160a01b0319166001600160a01b0394909416939093179092554360015560025560035562000127565b8051620000728162000102565b92915050565b805162000072816200011c565b6000806000606084860312156200009b57600080fd5b6000620000a9868662000078565b9350506020620000bc8682870162000065565b9250506040620000cf8682870162000065565b9150509250925092565b60006200007282620000f6565b90565b60006200007282620000d9565b6001600160a01b031690565b6200010d81620000e6565b81146200011957600080fd5b50565b6200010d81620000e9565b610ce080620001376000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806376cd7cbc1161005057806376cd7cbc146100ab578063be9a6555146100c0578063f27959c7146100d557610067565b80632bbe2c881461006c578063370158ea14610095575b600080fd5b61007f61007a36600461080a565b6100ea565b60405161008c9190610b3c565b60405180910390f35b61009d61021c565b60405161008c929190610bab565b6100be6100b9366004610888565b610226565b005b6100c8610589565b60405161008c9190610b9d565b6100dd61058f565b60405161008c9190610aed565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205460609080610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b7d565b60405180910390fd5b6005600182038154811061016357fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018716150201909416939093049283018590048502810185019091528181529283018282801561020f5780601f106101e45761010080835404028352916020019161020f565b820191906000526020600020905b8154815290600101906020018083116101f257829003601f168201915b5050505050915050919050565b6002546003549091565b6105a0600154430310610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b4d565b6041811461029f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b8d565b6000806102ae8385018561084e565b9150915060006001600354868660408181106102c657fe5b6040805160008152602001908190526102ec94939091013560f81c915087908790610afe565b6020604051602081039080840390855afa15801561030e573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff8116600090815260046020529190912054909250159050610399576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b5d565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061043a91908101906108ca565b6040517f9f8a13d700000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff821690639f8a13d79061048f908590600401610adf565b60206040518083038186803b1580156104a757600080fd5b505afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104df9190810190610830565b610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a90610b6d565b6005805460018101808355600092909252610553907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00188886106d6565b505060055473ffffffffffffffffffffffffffffffffffffffff9092166000908152600460205260409020919091555050505050565b60015481565b600554604080518281526020808402820101909152606091908180156105c957816020015b60608152602001906001900390816105b45790505b509150805b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190156106d1576005818154811061060457fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156106b05780601f10610685576101008083540402835291602001916106b0565b820191906000526020600020905b81548152906001019060200180831161069357829003601f168201915b50505050508382815181106106c157fe5b60200260200101819052506105ce565b505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610735578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610762565b82800160010185558215610762579182015b82811115610762578235825591602001919060010190610747565b5061076e929150610772565b5090565b61078c91905b8082111561076e5760008155600101610778565b90565b803561079a81610c6b565b92915050565b805161079a81610c82565b803561079a81610c8b565b60008083601f8401126107c857600080fd5b50813567ffffffffffffffff8111156107e057600080fd5b6020830191508360018202830111156107f857600080fd5b9250929050565b805161079a81610c94565b60006020828403121561081c57600080fd5b6000610828848461078f565b949350505050565b60006020828403121561084257600080fd5b600061082884846107a0565b6000806040838503121561086157600080fd5b600061086d85856107ab565b925050602061087e858286016107ab565b9150509250929050565b6000806020838503121561089b57600080fd5b823567ffffffffffffffff8111156108b257600080fd5b6108be858286016107b6565b92509250509250929050565b6000602082840312156108dc57600080fd5b600061082884846107ff565b60006108f48383610981565b9392505050565b61090481610bd9565b82525050565b600061091582610bcc565b61091f8185610bd0565b93508360208202850161093185610bc6565b8060005b8581101561096b578484038952815161094e85826108e8565b945061095983610bc6565b60209a909a0199925050600101610935565b5091979650505050505050565b6109048161078c565b600061098c82610bcc565b6109968185610bd0565b93506109a6818560208601610c13565b6109af81610c43565b9093019392505050565b60006109c6601183610bd0565b7f5369676e696e672068617320656e646564000000000000000000000000000000815260200192915050565b60006109ff600e83610bd0565b7f416c7265616479207369676e6564000000000000000000000000000000000000815260200192915050565b6000610a38600d83610bd0565b7f4e6f7420616374697665204d4e00000000000000000000000000000000000000815260200192915050565b6000610a71600e83610bd0565b7f4e6f74207369676e656420796574000000000000000000000000000000000000815260200192915050565b6000610aaa601883610bd0565b7f496e76616c6964207369676e6174757265206c656e6774680000000000000000815260200192915050565b61090481610c0d565b6020810161079a82846108fb565b602080825281016108f4818461090a565b60808101610b0c8287610978565b610b196020830186610ad6565b610b266040830185610978565b610b336060830184610978565b95945050505050565b602080825281016108f48184610981565b6020808252810161079a816109b9565b6020808252810161079a816109f2565b6020808252810161079a81610a2b565b6020808252810161079a81610a64565b6020808252810161079a81610a9d565b6020810161079a8284610978565b60408101610bb98285610978565b6108f46020830184610978565b60200190565b5190565b90815260200190565b600061079a82610bf4565b151590565b600061079a82610bd9565b73ffffffffffffffffffffffffffffffffffffffff1690565b60ff1690565b60005b83811015610c2e578181015183820152602001610c16565b83811115610c3d576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b610c7481610bd9565b8114610c7f57600080fd5b50565b610c7481610be4565b610c748161078c565b610c7481610be956fea365627a7a72305820b950697abfcb681050d7e6a31a46890ceeb794e18e923e1bdf04aa2cbfcd8c156c6578706572696d656e74616cf564736f6c634300050a0040a365627a7a7230582076d56aa07c259fa52866874c0bbf08dea9146640af23a50db30adb480c93325c6c6578706572696d656e74616cf564736f6c634300050a0040`

// CheckpointRegistryV1 is an auto generated Go binding around an Ethereum contract.
type CheckpointRegistryV1 struct {
	CheckpointRegistryV1Caller     // Read-only binding to the contract
	CheckpointRegistryV1Transactor // Write-only binding to the contract
	CheckpointRegistryV1Filterer   // Log filterer for contract events
}

// CheckpointRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type CheckpointRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckpointRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type CheckpointRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckpointRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CheckpointRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckpointRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CheckpointRegistryV1Session struct {
	Contract     *CheckpointRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CheckpointRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CheckpointRegistryV1CallerSession struct {
	Contract *CheckpointRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// CheckpointRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CheckpointRegistryV1TransactorSession struct {
	Contract     *CheckpointRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// CheckpointRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type CheckpointRegistryV1Raw struct {
	Contract *CheckpointRegistryV1 // Generic contract binding to access the raw methods on
}

// CheckpointRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CheckpointRegistryV1CallerRaw struct {
	Contract *CheckpointRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// CheckpointRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CheckpointRegistryV1TransactorRaw struct {
	Contract *CheckpointRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewCheckpointRegistryV1 creates a new instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1(address common.Address, backend bind.ContractBackend) (*CheckpointRegistryV1, error) {
	contract, err := bindCheckpointRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1{CheckpointRegistryV1Caller: CheckpointRegistryV1Caller{contract: contract}, CheckpointRegistryV1Transactor: CheckpointRegistryV1Transactor{contract: contract}, CheckpointRegistryV1Filterer: CheckpointRegistryV1Filterer{contract: contract}}, nil
}

// NewCheckpointRegistryV1Caller creates a new read-only instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*CheckpointRegistryV1Caller, error) {
	contract, err := bindCheckpointRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1Caller{contract: contract}, nil
}

// NewCheckpointRegistryV1Transactor creates a new write-only instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*CheckpointRegistryV1Transactor, error) {
	contract, err := bindCheckpointRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1Transactor{contract: contract}, nil
}

// NewCheckpointRegistryV1Filterer creates a new log filterer instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*CheckpointRegistryV1Filterer, error) {
	contract, err := bindCheckpointRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1Filterer{contract: contract}, nil
}

// bindCheckpointRegistryV1 binds a generic wrapper to an already deployed contract.
func bindCheckpointRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CheckpointRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CheckpointRegistryV1 *CheckpointRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CheckpointRegistryV1.Contract.CheckpointRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CheckpointRegistryV1 *CheckpointRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.CheckpointRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CheckpointRegistryV1 *CheckpointRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.CheckpointRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CheckpointRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// CPPSigner is a free data retrieval call binding the contract method 0xd59f1758.
//
// Solidity: function CPP_signer() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) CPPSigner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "CPP_signer")
	return *ret0, err
}

// CPPSigner is a free data retrieval call binding the contract method 0xd59f1758.
//
// Solidity: function CPP_signer() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) CPPSigner() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.CPPSigner(&_CheckpointRegistryV1.CallOpts)
}

// CPPSigner is a free data retrieval call binding the contract method 0xd59f1758.
//
// Solidity: function CPP_signer() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) CPPSigner() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.CPPSigner(&_CheckpointRegistryV1.CallOpts)
}

// Checkpoints is a free data retrieval call binding the contract method 0x5a48c0b0.
//
// Solidity: function checkpoints() constant returns(address[])
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) Checkpoints(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "checkpoints")
	return *ret0, err
}

// Checkpoints is a free data retrieval call binding the contract method 0x5a48c0b0.
//
// Solidity: function checkpoints() constant returns(address[])
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Checkpoints() ([]common.Address, error) {
	return _CheckpointRegistryV1.Contract.Checkpoints(&_CheckpointRegistryV1.CallOpts)
}

// Checkpoints is a free data retrieval call binding the contract method 0x5a48c0b0.
//
// Solidity: function checkpoints() constant returns(address[])
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) Checkpoints() ([]common.Address, error) {
	return _CheckpointRegistryV1.Contract.Checkpoints(&_CheckpointRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) MnregistryProxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.MnregistryProxy(&_CheckpointRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) MnregistryProxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.MnregistryProxy(&_CheckpointRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Proxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.Proxy(&_CheckpointRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.Proxy(&_CheckpointRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) V1storage() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.V1storage(&_CheckpointRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.V1storage(&_CheckpointRegistryV1.CallOpts)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Destroy(&_CheckpointRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Destroy(&_CheckpointRegistryV1.TransactOpts, _newImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Migrate(&_CheckpointRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Migrate(&_CheckpointRegistryV1.TransactOpts, _oldImpl)
}

// Propose is a paid mutator transaction binding the contract method 0x52583521.
//
// Solidity: function propose(uint256 number, bytes32 hash) returns(address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Propose(opts *bind.TransactOpts, number *big.Int, hash [32]byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "propose", number, hash)
}

// Propose is a paid mutator transaction binding the contract method 0x52583521.
//
// Solidity: function propose(uint256 number, bytes32 hash) returns(address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Propose(number *big.Int, hash [32]byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Propose(&_CheckpointRegistryV1.TransactOpts, number, hash)
}

// Propose is a paid mutator transaction binding the contract method 0x52583521.
//
// Solidity: function propose(uint256 number, bytes32 hash) returns(address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Propose(number *big.Int, hash [32]byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Propose(&_CheckpointRegistryV1.TransactOpts, number, hash)
}

// Sign is a paid mutator transaction binding the contract method 0x51fae959.
//
// Solidity: function sign(address checkpoint, bytes signature) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Sign(opts *bind.TransactOpts, checkpoint common.Address, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "sign", checkpoint, signature)
}

// Sign is a paid mutator transaction binding the contract method 0x51fae959.
//
// Solidity: function sign(address checkpoint, bytes signature) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Sign(checkpoint common.Address, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Sign(&_CheckpointRegistryV1.TransactOpts, checkpoint, signature)
}

// Sign is a paid mutator transaction binding the contract method 0x51fae959.
//
// Solidity: function sign(address checkpoint, bytes signature) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Sign(checkpoint common.Address, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Sign(&_CheckpointRegistryV1.TransactOpts, checkpoint, signature)
}
