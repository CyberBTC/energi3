// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CheckpointRegistryV1ABI is the input ABI used to generate the binding from.
const CheckpointRegistryV1ABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"internalType\":\"contractStorageCheckpointRegistryV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractICheckpoint\",\"name\":\"checkpoint\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"contractICheckpoint[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"signatureBase\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sigbase\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"contractICheckpoint\",\"name\":\"checkpoint\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CPP_signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_mnregistry_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cpp_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contractICheckpoint\",\"name\":\"checkpoint\",\"type\":\"address\"}],\"name\":\"Checkpoint\",\"type\":\"event\"}]"

// CheckpointRegistryV1Bin is the compiled bytecode used for deploying new contracts.
const CheckpointRegistryV1Bin = ``

// DeployCheckpointRegistryV1 deploys a new Ethereum contract, binding an instance of CheckpointRegistryV1 to it.
func DeployCheckpointRegistryV1(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address, _cpp_signer common.Address) (common.Address, *types.Transaction, *CheckpointRegistryV1, error) {
	parsed, err := abi.JSON(strings.NewReader(CheckpointRegistryV1ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CheckpointRegistryV1Bin), backend, _proxy, _mnregistry_proxy, _cpp_signer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CheckpointRegistryV1{CheckpointRegistryV1Caller: CheckpointRegistryV1Caller{contract: contract}, CheckpointRegistryV1Transactor: CheckpointRegistryV1Transactor{contract: contract}, CheckpointRegistryV1Filterer: CheckpointRegistryV1Filterer{contract: contract}}, nil
}

// CheckpointRegistryV1Bin is the compiled bytecode of contract after deployment.
const CheckpointRegistryV1RuntimeBin = `608060405260043610620000c15760003560e01c8063c20fa2ee1162000073578063d59f17581162000055578063d59f1758146200021f578063ec5568891462000246578063fe7334e8146200025e57620000c1565b8063c20fa2ee14620001d5578063ce5494bb14620001fa57620000c1565b806351fae95911620000a957806351fae95914620001555780635a48c0b0146200017a578063851f220914620001a157620000c1565b8062f55d9d14620000fe5780632d0593051462000125575b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f59062000e27565b60405180910390fd5b3480156200010b57600080fd5b50620001236200011d36600462000a2c565b62000276565b005b3480156200013257600080fd5b506200013d620002ee565b6040516200014c919062000dc2565b60405180910390f35b3480156200016257600080fd5b506200012362000174366004620009d0565b6200030a565b3480156200018757600080fd5b506200019262000399565b6040516200014c919062000d1f565b348015620001ae57600080fd5b50620001c6620001c036600462000991565b62000467565b6040516200014c919062000d39565b348015620001e257600080fd5b506200013d620001f436600462000a4d565b6200049c565b3480156200020757600080fd5b50620001236200021936600462000a2c565b62000700565b3480156200022c57600080fd5b50620002376200075d565b6040516200014c919062000d0f565b3480156200025357600080fd5b506200023762000779565b3480156200026b57600080fd5b506200013d62000795565b60005473ffffffffffffffffffffffffffffffffffffffff163314620002ca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f59062000df1565b620002d581620007b1565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6040517f76cd7cbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906376cd7cbc9062000360908590859060040162000dae565b600060405180830381600087803b1580156200037b57600080fd5b505af115801562000390573d6000803e3d6000fd5b50505050505050565b600154604080517fd9592ead000000000000000000000000000000000000000000000000000000008152905160609273ffffffffffffffffffffffffffffffffffffffff169163d9592ead916004808301926000929190829003018186803b1580156200040557600080fd5b505afa1580156200041a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405262000462919081019062000950565b905090565b600082826040516020016200047e92919062000cd8565b60405160208183030381529060405280519060200120905092915050565b600080620004ab868662000467565b905060418314620004ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f59062000e15565b600080620004fb8587018762000991565b600354919350915073ffffffffffffffffffffffffffffffffffffffff16600184888860408181106200052a57fe5b6040805160008152602001908190526200055294939091013560f81c91508790879062000d68565b6020604051602081039080840390855afa15801562000575573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1614620005cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f59062000e03565b60025460405173ffffffffffffffffffffffffffffffffffffffff90911690899089908690620005ff9062000840565b6200060e949392919062000dd2565b604051809103906000f0801580156200062b573d6000803e3d6000fd5b506001546040517f0a3b0a4f00000000000000000000000000000000000000000000000000000000815291955073ffffffffffffffffffffffffffffffffffffffff1690630a3b0a4f906200068590879060040162000dc2565b600060405180830381600087803b158015620006a057600080fd5b505af1158015620006b5573d6000803e3d6000fd5b50505050877f7f582e7a234c68b135245365b0c69d608f9235392a1ef801b46f04ca5d6cdad48886604051620006ed92919062000d49565b60405180910390a2505050949350505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331462000754576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f59062000df1565b6200075a815b50565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b6001546040517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906313af4035906200080990849060040162000dc2565b600060405180830381600087803b1580156200082457600080fd5b505af115801562000839573d6000803e3d6000fd5b5050505050565b610e458062000f2e83390190565b600082601f8301126200086057600080fd5b815162000877620008718262000e61565b62000e39565b915081818352602084019350602081019050838560208402820111156200089d57600080fd5b60005b83811015620008cd5781620008b6888262000943565b8452506020928301929190910190600101620008a0565b5050505092915050565b8035620008e48162000f0b565b92915050565b60008083601f840112620008fd57600080fd5b50813567ffffffffffffffff8111156200091657600080fd5b6020830191508360018202830111156200092f57600080fd5b9250929050565b8035620008e48162000f22565b8051620008e48162000f22565b6000602082840312156200096357600080fd5b815167ffffffffffffffff8111156200097b57600080fd5b62000989848285016200084e565b949350505050565b60008060408385031215620009a557600080fd5b6000620009b38585620008d7565b9250506020620009c685828601620008d7565b9150509250929050565b600080600060408486031215620009e657600080fd5b6000620009f4868662000936565b935050602084013567ffffffffffffffff81111562000a1257600080fd5b62000a2086828701620008ea565b92509250509250925092565b60006020828403121562000a3f57600080fd5b600062000989848462000936565b6000806000806060858703121562000a6457600080fd5b600062000a728787620008d7565b945050602062000a8587828801620008d7565b935050604085013567ffffffffffffffff81111562000aa357600080fd5b62000ab187828801620008ea565b95989497509550505050565b600062000acb838362000b9b565b505060200190565b62000ade8162000e9b565b82525050565b600062000af18262000e89565b62000afd818562000e8d565b935062000b0a8362000e83565b8060005b8381101562000b3e57815162000b25888262000abd565b975062000b328362000e83565b92505060010162000b0e565b509495945050505050565b62000ade8162000ea8565b62000ade62000b638262000ea8565b62000ea8565b600062000b77838562000e8d565b935062000b8683858462000ed7565b62000b918362000ee3565b9093019392505050565b62000ade8162000eab565b600062000bb560098362000e8d565b7f4e6f742070726f78790000000000000000000000000000000000000000000000815260200192915050565b600062000bf0600e8362000e8d565b7f496e76616c6964207369676e6572000000000000000000000000000000000000815260200192915050565b600062000c2b60188362000e8d565b7f496e76616c6964207369676e6174757265206c656e6774680000000000000000815260200192915050565b600062000c6660208362000e96565b7f7c7c456e6572676920426c6f636b636861696e20436865636b706f696e747c7c815260200192915050565b600062000ca1600d8362000e8d565b7f4e6f7420737570706f7274656400000000000000000000000000000000000000815260200192915050565b62000ade8162000ed1565b600062000ce58262000c57565b915062000cf3828562000b54565b60208201915062000d05828462000b54565b5060200192915050565b60208101620008e4828462000ad3565b6020808252810162000d32818462000ae4565b9392505050565b60208101620008e4828462000b49565b6040810162000d59828562000b49565b62000d32602083018462000b9b565b6080810162000d78828762000b49565b62000d87602083018662000ccd565b62000d96604083018562000b49565b62000da5606083018462000b49565b95945050505050565b602080825281016200098981848662000b69565b60208101620008e4828462000b9b565b6080810162000de2828762000b9b565b62000d87602083018662000b49565b60208082528101620008e48162000ba6565b60208082528101620008e48162000be1565b60208082528101620008e48162000c1c565b60208082528101620008e48162000c92565b60405181810167ffffffffffffffff8111828210171562000e5957600080fd5b604052919050565b600067ffffffffffffffff82111562000e7957600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b919050565b6000620008e48262000eb8565b90565b6000620008e48262000e9b565b73ffffffffffffffffffffffffffffffffffffffff1690565b60ff1690565b82818337506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b62000f168162000ea8565b81146200075a57600080fd5b62000f168162000eab56fe60806040523480156200001157600080fd5b5060405162000e4538038062000e4583398101604081905262000034916200008b565b600080546001600160a01b0319166001600160a01b0395909516949094179093554360015560029190915560035560045562000143565b805162000078816200011e565b92915050565b8051620000788162000138565b60008060008060808587031215620000a257600080fd5b6000620000b087876200007e565b9450506020620000c3878288016200006b565b9350506040620000d6878288016200006b565b9250506060620000e9878288016200006b565b91505092959194509250565b6000620000788262000112565b90565b60006200007882620000f5565b6001600160a01b031690565b620001298162000102565b81146200013557600080fd5b50565b620001298162000105565b610cf280620001536000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063370158ea11610050578063370158ea146100aa57806376cd7cbc146100c1578063f27959c7146100d657610067565b8063124321c41461006c5780632bbe2c881461008a575b600080fd5b6100746100eb565b6040516100819190610b03565b60405180910390f35b61009d61009836600461080f565b6100f1565b6040516100819190610b4f565b6100b2610223565b60405161008193929190610bb0565b6100d46100cf36600461088d565b610231565b005b6100de610594565b6040516100819190610af2565b60045481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260409020546060908061015a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190610b90565b60405180910390fd5b6006600182038154811061016a57fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156102165780601f106101eb57610100808354040283529160200191610216565b820191906000526020600020905b8154815290600101906020018083116101f957829003601f168201915b5050505050915050919050565b600254600354600154909192565b6105a0600154430310610270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190610b60565b604181146102aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190610ba0565b6000806102b983850185610853565b9150915060006001600454868660408181106102d157fe5b6040805160008152602001908190526102f794939091013560f81c915087908790610b11565b6020604051602081039080840390855afa158015610319573d6000803e3d6000fd5b5050604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015173ffffffffffffffffffffffffffffffffffffffff81166000908152600560205291909120549092501590506103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190610b70565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b15801561040d57600080fd5b505afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061044591908101906108cf565b6040517f9f8a13d700000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff821690639f8a13d79061049a908590600401610ae4565b60206040518083038186803b1580156104b257600080fd5b505afa1580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104ea9190810190610835565b610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015190610b80565b600680546001810180835560009290925261055e907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0188886106db565b505060065473ffffffffffffffffffffffffffffffffffffffff9092166000908152600560205260409020919091555050505050565b600654604080518281526020808402820101909152606091908180156105ce57816020015b60608152602001906001900390816105b95790505b509150805b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190156106d6576006818154811061060957fe5b600091825260209182902001805460408051601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001871615020190941693909304928301859004850281018501909152818152928301828280156106b55780601f1061068a576101008083540402835291602001916106b5565b820191906000526020600020905b81548152906001019060200180831161069857829003601f168201915b50505050508382815181106106c657fe5b60200260200101819052506105d3565b505090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061073a578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610767565b82800160010185558215610767579182015b8281111561076757823582559160200191906001019061074c565b50610773929150610777565b5090565b61079191905b80821115610773576000815560010161077d565b90565b803561079f81610c7d565b92915050565b805161079f81610c94565b803561079f81610c9d565b60008083601f8401126107cd57600080fd5b50813567ffffffffffffffff8111156107e557600080fd5b6020830191508360018202830111156107fd57600080fd5b9250929050565b805161079f81610ca6565b60006020828403121561082157600080fd5b600061082d8484610794565b949350505050565b60006020828403121561084757600080fd5b600061082d84846107a5565b6000806040838503121561086657600080fd5b600061087285856107b0565b9250506020610883858286016107b0565b9150509250929050565b600080602083850312156108a057600080fd5b823567ffffffffffffffff8111156108b757600080fd5b6108c3858286016107bb565b92509250509250929050565b6000602082840312156108e157600080fd5b600061082d8484610804565b60006108f98383610986565b9392505050565b61090981610beb565b82525050565b600061091a82610bde565b6109248185610be2565b93508360208202850161093685610bd8565b8060005b85811015610970578484038952815161095385826108ed565b945061095e83610bd8565b60209a909a019992505060010161093a565b5091979650505050505050565b61090981610791565b600061099182610bde565b61099b8185610be2565b93506109ab818560208601610c25565b6109b481610c55565b9093019392505050565b60006109cb601183610be2565b7f5369676e696e672068617320656e646564000000000000000000000000000000815260200192915050565b6000610a04600e83610be2565b7f416c7265616479207369676e6564000000000000000000000000000000000000815260200192915050565b6000610a3d600d83610be2565b7f4e6f7420616374697665204d4e00000000000000000000000000000000000000815260200192915050565b6000610a76600e83610be2565b7f4e6f74207369676e656420796574000000000000000000000000000000000000815260200192915050565b6000610aaf601883610be2565b7f496e76616c6964207369676e6174757265206c656e6774680000000000000000815260200192915050565b61090981610c1f565b6020810161079f8284610900565b602080825281016108f9818461090f565b6020810161079f828461097d565b60808101610b1f828761097d565b610b2c6020830186610adb565b610b39604083018561097d565b610b46606083018461097d565b95945050505050565b602080825281016108f98184610986565b6020808252810161079f816109be565b6020808252810161079f816109f7565b6020808252810161079f81610a30565b6020808252810161079f81610a69565b6020808252810161079f81610aa2565b60608101610bbe828661097d565b610bcb602083018561097d565b61082d604083018461097d565b60200190565b5190565b90815260200190565b600061079f82610c06565b151590565b600061079f82610beb565b73ffffffffffffffffffffffffffffffffffffffff1690565b60ff1690565b60005b83811015610c40578181015183820152602001610c28565b83811115610c4f576000848401525b50505050565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b610c8681610beb565b8114610c9157600080fd5b50565b610c8681610bf6565b610c8681610791565b610c8681610bfb56fea365627a7a7231582084fd726e74754893ae7ca9ce35dfa871a1cd667e91ca6e3c624b3ddce566cda96c6578706572696d656e74616cf564736f6c634300050b0040a365627a7a7231582004e82f9da992d255ebb77830cfdcfce639232baa2452ac3656ceed03bffbf98d6c6578706572696d656e74616cf564736f6c634300050b0040`

// CheckpointRegistryV1 is an auto generated Go binding around an Ethereum contract.
type CheckpointRegistryV1 struct {
	CheckpointRegistryV1Caller     // Read-only binding to the contract
	CheckpointRegistryV1Transactor // Write-only binding to the contract
	CheckpointRegistryV1Filterer   // Log filterer for contract events
}

// CheckpointRegistryV1Caller is an auto generated read-only Go binding around an Ethereum contract.
type CheckpointRegistryV1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckpointRegistryV1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type CheckpointRegistryV1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckpointRegistryV1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CheckpointRegistryV1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CheckpointRegistryV1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CheckpointRegistryV1Session struct {
	Contract     *CheckpointRegistryV1 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// CheckpointRegistryV1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CheckpointRegistryV1CallerSession struct {
	Contract *CheckpointRegistryV1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// CheckpointRegistryV1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CheckpointRegistryV1TransactorSession struct {
	Contract     *CheckpointRegistryV1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// CheckpointRegistryV1Raw is an auto generated low-level Go binding around an Ethereum contract.
type CheckpointRegistryV1Raw struct {
	Contract *CheckpointRegistryV1 // Generic contract binding to access the raw methods on
}

// CheckpointRegistryV1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CheckpointRegistryV1CallerRaw struct {
	Contract *CheckpointRegistryV1Caller // Generic read-only contract binding to access the raw methods on
}

// CheckpointRegistryV1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CheckpointRegistryV1TransactorRaw struct {
	Contract *CheckpointRegistryV1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewCheckpointRegistryV1 creates a new instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1(address common.Address, backend bind.ContractBackend) (*CheckpointRegistryV1, error) {
	contract, err := bindCheckpointRegistryV1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1{CheckpointRegistryV1Caller: CheckpointRegistryV1Caller{contract: contract}, CheckpointRegistryV1Transactor: CheckpointRegistryV1Transactor{contract: contract}, CheckpointRegistryV1Filterer: CheckpointRegistryV1Filterer{contract: contract}}, nil
}

// NewCheckpointRegistryV1Caller creates a new read-only instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1Caller(address common.Address, caller bind.ContractCaller) (*CheckpointRegistryV1Caller, error) {
	contract, err := bindCheckpointRegistryV1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1Caller{contract: contract}, nil
}

// NewCheckpointRegistryV1Transactor creates a new write-only instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1Transactor(address common.Address, transactor bind.ContractTransactor) (*CheckpointRegistryV1Transactor, error) {
	contract, err := bindCheckpointRegistryV1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1Transactor{contract: contract}, nil
}

// NewCheckpointRegistryV1Filterer creates a new log filterer instance of CheckpointRegistryV1, bound to a specific deployed contract.
func NewCheckpointRegistryV1Filterer(address common.Address, filterer bind.ContractFilterer) (*CheckpointRegistryV1Filterer, error) {
	contract, err := bindCheckpointRegistryV1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1Filterer{contract: contract}, nil
}

// bindCheckpointRegistryV1 binds a generic wrapper to an already deployed contract.
func bindCheckpointRegistryV1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CheckpointRegistryV1ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CheckpointRegistryV1 *CheckpointRegistryV1Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CheckpointRegistryV1.Contract.CheckpointRegistryV1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CheckpointRegistryV1 *CheckpointRegistryV1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.CheckpointRegistryV1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CheckpointRegistryV1 *CheckpointRegistryV1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.CheckpointRegistryV1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CheckpointRegistryV1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.contract.Transact(opts, method, params...)
}

// CPPSigner is a free data retrieval call binding the contract method 0xd59f1758.
//
// Solidity: function CPP_signer() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) CPPSigner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "CPP_signer")
	return *ret0, err
}

// CPPSigner is a free data retrieval call binding the contract method 0xd59f1758.
//
// Solidity: function CPP_signer() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) CPPSigner() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.CPPSigner(&_CheckpointRegistryV1.CallOpts)
}

// CPPSigner is a free data retrieval call binding the contract method 0xd59f1758.
//
// Solidity: function CPP_signer() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) CPPSigner() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.CPPSigner(&_CheckpointRegistryV1.CallOpts)
}

// Checkpoints is a free data retrieval call binding the contract method 0x5a48c0b0.
//
// Solidity: function checkpoints() constant returns(address[])
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) Checkpoints(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "checkpoints")
	return *ret0, err
}

// Checkpoints is a free data retrieval call binding the contract method 0x5a48c0b0.
//
// Solidity: function checkpoints() constant returns(address[])
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Checkpoints() ([]common.Address, error) {
	return _CheckpointRegistryV1.Contract.Checkpoints(&_CheckpointRegistryV1.CallOpts)
}

// Checkpoints is a free data retrieval call binding the contract method 0x5a48c0b0.
//
// Solidity: function checkpoints() constant returns(address[])
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) Checkpoints() ([]common.Address, error) {
	return _CheckpointRegistryV1.Contract.Checkpoints(&_CheckpointRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) MnregistryProxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.MnregistryProxy(&_CheckpointRegistryV1.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) MnregistryProxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.MnregistryProxy(&_CheckpointRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Proxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.Proxy(&_CheckpointRegistryV1.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) Proxy() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.Proxy(&_CheckpointRegistryV1.CallOpts)
}

// SignatureBase is a free data retrieval call binding the contract method 0x851f2209.
//
// Solidity: function signatureBase(uint256 number, bytes32 hash) constant returns(bytes32 sigbase)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) SignatureBase(opts *bind.CallOpts, number *big.Int, hash [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "signatureBase", number, hash)
	return *ret0, err
}

// SignatureBase is a free data retrieval call binding the contract method 0x851f2209.
//
// Solidity: function signatureBase(uint256 number, bytes32 hash) constant returns(bytes32 sigbase)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) SignatureBase(number *big.Int, hash [32]byte) ([32]byte, error) {
	return _CheckpointRegistryV1.Contract.SignatureBase(&_CheckpointRegistryV1.CallOpts, number, hash)
}

// SignatureBase is a free data retrieval call binding the contract method 0x851f2209.
//
// Solidity: function signatureBase(uint256 number, bytes32 hash) constant returns(bytes32 sigbase)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) SignatureBase(number *big.Int, hash [32]byte) ([32]byte, error) {
	return _CheckpointRegistryV1.Contract.SignatureBase(&_CheckpointRegistryV1.CallOpts, number, hash)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CheckpointRegistryV1.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) V1storage() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.V1storage(&_CheckpointRegistryV1.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_CheckpointRegistryV1 *CheckpointRegistryV1CallerSession) V1storage() (common.Address, error) {
	return _CheckpointRegistryV1.Contract.V1storage(&_CheckpointRegistryV1.CallOpts)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Destroy(&_CheckpointRegistryV1.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Destroy(&_CheckpointRegistryV1.TransactOpts, _newImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Migrate(&_CheckpointRegistryV1.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Migrate(&_CheckpointRegistryV1.TransactOpts, _oldImpl)
}

// Propose is a paid mutator transaction binding the contract method 0xc20fa2ee.
//
// Solidity: function propose(uint256 number, bytes32 hash, bytes signature) returns(address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Propose(opts *bind.TransactOpts, number *big.Int, hash [32]byte, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "propose", number, hash, signature)
}

// Propose is a paid mutator transaction binding the contract method 0xc20fa2ee.
//
// Solidity: function propose(uint256 number, bytes32 hash, bytes signature) returns(address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Propose(number *big.Int, hash [32]byte, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Propose(&_CheckpointRegistryV1.TransactOpts, number, hash, signature)
}

// Propose is a paid mutator transaction binding the contract method 0xc20fa2ee.
//
// Solidity: function propose(uint256 number, bytes32 hash, bytes signature) returns(address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Propose(number *big.Int, hash [32]byte, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Propose(&_CheckpointRegistryV1.TransactOpts, number, hash, signature)
}

// Sign is a paid mutator transaction binding the contract method 0x51fae959.
//
// Solidity: function sign(address checkpoint, bytes signature) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Transactor) Sign(opts *bind.TransactOpts, checkpoint common.Address, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.contract.Transact(opts, "sign", checkpoint, signature)
}

// Sign is a paid mutator transaction binding the contract method 0x51fae959.
//
// Solidity: function sign(address checkpoint, bytes signature) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1Session) Sign(checkpoint common.Address, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Sign(&_CheckpointRegistryV1.TransactOpts, checkpoint, signature)
}

// Sign is a paid mutator transaction binding the contract method 0x51fae959.
//
// Solidity: function sign(address checkpoint, bytes signature) returns()
func (_CheckpointRegistryV1 *CheckpointRegistryV1TransactorSession) Sign(checkpoint common.Address, signature []byte) (*types.Transaction, error) {
	return _CheckpointRegistryV1.Contract.Sign(&_CheckpointRegistryV1.TransactOpts, checkpoint, signature)
}

// CheckpointRegistryV1CheckpointIterator is returned from FilterCheckpoint and is used to iterate over the raw logs and unpacked data for Checkpoint events raised by the CheckpointRegistryV1 contract.
type CheckpointRegistryV1CheckpointIterator struct {
	Event *CheckpointRegistryV1Checkpoint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CheckpointRegistryV1CheckpointIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CheckpointRegistryV1Checkpoint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CheckpointRegistryV1Checkpoint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CheckpointRegistryV1CheckpointIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CheckpointRegistryV1CheckpointIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CheckpointRegistryV1Checkpoint represents a Checkpoint event raised by the CheckpointRegistryV1 contract.
type CheckpointRegistryV1Checkpoint struct {
	Number     *big.Int
	Hash       [32]byte
	Checkpoint common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCheckpoint is a free log retrieval operation binding the contract event 0x7f582e7a234c68b135245365b0c69d608f9235392a1ef801b46f04ca5d6cdad4.
//
// Solidity: event Checkpoint(uint256 indexed number, bytes32 hash, address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Filterer) FilterCheckpoint(opts *bind.FilterOpts, number []*big.Int) (*CheckpointRegistryV1CheckpointIterator, error) {

	var numberRule []interface{}
	for _, numberItem := range number {
		numberRule = append(numberRule, numberItem)
	}

	logs, sub, err := _CheckpointRegistryV1.contract.FilterLogs(opts, "Checkpoint", numberRule)
	if err != nil {
		return nil, err
	}
	return &CheckpointRegistryV1CheckpointIterator{contract: _CheckpointRegistryV1.contract, event: "Checkpoint", logs: logs, sub: sub}, nil
}

// WatchCheckpoint is a free log subscription operation binding the contract event 0x7f582e7a234c68b135245365b0c69d608f9235392a1ef801b46f04ca5d6cdad4.
//
// Solidity: event Checkpoint(uint256 indexed number, bytes32 hash, address checkpoint)
func (_CheckpointRegistryV1 *CheckpointRegistryV1Filterer) WatchCheckpoint(opts *bind.WatchOpts, sink chan<- *CheckpointRegistryV1Checkpoint, number []*big.Int) (event.Subscription, error) {

	var numberRule []interface{}
	for _, numberItem := range number {
		numberRule = append(numberRule, numberItem)
	}

	logs, sub, err := _CheckpointRegistryV1.contract.WatchLogs(opts, "Checkpoint", numberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CheckpointRegistryV1Checkpoint)
				if err := _CheckpointRegistryV1.contract.UnpackLog(event, "Checkpoint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
