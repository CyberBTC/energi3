// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SporkRegistryV2ABI is the input ABI used to generate the binding from.
const SporkRegistryV2ABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_mnregistry_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergency_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"Emergency_signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consensusGasLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xferGas\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_impl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_fee_payer\",\"type\":\"address\"}],\"name\":\"createUpgradeProposal\",\"outputs\":[{\"internalType\":\"contractIUpgradeProposal\",\"name\":\"proposal\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SporkRegistryV2Bin is the compiled bytecode used for deploying new contracts.
const SporkRegistryV2Bin = `608060405234801561001057600080fd5b50604051612c63380380612c638339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b0319918216179091556001805494841694821694909417909355600280549290911691909216179055612bd48061008f6000396000f3fe60806040526004361061006f5760003560e01c8063ce5494bb1161004e578063ce5494bb146101b2578063d4f7068a146101f2578063ec55688914610207578063fe7334e81461021c5761006f565b8062f55d9d146100d657806362877ccd14610118578063c00ebced14610184575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156100e257600080fd5b50610116600480360360208110156100f957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610231565b005b61015b6004803603606081101561012e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604090910135166102d9565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561019057600080fd5b506101996106c8565b6040805192835260208301919091528051918290030190f35b3480156101be57600080fd5b50610116600480360360208110156101d557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106d5565b3480156101fe57600080fd5b5061015b610763565b34801561021357600080fd5b5061015b61077f565b34801561022857600080fd5b5061015b61079b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6102c081610760565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60025460009073ffffffffffffffffffffffffffffffffffffffff8381169116141561047057341561036c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b82156103d957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420706572696f64000000000000000000000000000000000000604482015290519081900360640190fd5b3384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858560405161040c906107b7565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f080158015610468573d6000803e3d6000fd5b5090506106c1565b69021e19e0c9bab240000034146104e857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b6212750083101561055a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d696e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b6301e133808311156105cd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d617800000000000000000000000000000000000000000000604482015290519081900360640190fd5b3384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585604051610600906107c4565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f08015801561065c573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156106a757600080fd5b505af11580156106bb573d6000803e3d6000fd5b50505050505b9392505050565b62e4e1c0906301c9c38090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461075b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610760815b50565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b610ff5806107d283390190565b6113d9806117c78339019056fe608060405234801561001057600080fd5b50604051610ff5380380610ff5833981810160405260a081101561003357600080fd5b508051602080830151604080850151606086015160809096015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b038086169182178355428b01600355600480549094169085161783558551638abf607760e01b8152955198999698949793958a958a958a958a958a95889560339589958995859493638abf60779381830193929091829003018186803b1580156100dc57600080fd5b505afa1580156100f0573d6000803e3d6000fd5b505050506040513d602081101561010657600080fd5b5051604080516306661abd60e01b815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561014a57600080fd5b505afa15801561015e573d6000803e3d6000fd5b505050506040513d60a081101561017457600080fd5b5060408101516080909101519092509050806101d7576040805162461bcd60e51b815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561022f576040805162461bcd60e51b815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff86161015610275576040805162461bcd60e51b815260206004820152600a60248201526928bab7b93ab69036b4b760b11b604482015290519081900360640190fd5b606460ff861611156102bb576040805162461bcd60e51b815260206004820152600a6024820152690a2eadee4eada40dac2f60b31b604482015290519081900360640190fd5b6008829055606460ff8616830204600955603360ff8616106102e257600954600a556102ed565b60646033830204600a555b600060095411610334576040805162461bcd60e51b815260206004820152600d60248201526c145d5bdc9d5b481dd95a59da1d609a1b604482015290519081900360640190fd5b6000600a541161037b576040805162461bcd60e51b815260206004820152600d60248201526c119a5b9a5cda081dd95a59da1d609a1b604482015290519081900360640190fd5b5050600d80546001600160a01b03199081163317909155600180546001600160a01b039b8c16908316179055600c805499909a16981697909717909755505050505050505050505050610c22806103d36000396000f3fe6080604052600436106101805760003560e01c80637b352962116100d6578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103fb578063e522538114610410578063fe7334e81461042557610180565b8063aec2ccae146103a6578063c2472ef8146102be578063c40a70f8146103e657610180565b806391840a6b116100b057806391840a6b1461033c578063990a663b14610351578063adfaa72e1461036657610180565b80637b3529621461029557806383197ef0146103125780638abf60771461032757610180565b80633d1db3e91161013857806360f96a8f1161011257806360f96a8f146102d357806375df0f99146102e85780637639b1eb146102fd57610180565b80633d1db3e9146102805780635051a5ec1461029557806356c2a0a1146102be57610180565b806329dcb0cf1161016957806329dcb0cf1461024c5780632ded3227146102615780633ccfd60b1461026b57610180565b806302d05d3f146101e75780630b62be4514610225575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101f357600080fd5b506101fc61043a565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023157600080fd5b5061023a610456565b60408051918252519081900360200190f35b34801561025857600080fd5b5061023a61045c565b610269610462565b005b34801561027757600080fd5b506102696104f2565b34801561028c57600080fd5b5061023a6105ae565b3480156102a157600080fd5b506102aa6105b4565b604080519115158252519081900360200190f35b3480156102ca57600080fd5b506102696105b9565b3480156102df57600080fd5b506101fc6105bb565b3480156102f457600080fd5b5061023a6105d7565b34801561030957600080fd5b5061023a6105dd565b34801561031e57600080fd5b506102696105e3565b34801561033357600080fd5b506101fc610684565b34801561034857600080fd5b5061023a6106a0565b34801561035d57600080fd5b5061023a6106a6565b34801561037257600080fd5b506102aa6004803603602081101561038957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166106ac565b3480156103b257600080fd5b506102aa600480360360208110156103c957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610846565b3480156103f257600080fd5b506101fc61085b565b34801561040757600080fd5b5061023a610877565b34801561041c57600080fd5b5061026961087d565b34801561043157600080fd5b506101fc610bd1565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60035481565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146104e857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104fa6105b4565b61056557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff909116904780156108fc02916000818181858888f193505050501580156105ab573d6000803e3d6000fd5b50565b600a5481565b600190565b565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b60015473ffffffffffffffffffffffffffffffffffffffff16331461066957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b60008054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051839273ffffffffffffffffffffffffffffffffffffffff1691638abf6077916004808301926020929190829003018186803b15801561071757600080fd5b505afa15801561072b573d6000803e3d6000fd5b505050506040513d602081101561074157600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291519293506000929184169163b83e16059160248082019260e092909190829003018186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e08110156107f257600080fd5b5060a001516003549091504210801561080c575060025481105b801561083e575073ffffffffffffffffffffffffffffffffffffffff84166000908152600b602052604090205460ff16155b949350505050565b600b6020526000908152604090205460ff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b6108856105b4565b801561089657506108946105b4565b155b61090157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461098757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156109f057600080fd5b505afa158015610a04573d6000803e3d6000fd5b505050506040513d6020811015610a1a57600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b158015610a8857600080fd5b505afa158015610a9c573d6000803e3d6000fd5b505050506040513d6020811015610ab257600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b158015610b1c57600080fd5b505afa158015610b30573d6000803e3d6000fd5b505050506040513d6020811015610b4657600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba914791600480830192600092919082900301818588803b158015610bb457600080fd5b505af1158015610bc8573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a72315820ea540cf1e03ad1d6c3e8020e64af39f864c7aa16ce24c016d3c135032e8467c164736f6c6343000510003260806040523480156200001157600080fd5b50604051620013d9380380620013d9833981810160405260a08110156200003757600080fd5b508051602080830151604080850151606086015160809096015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b038086169182178355428b01600355600480549094169085161783558551638abf607760e01b8152955198999698949793958895603395899589959485949093638abf607793828401939092829003018186803b158015620000d857600080fd5b505afa158015620000ed573d6000803e3d6000fd5b505050506040513d60208110156200010457600080fd5b5051604080516306661abd60e01b815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b1580156200014957600080fd5b505afa1580156200015e573d6000803e3d6000fd5b505050506040513d60a08110156200017557600080fd5b506040810151608090910151909250905080620001d9576040805162461bcd60e51b815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101562000232576040805162461bcd60e51b815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101562000279576040805162461bcd60e51b815260206004820152600a60248201526928bab7b93ab69036b4b760b11b604482015290519081900360640190fd5b606460ff86161115620002c0576040805162461bcd60e51b815260206004820152600a6024820152690a2eadee4eada40dac2f60b31b604482015290519081900360640190fd5b6008829055606460ff8616830204600955603360ff861610620002e957600954600a55620002f4565b60646033830204600a555b6000600954116200033c576040805162461bcd60e51b815260206004820152600d60248201526c145d5bdc9d5b481dd95a59da1d609a1b604482015290519081900360640190fd5b6000600a541162000384576040805162461bcd60e51b815260206004820152600d60248201526c119a5b9a5cda081dd95a59da1d609a1b604482015290519081900360640190fd5b5050600d80546001600160a01b03199081163317909155600180546001600160a01b039b8c16908316179055600c805499909a169816979097179097555050505050505061100180620003d86000396000f3fe6080604052600436106101805760003560e01c80637b352962116100d6578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c1514610425578063e52253811461043a578063fe7334e81461044f57610180565b8063aec2ccae146103bb578063c2472ef8146103fb578063c40a70f81461041057610180565b806391840a6b116100b057806391840a6b14610351578063990a663b14610366578063adfaa72e1461037b57610180565b80637b3529621461031257806383197ef0146103275780638abf60771461033c57610180565b80633d1db3e91161013857806360f96a8f1161011257806360f96a8f146102d357806375df0f99146102e85780637639b1eb146102fd57610180565b80633d1db3e9146102805780635051a5ec1461029557806356c2a0a1146102be57610180565b806329dcb0cf1161016957806329dcb0cf1461024c5780632ded3227146102615780633ccfd60b1461026b57610180565b806302d05d3f146101e75780630b62be4514610225575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101f357600080fd5b506101fc610464565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561023157600080fd5b5061023a610480565b60408051918252519081900360200190f35b34801561025857600080fd5b5061023a610486565b61026961048c565b005b34801561027757600080fd5b5061026961051c565b34801561028c57600080fd5b5061023a6105d8565b3480156102a157600080fd5b506102aa6105de565b604080519115158252519081900360200190f35b3480156102ca57600080fd5b5061026961062b565b3480156102df57600080fd5b506101fc61063e565b3480156102f457600080fd5b5061023a61065a565b34801561030957600080fd5b5061023a610660565b34801561031e57600080fd5b506102aa610666565b34801561033357600080fd5b50610269610690565b34801561034857600080fd5b506101fc610731565b34801561035d57600080fd5b5061023a61074d565b34801561037257600080fd5b5061023a610753565b34801561038757600080fd5b506102aa6004803603602081101561039e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610759565b3480156103c757600080fd5b506102aa600480360360208110156103de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166108f3565b34801561040757600080fd5b50610269610908565b34801561041c57600080fd5b506101fc61091b565b34801561043157600080fd5b5061023a610937565b34801561044657600080fd5b5061026961093d565b34801561045b57600080fd5b506101fc610c91565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60035481565b600d5473ffffffffffffffffffffffffffffffffffffffff16331461051257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6105246105de565b61058f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff909116904780156108fc02916000818181858888f193505050501580156105d5573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105f357506001610628565b6105fb610666565b61060757506000610628565b60095460075460065401101561061f57506000610628565b50600754600654115b90565b610633610cad565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b60004260035411158061067d5750600a5460065410155b8061068b5750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff16331461071657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b60008054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051839273ffffffffffffffffffffffffffffffffffffffff1691638abf6077916004808301926020929190829003018186803b1580156107c457600080fd5b505afa1580156107d8573d6000803e3d6000fd5b505050506040513d60208110156107ee57600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291519293506000929184169163b83e16059160248082019260e092909190829003018186803b15801561086657600080fd5b505afa15801561087a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e081101561089f57600080fd5b5060a00151600354909150421080156108b9575060025481105b80156108eb575073ffffffffffffffffffffffffffffffffffffffff84166000908152600b602052604090205460ff16155b949350505050565b600b6020526000908152604090205460ff1681565b610910610cad565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b610945610666565b801561095657506109546105de565b155b6109c157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff163314610a4757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610ab057600080fd5b505afa158015610ac4573d6000803e3d6000fd5b505050506040513d6020811015610ada57600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b158015610b4857600080fd5b505afa158015610b5c573d6000803e3d6000fd5b505050506040513d6020811015610b7257600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b158015610bdc57600080fd5b505afa158015610bf0573d6000803e3d6000fd5b505050506040513d6020811015610c0657600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba914791600480830192600092919082900301818588803b158015610c7457600080fd5b505af1158015610c88573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610d1f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8857600080fd5b505afa158015610d9c573d6000803e3d6000fd5b505050506040513d6020811015610db257600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260e092909190829003018186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060e0811015610e6457600080fd5b50608081015160a09091015160025491955091508110610ee557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610f7a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a72315820b54bdc9c80fe5a0f3590919c4e06ecccc8053ec63d65e90354049fa082397d7364736f6c63430005100032a265627a7a72315820d8e01078a425c5cf4504e203b56a50d62060d514d67a1bd3649ea35e6d63b9ad64736f6c63430005100032`

// DeploySporkRegistryV2 deploys a new Ethereum contract, binding an instance of SporkRegistryV2 to it.
func DeploySporkRegistryV2(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address, _emergency_signer common.Address) (common.Address, *types.Transaction, *SporkRegistryV2, error) {
	parsed, err := abi.JSON(strings.NewReader(SporkRegistryV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SporkRegistryV2Bin), backend, _proxy, _mnregistry_proxy, _emergency_signer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SporkRegistryV2{SporkRegistryV2Caller: SporkRegistryV2Caller{contract: contract}, SporkRegistryV2Transactor: SporkRegistryV2Transactor{contract: contract}, SporkRegistryV2Filterer: SporkRegistryV2Filterer{contract: contract}}, nil
}

// SporkRegistryV2Bin is the compiled bytecode of contract after deployment.
const SporkRegistryV2RuntimeBin = ``

// SporkRegistryV2 is an auto generated Go binding around an Ethereum contract.
type SporkRegistryV2 struct {
	SporkRegistryV2Caller     // Read-only binding to the contract
	SporkRegistryV2Transactor // Write-only binding to the contract
	SporkRegistryV2Filterer   // Log filterer for contract events
}

// SporkRegistryV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type SporkRegistryV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SporkRegistryV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SporkRegistryV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SporkRegistryV2Session struct {
	Contract     *SporkRegistryV2  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SporkRegistryV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SporkRegistryV2CallerSession struct {
	Contract *SporkRegistryV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SporkRegistryV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SporkRegistryV2TransactorSession struct {
	Contract     *SporkRegistryV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SporkRegistryV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type SporkRegistryV2Raw struct {
	Contract *SporkRegistryV2 // Generic contract binding to access the raw methods on
}

// SporkRegistryV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SporkRegistryV2CallerRaw struct {
	Contract *SporkRegistryV2Caller // Generic read-only contract binding to access the raw methods on
}

// SporkRegistryV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SporkRegistryV2TransactorRaw struct {
	Contract *SporkRegistryV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSporkRegistryV2 creates a new instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2(address common.Address, backend bind.ContractBackend) (*SporkRegistryV2, error) {
	contract, err := bindSporkRegistryV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2{SporkRegistryV2Caller: SporkRegistryV2Caller{contract: contract}, SporkRegistryV2Transactor: SporkRegistryV2Transactor{contract: contract}, SporkRegistryV2Filterer: SporkRegistryV2Filterer{contract: contract}}, nil
}

// NewSporkRegistryV2Caller creates a new read-only instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2Caller(address common.Address, caller bind.ContractCaller) (*SporkRegistryV2Caller, error) {
	contract, err := bindSporkRegistryV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2Caller{contract: contract}, nil
}

// NewSporkRegistryV2Transactor creates a new write-only instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2Transactor(address common.Address, transactor bind.ContractTransactor) (*SporkRegistryV2Transactor, error) {
	contract, err := bindSporkRegistryV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2Transactor{contract: contract}, nil
}

// NewSporkRegistryV2Filterer creates a new log filterer instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2Filterer(address common.Address, filterer bind.ContractFilterer) (*SporkRegistryV2Filterer, error) {
	contract, err := bindSporkRegistryV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2Filterer{contract: contract}, nil
}

// bindSporkRegistryV2 binds a generic wrapper to an already deployed contract.
func bindSporkRegistryV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SporkRegistryV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SporkRegistryV2 *SporkRegistryV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SporkRegistryV2.Contract.SporkRegistryV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SporkRegistryV2 *SporkRegistryV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.SporkRegistryV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SporkRegistryV2 *SporkRegistryV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.SporkRegistryV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SporkRegistryV2 *SporkRegistryV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SporkRegistryV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SporkRegistryV2 *SporkRegistryV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SporkRegistryV2 *SporkRegistryV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.contract.Transact(opts, method, params...)
}

// EmergencySigner is a free data retrieval call binding the contract method 0xd4f7068a.
//
// Solidity: function Emergency_signer() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Caller) EmergencySigner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV2.contract.Call(opts, out, "Emergency_signer")
	return *ret0, err
}

// EmergencySigner is a free data retrieval call binding the contract method 0xd4f7068a.
//
// Solidity: function Emergency_signer() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Session) EmergencySigner() (common.Address, error) {
	return _SporkRegistryV2.Contract.EmergencySigner(&_SporkRegistryV2.CallOpts)
}

// EmergencySigner is a free data retrieval call binding the contract method 0xd4f7068a.
//
// Solidity: function Emergency_signer() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) EmergencySigner() (common.Address, error) {
	return _SporkRegistryV2.Contract.EmergencySigner(&_SporkRegistryV2.CallOpts)
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV2 *SporkRegistryV2Caller) ConsensusGasLimits(opts *bind.CallOpts) (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	ret := new(struct {
		CallGas *big.Int
		XferGas *big.Int
	})
	out := ret
	err := _SporkRegistryV2.contract.Call(opts, out, "consensusGasLimits")
	return *ret, err
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV2 *SporkRegistryV2Session) ConsensusGasLimits() (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	return _SporkRegistryV2.Contract.ConsensusGasLimits(&_SporkRegistryV2.CallOpts)
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) ConsensusGasLimits() (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	return _SporkRegistryV2.Contract.ConsensusGasLimits(&_SporkRegistryV2.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV2.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Session) MnregistryProxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.MnregistryProxy(&_SporkRegistryV2.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) MnregistryProxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.MnregistryProxy(&_SporkRegistryV2.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV2.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Session) Proxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.Proxy(&_SporkRegistryV2.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) Proxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.Proxy(&_SporkRegistryV2.CallOpts)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV2 *SporkRegistryV2Transactor) CreateUpgradeProposal(opts *bind.TransactOpts, _impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.contract.Transact(opts, "createUpgradeProposal", _impl, _period, _fee_payer)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV2 *SporkRegistryV2Session) CreateUpgradeProposal(_impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.CreateUpgradeProposal(&_SporkRegistryV2.TransactOpts, _impl, _period, _fee_payer)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV2 *SporkRegistryV2TransactorSession) CreateUpgradeProposal(_impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.CreateUpgradeProposal(&_SporkRegistryV2.TransactOpts, _impl, _period, _fee_payer)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Destroy(&_SporkRegistryV2.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Destroy(&_SporkRegistryV2.TransactOpts, _newImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Migrate(&_SporkRegistryV2.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Migrate(&_SporkRegistryV2.TransactOpts, _oldImpl)
}
