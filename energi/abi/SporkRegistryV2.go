// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SporkRegistryV2ABI is the input ABI used to generate the binding from.
const SporkRegistryV2ABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_impl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_fee_payer\",\"type\":\"address\"}],\"name\":\"createUpgradeProposal\",\"outputs\":[{\"internalType\":\"contractIUpgradeProposal\",\"name\":\"proposal\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"consensusGasLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xferGas\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"Emergency_signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mnregistry_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_mnregistry_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_emergency_signer\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]"

// SporkRegistryV2Bin is the compiled bytecode used for deploying new contracts.
const SporkRegistryV2Bin = `608060405234801561001057600080fd5b50604051611d5a380380611d5a8339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b0319918216179091556001805494841694821694909417909355600280549290911691909216179055611ccb8061008f6000396000f3fe60806040526004361061006f5760003560e01c8063ce5494bb1161004e578063ce5494bb146101b2578063d4f7068a146101f2578063ec55688914610207578063fe7334e81461021c5761006f565b8062f55d9d146100d657806362877ccd14610118578063c00ebced14610184575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156100e257600080fd5b50610116600480360360208110156100f957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610231565b005b61015b6004803603606081101561012e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604090910135166102d9565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561019057600080fd5b506101996105ee565b6040805192835260208301919091528051918290030190f35b3480156101be57600080fd5b50610116600480360360208110156101d557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105fb565b3480156101fe57600080fd5b5061015b610689565b34801561021357600080fd5b5061015b6106a5565b34801561022857600080fd5b5061015b6106c1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6102c081610686565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60025460009073ffffffffffffffffffffffffffffffffffffffff83811691161415610396573384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585604051610332906106dd565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f08015801561038e573d6000803e3d6000fd5b5090506105e7565b69021e19e0c9bab2400000341461040e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b6212750083101561048057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d696e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b6301e133808311156104f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d617800000000000000000000000000000000000000000000604482015290519081900360640190fd5b3384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585604051610526906106ea565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f080158015610582573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105cd57600080fd5b505af11580156105e1573d6000803e3d6000fd5b50505050505b9392505050565b62e4e1c0906301c9c38090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610686815b50565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b61043c806106f883390190565b61116380610b348339019056fe608060405234801561001057600080fd5b5060405161043c38038061043c833981810160405260a081101561003357600080fd5b50805160208201516060830151608090930151600080546001600160a01b039485166001600160a01b031991821617909155600980549385169382169390931790925543600155429093016002556003805492909316911617905561039f8061009d6000396000f3fe6080604052600436106101295760003560e01c80637b352962116100a5578063990a663b11610074578063c40a70f811610059578063c40a70f8146102bb578063c86e6c15146102d0578063e5225381146101d657610129565b8063990a663b146102a6578063c2472ef8146101d657610129565b80637b352962146101eb57806383197ef0146101d65780638abf60771461027c57806391840a6b1461029157610129565b80635051a5ec116100fc57806360f96a8f116100e157806360f96a8f1461021457806375df0f99146102525780637639b1eb1461026757610129565b80635051a5ec146101eb57806356c2a0a1146101d657610129565b80630b62be451461019057806329dcb0cf146101b75780632ded3227146101cc5780633ccfd60b146101d6575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b34801561019c57600080fd5b506101a56102e5565b60408051918252519081900360200190f35b3480156101c357600080fd5b506101a56102eb565b6101d46102f1565b005b3480156101e257600080fd5b506101d46102f1565b3480156101f757600080fd5b506102006102f3565b604080519115158252519081900360200190f35b34801561022057600080fd5b506102296102f8565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561025e57600080fd5b506101a5610314565b34801561027357600080fd5b506101a561031a565b34801561028857600080fd5b50610229610320565b34801561029d57600080fd5b506101a561033c565b3480156102b257600080fd5b506101a5610342565b3480156102c757600080fd5b50610229610348565b3480156102dc57600080fd5b506101a5610364565b60015481565b60025481565b565b600190565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60045481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6006548156fea265627a7a723158203361cde65910dda5e2dee1144e3402db4b5f440f33de5ebcacc794f72e23ad4364736f6c634300050b0032608060405234801561001057600080fd5b50604051611163380380611163833981810160405260a081101561003357600080fd5b508051602080830151604080850151606086015160809096015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b038086169182178355428b016003556004805490941690851617835585517f8abf6077000000000000000000000000000000000000000000000000000000008152955198999698949793958895603395899589959485949093638abf607793828401939092829003018186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d602081101561011657600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561017357600080fd5b505afa158015610187573d6000803e3d6000fd5b505050506040513d60a081101561019d57600080fd5b50604081015160809091015190925090508061021a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029a57fe5b606460ff861611156102a857fe5b6008829055606460ff8616830204600955603360ff8616106102cf57600954600a556102da565b60646033830204600a555b6000600954116102e657fe5b6000600a54116102f257fe5b5050600d80546001600160a01b03199081163317909155600180546001600160a01b039b8c16908316179055600c805499909a1698169790971790975550505050505050610e1e806103456000396000f3fe6080604052600436106101755760003560e01c80637b352962116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103da578063e5225381146103ef578063fe7334e81461040457610175565b8063aec2ccae14610370578063c2472ef8146103b0578063c40a70f8146103c557610175565b80638abf6077116100b05780638abf60771461033157806391840a6b14610346578063990a663b1461035b57610175565b80637b3529621461030757806383197ef01461031c57610175565b80633d1db3e91161012d57806360f96a8f1161010757806360f96a8f146102c857806375df0f99146102dd5780637639b1eb146102f257610175565b80633d1db3e9146102755780635051a5ec1461028a57806356c2a0a1146102b357610175565b806329dcb0cf1161015e57806329dcb0cf146102415780632ded3227146102565780633ccfd60b1461026057610175565b806302d05d3f146101dc5780630b62be451461021a575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101e857600080fd5b506101f1610419565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561022657600080fd5b5061022f610435565b60408051918252519081900360200190f35b34801561024d57600080fd5b5061022f61043b565b61025e610441565b005b34801561026c57600080fd5b5061025e6104d1565b34801561028157600080fd5b5061022f61058e565b34801561029657600080fd5b5061029f610594565b604080519115158252519081900360200190f35b3480156102bf57600080fd5b5061025e6105e1565b3480156102d457600080fd5b506101f16105f4565b3480156102e957600080fd5b5061022f610610565b3480156102fe57600080fd5b5061022f610616565b34801561031357600080fd5b5061029f61061c565b34801561032857600080fd5b5061025e610646565b34801561033d57600080fd5b506101f16106e7565b34801561035257600080fd5b5061022f610703565b34801561036757600080fd5b5061022f610709565b34801561037c57600080fd5b5061029f6004803603602081101561039357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661070f565b3480156103bc57600080fd5b5061025e610724565b3480156103d157600080fd5b506101f1610737565b3480156103e657600080fd5b5061022f610753565b3480156103fb57600080fd5b5061025e610759565b34801561041057600080fd5b506101f1610aae565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60035481565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146104c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104d9610594565b61054457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f1935050505015801561058b573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105a9575060016105de565b6105b161061c565b6105bd575060006105de565b6009546007546006540110156105d5575060006105de565b50600754600654115b90565b6105e9610aca565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106335750600a5460065410155b806106415750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b600b6020526000908152604090205460ff1681565b61072c610aca565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61076161061c565b80156107725750610770610594565b155b6107dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461086357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d60208110156108f657600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d602081101561098e57600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d6020811015610bcf57600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c8157600080fd5b50608081015160a09091015160025491955091508110610d0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a72315820d0810e12876e340390be5f8f5edaf0cf08e0e97d5eb528a5a7b685294b74986164736f6c634300050b0032a265627a7a72315820309bd9b1eb71078fbc9ef0f209720d31be5de9dd1c454987e5e3d8968394f9e464736f6c634300050b0032`

// DeploySporkRegistryV2 deploys a new Ethereum contract, binding an instance of SporkRegistryV2 to it.
func DeploySporkRegistryV2(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _mnregistry_proxy common.Address, _emergency_signer common.Address) (common.Address, *types.Transaction, *SporkRegistryV2, error) {
	parsed, err := abi.JSON(strings.NewReader(SporkRegistryV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SporkRegistryV2Bin), backend, _proxy, _mnregistry_proxy, _emergency_signer)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SporkRegistryV2{SporkRegistryV2Caller: SporkRegistryV2Caller{contract: contract}, SporkRegistryV2Transactor: SporkRegistryV2Transactor{contract: contract}, SporkRegistryV2Filterer: SporkRegistryV2Filterer{contract: contract}}, nil
}

// SporkRegistryV2Bin is the compiled bytecode of contract after deployment.
const SporkRegistryV2RuntimeBin = `60806040526004361061006f5760003560e01c8063ce5494bb1161004e578063ce5494bb146101b2578063d4f7068a146101f2578063ec55688914610207578063fe7334e81461021c5761006f565b8062f55d9d146100d657806362877ccd14610118578063c00ebced14610184575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156100e257600080fd5b50610116600480360360208110156100f957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610231565b005b61015b6004803603606081101561012e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013591604090910135166102d9565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561019057600080fd5b506101996105ee565b6040805192835260208301919091528051918290030190f35b3480156101be57600080fd5b50610116600480360360208110156101d557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105fb565b3480156101fe57600080fd5b5061015b610689565b34801561021357600080fd5b5061015b6106a5565b34801561022857600080fd5b5061015b6106c1565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6102c081610686565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b60025460009073ffffffffffffffffffffffffffffffffffffffff83811691161415610396573384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585604051610332906106dd565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f08015801561038e573d6000803e3d6000fd5b5090506105e7565b69021e19e0c9bab2400000341461040e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f496e76616c696420666565000000000000000000000000000000000000000000604482015290519081900360640190fd5b6212750083101561048057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d696e00000000000000000000000000000000000000000000604482015290519081900360640190fd5b6301e133808311156104f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f506572696f64206d617800000000000000000000000000000000000000000000604482015290519081900360640190fd5b3384600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168585604051610526906106ea565b73ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841660408085019190915260608401919091529216608082015290519081900360a001906000f080158015610582573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16632ded3227346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105cd57600080fd5b505af11580156105e1573d6000803e3d6000fd5b50505050505b9392505050565b62e4e1c0906301c9c38090565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610686815b50565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b61043c806106f883390190565b61116380610b348339019056fe608060405234801561001057600080fd5b5060405161043c38038061043c833981810160405260a081101561003357600080fd5b50805160208201516060830151608090930151600080546001600160a01b039485166001600160a01b031991821617909155600980549385169382169390931790925543600155429093016002556003805492909316911617905561039f8061009d6000396000f3fe6080604052600436106101295760003560e01c80637b352962116100a5578063990a663b11610074578063c40a70f811610059578063c40a70f8146102bb578063c86e6c15146102d0578063e5225381146101d657610129565b8063990a663b146102a6578063c2472ef8146101d657610129565b80637b352962146101eb57806383197ef0146101d65780638abf60771461027c57806391840a6b1461029157610129565b80635051a5ec116100fc57806360f96a8f116100e157806360f96a8f1461021457806375df0f99146102525780637639b1eb1461026757610129565b80635051a5ec146101eb57806356c2a0a1146101d657610129565b80630b62be451461019057806329dcb0cf146101b75780632ded3227146101cc5780633ccfd60b146101d6575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b34801561019c57600080fd5b506101a56102e5565b60408051918252519081900360200190f35b3480156101c357600080fd5b506101a56102eb565b6101d46102f1565b005b3480156101e257600080fd5b506101d46102f1565b3480156101f757600080fd5b506102006102f3565b604080519115158252519081900360200190f35b34801561022057600080fd5b506102296102f8565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561025e57600080fd5b506101a5610314565b34801561027357600080fd5b506101a561031a565b34801561028857600080fd5b50610229610320565b34801561029d57600080fd5b506101a561033c565b3480156102b257600080fd5b506101a5610342565b3480156102c757600080fd5b50610229610348565b3480156102dc57600080fd5b506101a5610364565b60015481565b60025481565b565b600190565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b60095473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b60045481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6006548156fea265627a7a723158203361cde65910dda5e2dee1144e3402db4b5f440f33de5ebcacc794f72e23ad4364736f6c634300050b0032608060405234801561001057600080fd5b50604051611163380380611163833981810160405260a081101561003357600080fd5b508051602080830151604080850151606086015160809096015160018054336001600160a01b031991821617909155436002556000805482166001600160a01b038086169182178355428b016003556004805490941690851617835585517f8abf6077000000000000000000000000000000000000000000000000000000008152955198999698949793958895603395899589959485949093638abf607793828401939092829003018186803b1580156100ec57600080fd5b505afa158015610100573d6000803e3d6000fd5b505050506040513d602081101561011657600080fd5b5051604080517f06661abd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916306661abd9160048082019260a092909190829003018186803b15801561017357600080fd5b505afa158015610187573d6000803e3d6000fd5b505050506040513d60a081101561019d57600080fd5b50604081015160809091015190925090508061021a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4e6f7420726561647920666f722070726f706f73616c73000000000000000000604482015290519081900360640190fd5b6002810482101561028c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f41637469766520776569676874203c20312f3220657665722077656967687400604482015290519081900360640190fd5b600160ff8616101561029a57fe5b606460ff861611156102a857fe5b6008829055606460ff8616830204600955603360ff8616106102cf57600954600a556102da565b60646033830204600a555b6000600954116102e657fe5b6000600a54116102f257fe5b5050600d80546001600160a01b03199081163317909155600180546001600160a01b039b8c16908316179055600c805499909a1698169790971790975550505050505050610e1e806103456000396000f3fe6080604052600436106101755760003560e01c80637b352962116100cb578063aec2ccae1161007f578063c86e6c1511610059578063c86e6c15146103da578063e5225381146103ef578063fe7334e81461040457610175565b8063aec2ccae14610370578063c2472ef8146103b0578063c40a70f8146103c557610175565b80638abf6077116100b05780638abf60771461033157806391840a6b14610346578063990a663b1461035b57610175565b80637b3529621461030757806383197ef01461031c57610175565b80633d1db3e91161012d57806360f96a8f1161010757806360f96a8f146102c857806375df0f99146102dd5780637639b1eb146102f257610175565b80633d1db3e9146102755780635051a5ec1461028a57806356c2a0a1146102b357610175565b806329dcb0cf1161015e57806329dcb0cf146102415780632ded3227146102565780633ccfd60b1461026057610175565b806302d05d3f146101dc5780630b62be451461021a575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420616c6c6f776564000000000000000000000000000000000000000000604482015290519081900360640190fd5b3480156101e857600080fd5b506101f1610419565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561022657600080fd5b5061022f610435565b60408051918252519081900360200190f35b34801561024d57600080fd5b5061022f61043b565b61025e610441565b005b34801561026c57600080fd5b5061025e6104d1565b34801561028157600080fd5b5061022f61058e565b34801561029657600080fd5b5061029f610594565b604080519115158252519081900360200190f35b3480156102bf57600080fd5b5061025e6105e1565b3480156102d457600080fd5b506101f16105f4565b3480156102e957600080fd5b5061022f610610565b3480156102fe57600080fd5b5061022f610616565b34801561031357600080fd5b5061029f61061c565b34801561032857600080fd5b5061025e610646565b34801561033d57600080fd5b506101f16106e7565b34801561035257600080fd5b5061022f610703565b34801561036757600080fd5b5061022f610709565b34801561037c57600080fd5b5061029f6004803603602081101561039357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661070f565b3480156103bc57600080fd5b5061025e610724565b3480156103d157600080fd5b506101f1610737565b3480156103e657600080fd5b5061022f610753565b3480156103fb57600080fd5b5061025e610759565b34801561041057600080fd5b506101f1610aae565b600d5473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60035481565b600d5473ffffffffffffffffffffffffffffffffffffffff1633146104c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b6005805434019055565b6104d9610594565b61054457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f742061636365707465640000000000000000000000000000000000000000604482015290519081900360640190fd5b60045460405173ffffffffffffffffffffffffffffffffffffffff90911690303180156108fc02916000818181858888f1935050505015801561058b573d6000803e3d6000fd5b50565b600a5481565b6000600a54600654106105a9575060016105de565b6105b161061c565b6105bd575060006105de565b6009546007546006540110156105d5575060006105de565b50600754600654115b90565b6105e9610aca565b600780549091019055565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60065481565b6000426003541115806106335750600a5460065410155b806106415750600a54600754115b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106cc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60045473ffffffffffffffffffffffffffffffffffffffff16ff5b600c5473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60055481565b600b6020526000908152604090205460ff1681565b61072c610aca565b600680549091019055565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b61076161061c565b80156107725750610770610594565b155b6107dd57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f4e6f7420636f6c6c65637461626c650000000000000000000000000000000000604482015290519081900360640190fd5b60015473ffffffffffffffffffffffffffffffffffffffff16331461086357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4f6e6c7920706172656e74000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d60208110156108f657600080fd5b5051604080517fa2731784000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff84169163a2731784916004808301926020929190829003018186803b15801561096457600080fd5b505afa158015610978573d6000803e3d6000fd5b505050506040513d602081101561098e57600080fd5b5051604080517f8abf6077000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691638abf607791600480820192602092909190829003018186803b1580156109f857600080fd5b505afa158015610a0c573d6000803e3d6000fd5b505050506040513d6020811015610a2257600080fd5b5051604080517fd7bb99ba000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163d7bb99ba91303191600480830192600092919082900301818588803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60004260035411610b3c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f46696e6973686564000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba557600080fd5b505afa158015610bb9573d6000803e3d6000fd5b505050506040513d6020811015610bcf57600080fd5b5051604080517fb83e160500000000000000000000000000000000000000000000000000000000815233600482018190529151929350909160009173ffffffffffffffffffffffffffffffffffffffff85169163b83e16059160248082019260c092909190829003018186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060c0811015610c8157600080fd5b50608081015160a09091015160025491955091508110610d0257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4e6f7420656c696769626c650000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600b602052604090205460ff1615610d9757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f416c726561647920766f74656400000000000000000000000000000000000000604482015290519081900360640190fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600b6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055509056fea265627a7a72315820d0810e12876e340390be5f8f5edaf0cf08e0e97d5eb528a5a7b685294b74986164736f6c634300050b0032a265627a7a72315820309bd9b1eb71078fbc9ef0f209720d31be5de9dd1c454987e5e3d8968394f9e464736f6c634300050b0032`

// SporkRegistryV2 is an auto generated Go binding around an Ethereum contract.
type SporkRegistryV2 struct {
	SporkRegistryV2Caller     // Read-only binding to the contract
	SporkRegistryV2Transactor // Write-only binding to the contract
	SporkRegistryV2Filterer   // Log filterer for contract events
}

// SporkRegistryV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type SporkRegistryV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SporkRegistryV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SporkRegistryV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SporkRegistryV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SporkRegistryV2Session struct {
	Contract     *SporkRegistryV2  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SporkRegistryV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SporkRegistryV2CallerSession struct {
	Contract *SporkRegistryV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// SporkRegistryV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SporkRegistryV2TransactorSession struct {
	Contract     *SporkRegistryV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// SporkRegistryV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type SporkRegistryV2Raw struct {
	Contract *SporkRegistryV2 // Generic contract binding to access the raw methods on
}

// SporkRegistryV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SporkRegistryV2CallerRaw struct {
	Contract *SporkRegistryV2Caller // Generic read-only contract binding to access the raw methods on
}

// SporkRegistryV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SporkRegistryV2TransactorRaw struct {
	Contract *SporkRegistryV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSporkRegistryV2 creates a new instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2(address common.Address, backend bind.ContractBackend) (*SporkRegistryV2, error) {
	contract, err := bindSporkRegistryV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2{SporkRegistryV2Caller: SporkRegistryV2Caller{contract: contract}, SporkRegistryV2Transactor: SporkRegistryV2Transactor{contract: contract}, SporkRegistryV2Filterer: SporkRegistryV2Filterer{contract: contract}}, nil
}

// NewSporkRegistryV2Caller creates a new read-only instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2Caller(address common.Address, caller bind.ContractCaller) (*SporkRegistryV2Caller, error) {
	contract, err := bindSporkRegistryV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2Caller{contract: contract}, nil
}

// NewSporkRegistryV2Transactor creates a new write-only instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2Transactor(address common.Address, transactor bind.ContractTransactor) (*SporkRegistryV2Transactor, error) {
	contract, err := bindSporkRegistryV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2Transactor{contract: contract}, nil
}

// NewSporkRegistryV2Filterer creates a new log filterer instance of SporkRegistryV2, bound to a specific deployed contract.
func NewSporkRegistryV2Filterer(address common.Address, filterer bind.ContractFilterer) (*SporkRegistryV2Filterer, error) {
	contract, err := bindSporkRegistryV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SporkRegistryV2Filterer{contract: contract}, nil
}

// bindSporkRegistryV2 binds a generic wrapper to an already deployed contract.
func bindSporkRegistryV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SporkRegistryV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SporkRegistryV2 *SporkRegistryV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SporkRegistryV2.Contract.SporkRegistryV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SporkRegistryV2 *SporkRegistryV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.SporkRegistryV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SporkRegistryV2 *SporkRegistryV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.SporkRegistryV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SporkRegistryV2 *SporkRegistryV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SporkRegistryV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SporkRegistryV2 *SporkRegistryV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SporkRegistryV2 *SporkRegistryV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.contract.Transact(opts, method, params...)
}

// EmergencySigner is a free data retrieval call binding the contract method 0xd4f7068a.
//
// Solidity: function Emergency_signer() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Caller) EmergencySigner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV2.contract.Call(opts, out, "Emergency_signer")
	return *ret0, err
}

// EmergencySigner is a free data retrieval call binding the contract method 0xd4f7068a.
//
// Solidity: function Emergency_signer() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Session) EmergencySigner() (common.Address, error) {
	return _SporkRegistryV2.Contract.EmergencySigner(&_SporkRegistryV2.CallOpts)
}

// EmergencySigner is a free data retrieval call binding the contract method 0xd4f7068a.
//
// Solidity: function Emergency_signer() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) EmergencySigner() (common.Address, error) {
	return _SporkRegistryV2.Contract.EmergencySigner(&_SporkRegistryV2.CallOpts)
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV2 *SporkRegistryV2Caller) ConsensusGasLimits(opts *bind.CallOpts) (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	ret := new(struct {
		CallGas *big.Int
		XferGas *big.Int
	})
	out := ret
	err := _SporkRegistryV2.contract.Call(opts, out, "consensusGasLimits")
	return *ret, err
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV2 *SporkRegistryV2Session) ConsensusGasLimits() (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	return _SporkRegistryV2.Contract.ConsensusGasLimits(&_SporkRegistryV2.CallOpts)
}

// ConsensusGasLimits is a free data retrieval call binding the contract method 0xc00ebced.
//
// Solidity: function consensusGasLimits() constant returns(uint256 callGas, uint256 xferGas)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) ConsensusGasLimits() (struct {
	CallGas *big.Int
	XferGas *big.Int
}, error) {
	return _SporkRegistryV2.Contract.ConsensusGasLimits(&_SporkRegistryV2.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Caller) MnregistryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV2.contract.Call(opts, out, "mnregistry_proxy")
	return *ret0, err
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Session) MnregistryProxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.MnregistryProxy(&_SporkRegistryV2.CallOpts)
}

// MnregistryProxy is a free data retrieval call binding the contract method 0xfe7334e8.
//
// Solidity: function mnregistry_proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) MnregistryProxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.MnregistryProxy(&_SporkRegistryV2.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _SporkRegistryV2.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2Session) Proxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.Proxy(&_SporkRegistryV2.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_SporkRegistryV2 *SporkRegistryV2CallerSession) Proxy() (common.Address, error) {
	return _SporkRegistryV2.Contract.Proxy(&_SporkRegistryV2.CallOpts)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV2 *SporkRegistryV2Transactor) CreateUpgradeProposal(opts *bind.TransactOpts, _impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.contract.Transact(opts, "createUpgradeProposal", _impl, _period, _fee_payer)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV2 *SporkRegistryV2Session) CreateUpgradeProposal(_impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.CreateUpgradeProposal(&_SporkRegistryV2.TransactOpts, _impl, _period, _fee_payer)
}

// CreateUpgradeProposal is a paid mutator transaction binding the contract method 0x62877ccd.
//
// Solidity: function createUpgradeProposal(address _impl, uint256 _period, address _fee_payer) returns(address proposal)
func (_SporkRegistryV2 *SporkRegistryV2TransactorSession) CreateUpgradeProposal(_impl common.Address, _period *big.Int, _fee_payer common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.CreateUpgradeProposal(&_SporkRegistryV2.TransactOpts, _impl, _period, _fee_payer)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Destroy(&_SporkRegistryV2.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Destroy(&_SporkRegistryV2.TransactOpts, _newImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Migrate(&_SporkRegistryV2.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_SporkRegistryV2 *SporkRegistryV2TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _SporkRegistryV2.Contract.Migrate(&_SporkRegistryV2.TransactOpts, _oldImpl)
}
