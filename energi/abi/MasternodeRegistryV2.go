// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MasternodeRegistryV2ABI is the input ABI used to generate the binding from.
const MasternodeRegistryV2ABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"active_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_of_all_times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validation_periods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_masternode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"last_block_number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"internalType\":\"contractStorageMasternodeRegistryV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curr_validation_ends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"require_validation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"invalidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mn_status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sw_features\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next_heartbeat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactive_since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validator_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invalidations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seq_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_vote_epoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validator_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced_collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cleanup_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active_collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curr_validation_offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"block_number\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"block_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sw_features\",\"type\":\"uint256\"}],\"name\":\"heartbeat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"validationTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"denounce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_ever_collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"onCollateralUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"canInvalidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"can_invalidate\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"}],\"name\":\"announce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"canHeartbeat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"can_heartbeat\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateActive\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"masternodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"masternodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_token_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_treasury_proxy\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"_config\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"Announced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Denounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Invalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Deactivated\",\"type\":\"event\"}]"

// MasternodeRegistryV2Bin is the compiled bytecode used for deploying new contracts.
const MasternodeRegistryV2Bin = `60806040523480156200001157600080fd5b5060405162004ba238038062004ba2833981810160405260e08110156200003757600080fd5b5080516020820151604080840151600080546001600160a01b0319166001600160a01b038616179055905192939192909160600190620000779062000259565b604051809103906000f08015801562000094573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b03938416179091556003805482168684161790556004805490911691841691909117905580516008819055602082015160098190556040830151600a5511156200015757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f56616c69646174696f6e73203e20526571756972650000000000000000000000604482015290519081900360640190fd5b6060810151600b819055683635c9adc5dea00000811015620001da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e697469616c20636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b620001ed6001600160e01b03620001f816565b505050505062000267565b60125443106200025757601054600954808210156200021957505062000257565b60008183816200022557fe5b04905081811015620002345750805b43808201601255600019808501910140816200024c57fe5b066001016013555050505b565b61097b806200422783390190565b613fb080620002776000396000f3fe6080604052600436106102845760003560e01c806384afd47f11610153578063cb4f40c5116100cb578063d9966aba1161007f578063e2cb219511610064578063e2cb2195146109bd578063ec556889146109eb578063ff9f78b314610a0057610284565b8063d9966aba14610918578063e1d6f43a1461095857610284565b8063ce5494bb116100b0578063ce5494bb14610847578063d13ef5a514610887578063d70d5c30146108c757610284565b8063cb4f40c5146107f2578063cdc7d4ad1461080757610284565b8063a273178411610122578063b83e160511610107578063b83e160514610732578063c3db74d614610772578063ca0e551f146107b257610284565b8063a273178414610708578063ab00fdc41461071d57610284565b806384afd47f1461065457806391ceac96146106695780639c5e8ae21461069f5780639f8a13d7146106b457610284565b80632e941dc411610201578063521f284d116101b55780635f6e2c7b1161019a5780635f6e2c7b146106155780636d41ff4e1461062a57806373b245401461063f57610284565b8063521f284d146105eb57806357f2a7d81461060057610284565b806337a3931f116101e657806337a3931f146105095780634d1b4dae146105495780634e60b981146105c157610284565b80632e941dc4146104df57806335ab13f6146104f457610284565b80631a26763c116102585780631eeaebb21161023d5780631eeaebb2146104ad578063228cb733146104c25780632d059305146104ca57610284565b80631a26763c146104455780631c4b774b1461048357610284565b8062f55d9d146102eb57806306661abd1461032d5780630aae7a6b1461036d57806318a2ac191461041e575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156102f757600080fd5b5061032b6004803603602081101561030e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a15565b005b34801561033957600080fd5b50610342610abd565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561037957600080fd5b506103ad6004803603602081101561039057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ad7565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b838110156103fb5781810151838201526020016103e3565b505050509050018381526020018281526020019550505050505060405180910390f35b34801561042a57600080fd5b50610433610bd6565b60408051918252519081900360200190f35b34801561045157600080fd5b5061045a610bdc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561048f57600080fd5b50610433600480360360208110156104a657600080fd5b5035610bf8565b3480156104b957600080fd5b50610433610d30565b61032b610d36565b3480156104d657600080fd5b5061045a610f9e565b3480156104eb57600080fd5b50610433610fba565b34801561050057600080fd5b50610433610fc0565b34801561051557600080fd5b5061032b6004803603602081101561052c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610fc6565b34801561055557600080fd5b506105896004803603602081101561056c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661138f565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b3480156105cd57600080fd5b5061045a600480360360208110156105e457600080fd5b50356113cc565b3480156105f757600080fd5b50610433611400565b34801561060c57600080fd5b50610433611406565b34801561062157600080fd5b5061043361140c565b34801561063657600080fd5b50610433611412565b34801561064b57600080fd5b50610433611418565b34801561066057600080fd5b5061045a61141e565b34801561067557600080fd5b5061032b6004803603606081101561068c57600080fd5b508035906020810135906040013561143a565b3480156106ab57600080fd5b506104336116ea565b3480156106c057600080fd5b506106f4600480360360208110156106d757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116f0565b604080519115158252519081900360200190f35b34801561071457600080fd5b5061045a611728565b34801561072957600080fd5b50610433611744565b34801561073e57600080fd5b506103ad6004803603602081101561075557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661174a565b34801561077e57600080fd5b5061045a6004803603602081101561079557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118c9565b3480156107be57600080fd5b5061032b600480360360208110156107d557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611951565b3480156107fe57600080fd5b506104336119d5565b34801561081357600080fd5b5061032b6004803603602081101561082a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166119db565b34801561085357600080fd5b5061032b6004803603602081101561086a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bff565b34801561089357600080fd5b506106f4600480360360208110156108aa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611c91565b3480156108d357600080fd5b5061032b600480360360808110156108ea57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611d18565b34801561092457600080fd5b506106f46004803603602081101561093b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611de6565b34801561096457600080fd5b5061096d611e29565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156109a9578181015183820152602001610991565b505050509050019250505060405180910390f35b3480156109c957600080fd5b506109d2611edb565b6040805192835260208301919091528051918290030190f35b3480156109f757600080fd5b5061045a611ef4565b348015610a0c57600080fd5b5061096d611f10565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a9b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610aa481611fe5565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600e54600554600c54600d54600b54939492939192909190565b600080610ae2613edc565b600080610aed613efa565b600254610b109073ffffffffffffffffffffffffffffffffffffffff1688612074565b608081015190915073ffffffffffffffffffffffffffffffffffffffff16610b9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60095481565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610c6257600080fd5b505afa158015610c76573d6000803e3d6000fd5b505050506040513d6020811015610c8c57600080fd5b505190508215801590610d1957508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ceb57600080fd5b505afa158015610cff573d6000803e3d6000fd5b505050506040513d6020811015610d1557600080fd5b5051155b15610d2a57677ed7cd92ff12000091505b50919050565b60115481565b60015415610da557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315610ed3576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2057600080fd5b505afa158015610e34573d6000803e3d6000fd5b505050506040513d6020811015610e4a57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b5050505050505b677ed7cd92ff120000341415610f96574360115410610f5357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b43601155610f5f6121a6565b620186a05a11610f6b57fe5b34303114610f7557fe5b620186a05a118015610f8c5750610f8a61221f565b155b15610f9657610f75565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b60085481565b6001541561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600061104361248f565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69646174696f6e20666f722073656c660000000000000000000000604482015290519081900360640190fd5b60125473ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020526040902061111283826124be565b61117d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b818160060154106111ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f416c726561647920696e76616c69646174656400000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1661120f846118c9565b73ffffffffffffffffffffffffffffffffffffffff161461129157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420746172676574000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f602052604090206112c085826124be565b61132b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b60068201839055600481018054600101905560405173ffffffffffffffffffffffffffffffffffffffff80861691908716907f389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d33190600090a350506000600155505050565b600f602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b601081815481106113d957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600e5481565b600d5481565b600a5481565b600c5481565b60135481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600154156114a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561154257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b818340146115b157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b60006115bb61248f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604090209091506115ed82826124be565b61165857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b42816001015411156116cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6116d361250d565b420160018083019190915592905550600090555050565b60075481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604081206117209083906124be565b90505b919050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080611755613edc565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b1580156117cd57600080fd5b505afa1580156117e1573d6000803e3d6000fd5b505050506040513d60208110156117f757600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff861661187d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b611885613efa565b61188f8288612074565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b60105460135460009190808214156118df576001015b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040902060030154601354839082018161191657fe5b0690506010818154811061192657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1695945050505050565b600154156119c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055610f96816119d061248f565b612524565b600b5481565b60015415611a4a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d6020811015611af057600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611b16575050610f96565b600080611b22856129d0565b91509150611b2e613efa565b600254611b519073ffffffffffffffffffffffffffffffffffffffff1685612074565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600f6020526040812091925090611b8690838686612b10565b90506001816003811115611b9657fe5b1415611bf157683635c9adc5dea000008410611be75760e0820151611bb9613edc565b5060408051808201825290840151815260608401516020820152611be0878a888585612b6f565b5050611bf1565b611bf18588612524565b505050505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611c8e81612eba565b50565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260408120611cc083826124be565b8015611cd157506012548160060154105b8015611d1157508273ffffffffffffffffffffffffffffffffffffffff16611cf8846118c9565b73ffffffffffffffffffffffffffffffffffffffff1614155b9392505050565b60015415611d8757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611d9561248f565b90506000611da28261377c565b9050611dda85838387876002806020026040519081016040528092919082600260200280828437600092019190915250612b6f915050565b50506000600155505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260408120611e1583826124be565b8015611d1157506001015442101592915050565b6060600e54604051908082528060200260200182016040528015611e57578160200160208202803883390190505b50905060005b8151811015611ed75760108181548110611e7357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611eaa57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611e5d565b5090565b683635c9adc5dea000009069152d02c7e14af680000090565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6060600554604051908082528060200260200182016040528015611f3e578160200160208202803883390190505b5060065490915073ffffffffffffffffffffffffffffffffffffffff1680611f665750611fe2565b80611f6f613efa565b60005b82858281518110611f7f57fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254611fb0911684612074565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff8084169085161415611f7257505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b15801561205957600080fd5b505af115801561206d573d6000803e3d6000fd5b5050505050565b61207c613efa565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b1580156120fa57600080fd5b505afa15801561210e573d6000803e3d6000fd5b505050506040513d61010081101561212557600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b601254431061221d57601054600954808210156121c457505061221d565b60008183816121cf57fe5b049050818110156121dd5750805b438082016012557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085019101408161221257fe5b066001016013555050505b565b60065460075460009173ffffffffffffffffffffffffffffffffffffffff16908161224f57600192505050611fe2565b612257613efa565b60025461227a9073ffffffffffffffffffffffffffffffffffffffff1684612074565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f602052604090206004810154600582015460019095019492935090918410156122c557600784905561231b565b60006004830181905560c0840151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556007555b60006123278385613802565b9050600081600381111561233757fe5b1415612399576123468261382d565b15806123855750608084015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b156123995760019650505050505050611fe2565b60018160038111156123a757fe5b14156123c0576123bb868560800151612524565b612482565b600583015415612464576000600584015542600284015560208401516123e790879061385e565b60c0840151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831617905560006007819055604051918816917f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c009190a2612482565b600a5483600201544203111561248257612482868560800151612524565b6000965050505050505090565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156124b7575032611fe2565b5033611fe2565b60006124c8613efa565b6002546124eb9073ffffffffffffffffffffffffffffffffffffffff1685612074565b905060006124f98483613802565b600381111561250457fe5b14949350505050565b600e54600402610708811015611fe2575061070890565b60025473ffffffffffffffffffffffffffffffffffffffff16612545613efa565b61254f8285612074565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166125785750506129cc565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461261657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff16141561267b57600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055612849565b60065473ffffffffffffffffffffffffffffffffffffffff858116911614156126ed5760c0810151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560006007555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b15801561278457600080fd5b505af1158015612798573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b15801561283057600080fd5b505af1158015612844573d6000803e3d6000fd5b505050505b602080820151600d805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600f9091526040902060050154156128955761289584826020015161385e565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600f6020526040808220828155600181018390556002810183905560038101839055600480820184905560058201849055600690910183905581517f72f5f2570000000000000000000000000000000000000000000000000000000081529081019390935251928516926372f5f25792602480820193929182900301818387803b15801561293f57600080fd5b505af1158015612953573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3b57600080fd5b505afa158015612a4f573d6000803e3d6000fd5b505050506040513d6020811015612a6557600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015282519316926378c7d97992602480840193919291829003018186803b158015612ad357600080fd5b505afa158015612ae7573d6000803e3d6000fd5b505050506040513d6040811015612afd57600080fd5b5080516020909101519094909350915050565b6000846005015460001415612b2757506002612b67565b6001850154611c2001421115612b3f57506003612b67565b83602001518314612b5257506001612b67565b8351821115612b6357506001612b67565b5060005b949350505050565b60025473ffffffffffffffffffffffffffffffffffffffff16612b9281866139b3565b612b9c8187613a86565b612ba583613b22565b600080612bb28389613d01565b915091508273ffffffffffffffffffffffffffffffffffffffff1663f71169df898988888b43888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280838360005b83811015612c87578181015183820152602001612c6f565b505050509050018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015612d2257600080fd5b505af1158015612d36573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f60205260409020612d6761250d565b42016001820155683635c9adc5dea000008704600580830191909155600e805460019081019091558154019055600c805488019055600d8054880190819055600b54811115612db657600b8190555b601080546003840181905560018101825560009182527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8d81169182179092556040805163ffffffff8c168152928d169391927f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09928c928c928f92909160208301918591908190849084905b83811015612e94578181015183820152602001612e7c565b50505050905001828152602001935050505060405180910390a350505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f2457600080fd5b505af1158015612f38573d6000803e3d6000fd5b5050505060008190508073ffffffffffffffffffffffffffffffffffffffff16632d0593056040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8757600080fd5b505afa158015612f9b573d6000803e3d6000fd5b505050506040513d6020811015612fb157600080fd5b5051600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517fab00fdc400000000000000000000000000000000000000000000000000000000815290519183169163ab00fdc491600480820192602092909190829003018186803b15801561304757600080fd5b505afa15801561305b573d6000803e3d6000fd5b505050506040513d602081101561307157600080fd5b5051600555604080517f1a26763c000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691631a26763c916004808301926020929190829003018186803b1580156130dc57600080fd5b505afa1580156130f0573d6000803e3d6000fd5b505050506040513d602081101561310657600080fd5b5051600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517f9c5e8ae2000000000000000000000000000000000000000000000000000000008152905191831691639c5e8ae291600480820192602092909190829003018186803b15801561319c57600080fd5b505afa1580156131b0573d6000803e3d6000fd5b505050506040513d60208110156131c657600080fd5b5051600755604080517fcb4f40c5000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163cb4f40c5916004808301926020929190829003018186803b15801561323157600080fd5b505afa158015613245573d6000803e3d6000fd5b505050506040513d602081101561325b57600080fd5b5051600b55604080517f6d41ff4e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691636d41ff4e916004808301926020929190829003018186803b1580156132c657600080fd5b505afa1580156132da573d6000803e3d6000fd5b505050506040513d60208110156132f057600080fd5b5051600c55604080517f57f2a7d8000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8316916357f2a7d8916004808301926020929190829003018186803b15801561335b57600080fd5b505afa15801561336f573d6000803e3d6000fd5b505050506040513d602081101561338557600080fd5b5051600d55604080517f521f284d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163521f284d916004808301926020929190829003018186803b1580156133f057600080fd5b505afa158015613404573d6000803e3d6000fd5b505050506040513d602081101561341a57600080fd5b5051600e55604080517fff9f78b3000000000000000000000000000000000000000000000000000000008152905160609173ffffffffffffffffffffffffffffffffffffffff84169163ff9f78b391600480820192600092909190829003018186803b15801561348957600080fd5b505afa15801561349d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156134e457600080fd5b810190808051604051939291908464010000000082111561350457600080fd5b90830190602082018581111561351957600080fd5b825186602082028301116401000000008211171561353657600080fd5b82525081516020918201928201910280838360005b8381101561356357818101518382015260200161354b565b5050505091909101604052505043601155505080519091505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101901561376e5760008282815181106135b357fe5b602002602001015190506135c5613f3e565b8473ffffffffffffffffffffffffffffffffffffffff16634d1b4dae836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b15801561364357600080fd5b505afa158015613657573d6000803e3d6000fd5b505050506040513d61010081101561366e57600080fd5b50805160408083015160a08085015160c08087015160e090970151908801908152918701958652608087019081528684019283529386526004888102420160208089019182526010805460608b0181815260018083019093557f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9d909d169c8d17905560009b8c52600f909252959099209751885551938701939093559051600286015594516003850155905190830155516005820155905160069091015561357c565b506137776121a6565b505050565b6000613787826129d0565b509050683635c9adc5dea0000081101561172357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b600080600061381484608001516129d0565b9150915061382485858484612b10565b95945050505050565b6000600854600e54101561384357506001611723565b600060026009546001018161385457fe5b0490921092915050565b60108054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061389257fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8681168452600f909252604080842060039081015493909216808552932001819055601080549293509091839190839081106138ed57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601080548061394057fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055908101909155600e805490910190555050600c805491909103905550565b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613a3257600080fd5b505afa158015613a46573d6000803e3d6000fd5b505050506040513d6020811015613a5c57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811615613777576137778183612524565b613a8e613efa565b613a988383612074565b608081015190915073ffffffffffffffffffffffffffffffffffffffff161561377757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff0000821661ff008316637f0000008314801590613b4c575082630a00000014155b8015613b6a57508263c0000000148015613b6857508162a80000145b155b8015613b8d57508263ac000000148015613b8b57508162f000001662100000145b155b8015613b9857508215155b8015613bbb5750826364000000148015613bb957508162c000001662400000145b155b8015613bd957508263a9000000148015613bd757508162fe0000145b155b8015613bfc57508263c6000000148015613bfa57508162fe00001662120000145b155b8015613c2757508263c6000000148015613c1857508162330000145b8015613c25575080616400145b155b8015613c4e57508263cb000000148015613c3f575081155b8015613c4c575080617100145b155b8015613c6457508263f00000001663e000000014155b8015613c7a57508263f00000001663f000000014155b8015613c9057508363ffffffff1663ffffffff14155b613cfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b60065473ffffffffffffffffffffffffffffffffffffffff1660008115613e8b57613d2a613efa565b613d348584612074565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b158015613dca57600080fd5b505af1158015613dde573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b158015613e6d57600080fd5b505af1158015613e81573d6000803e3d6000fd5b5050505050613ed5565b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600060075580805b9250929050565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509056fea265627a7a72315820a99ff71acccf7b0f6c4a203b8ba3c45cdfdb6f66f57997fcb3dae9d599dbf18964736f6c634300050b00326080604052600080546001600160a01b03191633179055610956806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063412cbac01161005b578063412cbac01461016857806341c0e1b5146101fa57806372f5f25714610202578063f71169df146102355761007d565b806313af4035146100825780631f9579ca146100b757806328d566be1461010c575b600080fd5b6100b56004803603602081101561009857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661029f565b005b6100b5600480360360a08110156100cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135151591604082013581169160608101351515916080909101351661036c565b61013f6004803603602081101561012257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104b1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61019b6004803603602081101561017e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104d9565b60408051988952602089019790975287870195909552606087019390935273ffffffffffffffffffffffffffffffffffffffff9182166080870152811660a08601521660c084015263ffffffff1660e083015251908190036101000190f35b6100b5610551565b6100b56004803603602081101561021857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105da565b6100b5600480360361012081101561024c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169163ffffffff60408301351691606081019160a08201359160c08101359160e0820135811691610100013516610720565b60005473ffffffffffffffffffffffffffffffffffffffff16331461032557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602052604090208415610460576005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b82156104a9576006810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b505050505050565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015493949293919273ffffffffffffffffffffffffffffffffffffffff918216929082169181169074010000000000000000000000000000000000000000900463ffffffff1688565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b33ff5b60005473ffffffffffffffffffffffffffffffffffffffff16331461066057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff90811660008181526001602081815260408084206004810180549097168552600280845291852080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915595855291839052838255918101839055908101829055600381019190915582548216909255600582018054909116905560060180547fffffffffffffffff000000000000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff80891660009081526001602052604090206004810154909190811690891681146108515773ffffffffffffffffffffffffffffffffffffffff8116156107fd57fe5b73ffffffffffffffffffffffffffffffffffffffff898116600090815260026020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918c169190911790555b5060048101805473ffffffffffffffffffffffffffffffffffffffff998a167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600682018054883560028501556020909801356003840155600183019690965593815560050180549288169284169290921790915590941663ffffffff9390931674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179092161790555056fea265627a7a723158206cfb90b6412c3168baddb34a1af45cbcc329d1eaee3f6a5ed18fbf25a427048164736f6c634300050b0032`

// DeployMasternodeRegistryV2 deploys a new Ethereum contract, binding an instance of MasternodeRegistryV2 to it.
func DeployMasternodeRegistryV2(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _token_proxy common.Address, _treasury_proxy common.Address, _config [4]*big.Int) (common.Address, *types.Transaction, *MasternodeRegistryV2, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MasternodeRegistryV2Bin), backend, _proxy, _token_proxy, _treasury_proxy, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MasternodeRegistryV2{MasternodeRegistryV2Caller: MasternodeRegistryV2Caller{contract: contract}, MasternodeRegistryV2Transactor: MasternodeRegistryV2Transactor{contract: contract}, MasternodeRegistryV2Filterer: MasternodeRegistryV2Filterer{contract: contract}}, nil
}

// MasternodeRegistryV2Bin is the compiled bytecode of contract after deployment.
const MasternodeRegistryV2RuntimeBin = `6080604052600436106102845760003560e01c806384afd47f11610153578063cb4f40c5116100cb578063d9966aba1161007f578063e2cb219511610064578063e2cb2195146109bd578063ec556889146109eb578063ff9f78b314610a0057610284565b8063d9966aba14610918578063e1d6f43a1461095857610284565b8063ce5494bb116100b0578063ce5494bb14610847578063d13ef5a514610887578063d70d5c30146108c757610284565b8063cb4f40c5146107f2578063cdc7d4ad1461080757610284565b8063a273178411610122578063b83e160511610107578063b83e160514610732578063c3db74d614610772578063ca0e551f146107b257610284565b8063a273178414610708578063ab00fdc41461071d57610284565b806384afd47f1461065457806391ceac96146106695780639c5e8ae21461069f5780639f8a13d7146106b457610284565b80632e941dc411610201578063521f284d116101b55780635f6e2c7b1161019a5780635f6e2c7b146106155780636d41ff4e1461062a57806373b245401461063f57610284565b8063521f284d146105eb57806357f2a7d81461060057610284565b806337a3931f116101e657806337a3931f146105095780634d1b4dae146105495780634e60b981146105c157610284565b80632e941dc4146104df57806335ab13f6146104f457610284565b80631a26763c116102585780631eeaebb21161023d5780631eeaebb2146104ad578063228cb733146104c25780632d059305146104ca57610284565b80631a26763c146104455780631c4b774b1461048357610284565b8062f55d9d146102eb57806306661abd1461032d5780630aae7a6b1461036d57806318a2ac191461041e575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b3480156102f757600080fd5b5061032b6004803603602081101561030e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610a15565b005b34801561033957600080fd5b50610342610abd565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561037957600080fd5b506103ad6004803603602081101561039057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ad7565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b838110156103fb5781810151838201526020016103e3565b505050509050018381526020018281526020019550505050505060405180910390f35b34801561042a57600080fd5b50610433610bd6565b60408051918252519081900360200190f35b34801561045157600080fd5b5061045a610bdc565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561048f57600080fd5b50610433600480360360208110156104a657600080fd5b5035610bf8565b3480156104b957600080fd5b50610433610d30565b61032b610d36565b3480156104d657600080fd5b5061045a610f9e565b3480156104eb57600080fd5b50610433610fba565b34801561050057600080fd5b50610433610fc0565b34801561051557600080fd5b5061032b6004803603602081101561052c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610fc6565b34801561055557600080fd5b506105896004803603602081101561056c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661138f565b604080519788526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b3480156105cd57600080fd5b5061045a600480360360208110156105e457600080fd5b50356113cc565b3480156105f757600080fd5b50610433611400565b34801561060c57600080fd5b50610433611406565b34801561062157600080fd5b5061043361140c565b34801561063657600080fd5b50610433611412565b34801561064b57600080fd5b50610433611418565b34801561066057600080fd5b5061045a61141e565b34801561067557600080fd5b5061032b6004803603606081101561068c57600080fd5b508035906020810135906040013561143a565b3480156106ab57600080fd5b506104336116ea565b3480156106c057600080fd5b506106f4600480360360208110156106d757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166116f0565b604080519115158252519081900360200190f35b34801561071457600080fd5b5061045a611728565b34801561072957600080fd5b50610433611744565b34801561073e57600080fd5b506103ad6004803603602081101561075557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661174a565b34801561077e57600080fd5b5061045a6004803603602081101561079557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118c9565b3480156107be57600080fd5b5061032b600480360360208110156107d557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611951565b3480156107fe57600080fd5b506104336119d5565b34801561081357600080fd5b5061032b6004803603602081101561082a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166119db565b34801561085357600080fd5b5061032b6004803603602081101561086a57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611bff565b34801561089357600080fd5b506106f4600480360360208110156108aa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611c91565b3480156108d357600080fd5b5061032b600480360360808110156108ea57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611d18565b34801561092457600080fd5b506106f46004803603602081101561093b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611de6565b34801561096457600080fd5b5061096d611e29565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156109a9578181015183820152602001610991565b505050509050019250505060405180910390f35b3480156109c957600080fd5b506109d2611edb565b6040805192835260208301919091528051918290030190f35b3480156109f757600080fd5b5061045a611ef4565b348015610a0c57600080fd5b5061096d611f10565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a9b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b610aa481611fe5565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600e54600554600c54600d54600b54939492939192909190565b600080610ae2613edc565b600080610aed613efa565b600254610b109073ffffffffffffffffffffffffffffffffffffffff1688612074565b608081015190915073ffffffffffffffffffffffffffffffffffffffff16610b9957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60095481565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610c6257600080fd5b505afa158015610c76573d6000803e3d6000fd5b505050506040513d6020811015610c8c57600080fd5b505190508215801590610d1957508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610ceb57600080fd5b505afa158015610cff573d6000803e3d6000fd5b505050506040513d6020811015610d1557600080fd5b5051155b15610d2a57677ed7cd92ff12000091505b50919050565b60115481565b60015415610da557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315610ed3576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2057600080fd5b505afa158015610e34573d6000803e3d6000fd5b505050506040513d6020811015610e4a57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b158015610eb857600080fd5b505af1158015610ecc573d6000803e3d6000fd5b5050505050505b677ed7cd92ff120000341415610f96574360115410610f5357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b43601155610f5f6121a6565b620186a05a11610f6b57fe5b34303114610f7557fe5b620186a05a118015610f8c5750610f8a61221f565b155b15610f9657610f75565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b60085481565b6001541561103557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600061104361248f565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69646174696f6e20666f722073656c660000000000000000000000604482015290519081900360640190fd5b60125473ffffffffffffffffffffffffffffffffffffffff82166000908152600f6020526040902061111283826124be565b61117d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b818160060154106111ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f416c726561647920696e76616c69646174656400000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1661120f846118c9565b73ffffffffffffffffffffffffffffffffffffffff161461129157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420746172676574000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f602052604090206112c085826124be565b61132b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b60068201839055600481018054600101905560405173ffffffffffffffffffffffffffffffffffffffff80861691908716907f389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d33190600090a350506000600155505050565b600f602052600090815260409020805460018201546002830154600384015460048501546005860154600690960154949593949293919290919087565b601081815481106113d957fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600e5481565b600d5481565b600a5481565b600c5481565b60135481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600154156114a957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561154257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b818340146115b157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b60006115bb61248f565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604090209091506115ed82826124be565b61165857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b42816001015411156116cb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6116d361250d565b420160018083019190915592905550600090555050565b60075481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604081206117209083906124be565b90505b919050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080611755613edc565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b1580156117cd57600080fd5b505afa1580156117e1573d6000803e3d6000fd5b505050506040513d60208110156117f757600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff861661187d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b611885613efa565b61188f8288612074565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b60105460135460009190808214156118df576001015b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040902060030154601354839082018161191657fe5b0690506010818154811061192657fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1695945050505050565b600154156119c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055610f96816119d061248f565b612524565b600b5481565b60015415611a4a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d6020811015611af057600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611b16575050610f96565b600080611b22856129d0565b91509150611b2e613efa565b600254611b519073ffffffffffffffffffffffffffffffffffffffff1685612074565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600f6020526040812091925090611b8690838686612b10565b90506001816003811115611b9657fe5b1415611bf157683635c9adc5dea000008410611be75760e0820151611bb9613edc565b5060408051808201825290840151815260608401516020820152611be0878a888585612b6f565b5050611bf1565b611bf18588612524565b505050505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c8557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611c8e81612eba565b50565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260408120611cc083826124be565b8015611cd157506012548160060154105b8015611d1157508273ffffffffffffffffffffffffffffffffffffffff16611cf8846118c9565b73ffffffffffffffffffffffffffffffffffffffff1614155b9392505050565b60015415611d8757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611d9561248f565b90506000611da28261377c565b9050611dda85838387876002806020026040519081016040528092919082600260200280828437600092019190915250612b6f915050565b50506000600155505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260408120611e1583826124be565b8015611d1157506001015442101592915050565b6060600e54604051908082528060200260200182016040528015611e57578160200160208202803883390190505b50905060005b8151811015611ed75760108181548110611e7357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611eaa57fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611e5d565b5090565b683635c9adc5dea000009069152d02c7e14af680000090565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6060600554604051908082528060200260200182016040528015611f3e578160200160208202803883390190505b5060065490915073ffffffffffffffffffffffffffffffffffffffff1680611f665750611fe2565b80611f6f613efa565b60005b82858281518110611f7f57fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254611fb0911684612074565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff8084169085161415611f7257505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b15801561205957600080fd5b505af115801561206d573d6000803e3d6000fd5b5050505050565b61207c613efa565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b1580156120fa57600080fd5b505afa15801561210e573d6000803e3d6000fd5b505050506040513d61010081101561212557600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b601254431061221d57601054600954808210156121c457505061221d565b60008183816121cf57fe5b049050818110156121dd5750805b438082016012557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8085019101408161221257fe5b066001016013555050505b565b60065460075460009173ffffffffffffffffffffffffffffffffffffffff16908161224f57600192505050611fe2565b612257613efa565b60025461227a9073ffffffffffffffffffffffffffffffffffffffff1684612074565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f602052604090206004810154600582015460019095019492935090918410156122c557600784905561231b565b60006004830181905560c0840151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556007555b60006123278385613802565b9050600081600381111561233757fe5b1415612399576123468261382d565b15806123855750608084015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b156123995760019650505050505050611fe2565b60018160038111156123a757fe5b14156123c0576123bb868560800151612524565b612482565b600583015415612464576000600584015542600284015560208401516123e790879061385e565b60c0840151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831617905560006007819055604051918816917f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c009190a2612482565b600a5483600201544203111561248257612482868560800151612524565b6000965050505050505090565b6000805473ffffffffffffffffffffffffffffffffffffffff163314156124b7575032611fe2565b5033611fe2565b60006124c8613efa565b6002546124eb9073ffffffffffffffffffffffffffffffffffffffff1685612074565b905060006124f98483613802565b600381111561250457fe5b14949350505050565b600e54600402610708811015611fe2575061070890565b60025473ffffffffffffffffffffffffffffffffffffffff16612545613efa565b61254f8285612074565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166125785750506129cc565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461261657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff16141561267b57600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055612849565b60065473ffffffffffffffffffffffffffffffffffffffff858116911614156126ed5760c0810151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560006007555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b15801561278457600080fd5b505af1158015612798573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b15801561283057600080fd5b505af1158015612844573d6000803e3d6000fd5b505050505b602080820151600d805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600f9091526040902060050154156128955761289584826020015161385e565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600f6020526040808220828155600181018390556002810183905560038101839055600480820184905560058201849055600690910183905581517f72f5f2570000000000000000000000000000000000000000000000000000000081529081019390935251928516926372f5f25792602480820193929182900301818387803b15801561293f57600080fd5b505af1158015612953573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015612a3b57600080fd5b505afa158015612a4f573d6000803e3d6000fd5b505050506040513d6020811015612a6557600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015282519316926378c7d97992602480840193919291829003018186803b158015612ad357600080fd5b505afa158015612ae7573d6000803e3d6000fd5b505050506040513d6040811015612afd57600080fd5b5080516020909101519094909350915050565b6000846005015460001415612b2757506002612b67565b6001850154611c2001421115612b3f57506003612b67565b83602001518314612b5257506001612b67565b8351821115612b6357506001612b67565b5060005b949350505050565b60025473ffffffffffffffffffffffffffffffffffffffff16612b9281866139b3565b612b9c8187613a86565b612ba583613b22565b600080612bb28389613d01565b915091508273ffffffffffffffffffffffffffffffffffffffff1663f71169df898988888b43888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280838360005b83811015612c87578181015183820152602001612c6f565b505050509050018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015612d2257600080fd5b505af1158015612d36573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f60205260409020612d6761250d565b42016001820155683635c9adc5dea000008704600580830191909155600e805460019081019091558154019055600c805488019055600d8054880190819055600b54811115612db657600b8190555b601080546003840181905560018101825560009182527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8d81169182179092556040805163ffffffff8c168152928d169391927f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09928c928c928f92909160208301918591908190849084905b83811015612e94578181015183820152602001612e7c565b50505050905001828152602001935050505060405180910390a350505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612f2457600080fd5b505af1158015612f38573d6000803e3d6000fd5b5050505060008190508073ffffffffffffffffffffffffffffffffffffffff16632d0593056040518163ffffffff1660e01b815260040160206040518083038186803b158015612f8757600080fd5b505afa158015612f9b573d6000803e3d6000fd5b505050506040513d6020811015612fb157600080fd5b5051600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517fab00fdc400000000000000000000000000000000000000000000000000000000815290519183169163ab00fdc491600480820192602092909190829003018186803b15801561304757600080fd5b505afa15801561305b573d6000803e3d6000fd5b505050506040513d602081101561307157600080fd5b5051600555604080517f1a26763c000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691631a26763c916004808301926020929190829003018186803b1580156130dc57600080fd5b505afa1580156130f0573d6000803e3d6000fd5b505050506040513d602081101561310657600080fd5b5051600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517f9c5e8ae2000000000000000000000000000000000000000000000000000000008152905191831691639c5e8ae291600480820192602092909190829003018186803b15801561319c57600080fd5b505afa1580156131b0573d6000803e3d6000fd5b505050506040513d60208110156131c657600080fd5b5051600755604080517fcb4f40c5000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163cb4f40c5916004808301926020929190829003018186803b15801561323157600080fd5b505afa158015613245573d6000803e3d6000fd5b505050506040513d602081101561325b57600080fd5b5051600b55604080517f6d41ff4e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691636d41ff4e916004808301926020929190829003018186803b1580156132c657600080fd5b505afa1580156132da573d6000803e3d6000fd5b505050506040513d60208110156132f057600080fd5b5051600c55604080517f57f2a7d8000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8316916357f2a7d8916004808301926020929190829003018186803b15801561335b57600080fd5b505afa15801561336f573d6000803e3d6000fd5b505050506040513d602081101561338557600080fd5b5051600d55604080517f521f284d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163521f284d916004808301926020929190829003018186803b1580156133f057600080fd5b505afa158015613404573d6000803e3d6000fd5b505050506040513d602081101561341a57600080fd5b5051600e55604080517fff9f78b3000000000000000000000000000000000000000000000000000000008152905160609173ffffffffffffffffffffffffffffffffffffffff84169163ff9f78b391600480820192600092909190829003018186803b15801561348957600080fd5b505afa15801561349d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405260208110156134e457600080fd5b810190808051604051939291908464010000000082111561350457600080fd5b90830190602082018581111561351957600080fd5b825186602082028301116401000000008211171561353657600080fd5b82525081516020918201928201910280838360005b8381101561356357818101518382015260200161354b565b5050505091909101604052505043601155505080519091505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101901561376e5760008282815181106135b357fe5b602002602001015190506135c5613f3e565b8473ffffffffffffffffffffffffffffffffffffffff16634d1b4dae836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b15801561364357600080fd5b505afa158015613657573d6000803e3d6000fd5b505050506040513d61010081101561366e57600080fd5b50805160408083015160a08085015160c08087015160e090970151908801908152918701958652608087019081528684019283529386526004888102420160208089019182526010805460608b0181815260018083019093557f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9d909d169c8d17905560009b8c52600f909252959099209751885551938701939093559051600286015594516003850155905190830155516005820155905160069091015561357c565b506137776121a6565b505050565b6000613787826129d0565b509050683635c9adc5dea0000081101561172357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b600080600061381484608001516129d0565b9150915061382485858484612b10565b95945050505050565b6000600854600e54101561384357506001611723565b600060026009546001018161385457fe5b0490921092915050565b60108054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061389257fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8681168452600f909252604080842060039081015493909216808552932001819055601080549293509091839190839081106138ed57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601080548061394057fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055908101909155600e805490910190555050600c805491909103905550565b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613a3257600080fd5b505afa158015613a46573d6000803e3d6000fd5b505050506040513d6020811015613a5c57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff811615613777576137778183612524565b613a8e613efa565b613a988383612074565b608081015190915073ffffffffffffffffffffffffffffffffffffffff161561377757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff0000821661ff008316637f0000008314801590613b4c575082630a00000014155b8015613b6a57508263c0000000148015613b6857508162a80000145b155b8015613b8d57508263ac000000148015613b8b57508162f000001662100000145b155b8015613b9857508215155b8015613bbb5750826364000000148015613bb957508162c000001662400000145b155b8015613bd957508263a9000000148015613bd757508162fe0000145b155b8015613bfc57508263c6000000148015613bfa57508162fe00001662120000145b155b8015613c2757508263c6000000148015613c1857508162330000145b8015613c25575080616400145b155b8015613c4e57508263cb000000148015613c3f575081155b8015613c4c575080617100145b155b8015613c6457508263f00000001663e000000014155b8015613c7a57508263f00000001663f000000014155b8015613c9057508363ffffffff1663ffffffff14155b613cfb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b50505050565b60065473ffffffffffffffffffffffffffffffffffffffff1660008115613e8b57613d2a613efa565b613d348584612074565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b158015613dca57600080fd5b505af1158015613dde573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b158015613e6d57600080fd5b505af1158015613e81573d6000803e3d6000fd5b5050505050613ed5565b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600060075580805b9250929050565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509056fea265627a7a72315820a99ff71acccf7b0f6c4a203b8ba3c45cdfdb6f66f57997fcb3dae9d599dbf18964736f6c634300050b0032`

// MasternodeRegistryV2 is an auto generated Go binding around an Ethereum contract.
type MasternodeRegistryV2 struct {
	MasternodeRegistryV2Caller     // Read-only binding to the contract
	MasternodeRegistryV2Transactor // Write-only binding to the contract
	MasternodeRegistryV2Filterer   // Log filterer for contract events
}

// MasternodeRegistryV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type MasternodeRegistryV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MasternodeRegistryV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MasternodeRegistryV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MasternodeRegistryV2Session struct {
	Contract     *MasternodeRegistryV2 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MasternodeRegistryV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MasternodeRegistryV2CallerSession struct {
	Contract *MasternodeRegistryV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// MasternodeRegistryV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MasternodeRegistryV2TransactorSession struct {
	Contract     *MasternodeRegistryV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// MasternodeRegistryV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type MasternodeRegistryV2Raw struct {
	Contract *MasternodeRegistryV2 // Generic contract binding to access the raw methods on
}

// MasternodeRegistryV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MasternodeRegistryV2CallerRaw struct {
	Contract *MasternodeRegistryV2Caller // Generic read-only contract binding to access the raw methods on
}

// MasternodeRegistryV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MasternodeRegistryV2TransactorRaw struct {
	Contract *MasternodeRegistryV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMasternodeRegistryV2 creates a new instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2(address common.Address, backend bind.ContractBackend) (*MasternodeRegistryV2, error) {
	contract, err := bindMasternodeRegistryV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2{MasternodeRegistryV2Caller: MasternodeRegistryV2Caller{contract: contract}, MasternodeRegistryV2Transactor: MasternodeRegistryV2Transactor{contract: contract}, MasternodeRegistryV2Filterer: MasternodeRegistryV2Filterer{contract: contract}}, nil
}

// NewMasternodeRegistryV2Caller creates a new read-only instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2Caller(address common.Address, caller bind.ContractCaller) (*MasternodeRegistryV2Caller, error) {
	contract, err := bindMasternodeRegistryV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2Caller{contract: contract}, nil
}

// NewMasternodeRegistryV2Transactor creates a new write-only instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2Transactor(address common.Address, transactor bind.ContractTransactor) (*MasternodeRegistryV2Transactor, error) {
	contract, err := bindMasternodeRegistryV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2Transactor{contract: contract}, nil
}

// NewMasternodeRegistryV2Filterer creates a new log filterer instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2Filterer(address common.Address, filterer bind.ContractFilterer) (*MasternodeRegistryV2Filterer, error) {
	contract, err := bindMasternodeRegistryV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2Filterer{contract: contract}, nil
}

// bindMasternodeRegistryV2 binds a generic wrapper to an already deployed contract.
func bindMasternodeRegistryV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV2 *MasternodeRegistryV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV2.Contract.MasternodeRegistryV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV2 *MasternodeRegistryV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.MasternodeRegistryV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV2 *MasternodeRegistryV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.MasternodeRegistryV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.contract.Transact(opts, method, params...)
}

// CanHeartbeat is a free data retrieval call binding the contract method 0xd9966aba.
//
// Solidity: function canHeartbeat(address masternode) constant returns(bool can_heartbeat)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CanHeartbeat(opts *bind.CallOpts, masternode common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "canHeartbeat", masternode)
	return *ret0, err
}

// CanHeartbeat is a free data retrieval call binding the contract method 0xd9966aba.
//
// Solidity: function canHeartbeat(address masternode) constant returns(bool can_heartbeat)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CanHeartbeat(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.CanHeartbeat(&_MasternodeRegistryV2.CallOpts, masternode)
}

// CanHeartbeat is a free data retrieval call binding the contract method 0xd9966aba.
//
// Solidity: function canHeartbeat(address masternode) constant returns(bool can_heartbeat)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CanHeartbeat(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.CanHeartbeat(&_MasternodeRegistryV2.CallOpts, masternode)
}

// CanInvalidate is a free data retrieval call binding the contract method 0xd13ef5a5.
//
// Solidity: function canInvalidate(address masternode) constant returns(bool can_invalidate)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CanInvalidate(opts *bind.CallOpts, masternode common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "canInvalidate", masternode)
	return *ret0, err
}

// CanInvalidate is a free data retrieval call binding the contract method 0xd13ef5a5.
//
// Solidity: function canInvalidate(address masternode) constant returns(bool can_invalidate)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CanInvalidate(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.CanInvalidate(&_MasternodeRegistryV2.CallOpts, masternode)
}

// CanInvalidate is a free data retrieval call binding the contract method 0xd13ef5a5.
//
// Solidity: function canInvalidate(address masternode) constant returns(bool can_invalidate)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CanInvalidate(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.CanInvalidate(&_MasternodeRegistryV2.CallOpts, masternode)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CleanupPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "cleanup_period")
	return *ret0, err
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CleanupPeriod(&_MasternodeRegistryV2.CallOpts)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CleanupPeriod(&_MasternodeRegistryV2.CallOpts)
}

// CollateralLimits is a free data retrieval call binding the contract method 0xe2cb2195.
//
// Solidity: function collateralLimits() constant returns(uint256 min, uint256 max)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CollateralLimits(opts *bind.CallOpts) (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	ret := new(struct {
		Min *big.Int
		Max *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "collateralLimits")
	return *ret, err
}

// CollateralLimits is a free data retrieval call binding the contract method 0xe2cb2195.
//
// Solidity: function collateralLimits() constant returns(uint256 min, uint256 max)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CollateralLimits() (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.CollateralLimits(&_MasternodeRegistryV2.CallOpts)
}

// CollateralLimits is a free data retrieval call binding the contract method 0xe2cb2195.
//
// Solidity: function collateralLimits() constant returns(uint256 min, uint256 max)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CollateralLimits() (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.CollateralLimits(&_MasternodeRegistryV2.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Count(opts *bind.CallOpts) (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	ret := new(struct {
		Active           *big.Int
		Total            *big.Int
		ActiveCollateral *big.Int
		TotalCollateral  *big.Int
		MaxOfAllTimes    *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "count")
	return *ret, err
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Count(&_MasternodeRegistryV2.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Count(&_MasternodeRegistryV2.CallOpts)
}

// CurrValidationEnds is a free data retrieval call binding the contract method 0x2e941dc4.
//
// Solidity: function curr_validation_ends() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CurrValidationEnds(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "curr_validation_ends")
	return *ret0, err
}

// CurrValidationEnds is a free data retrieval call binding the contract method 0x2e941dc4.
//
// Solidity: function curr_validation_ends() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CurrValidationEnds() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrValidationEnds(&_MasternodeRegistryV2.CallOpts)
}

// CurrValidationEnds is a free data retrieval call binding the contract method 0x2e941dc4.
//
// Solidity: function curr_validation_ends() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CurrValidationEnds() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrValidationEnds(&_MasternodeRegistryV2.CallOpts)
}

// CurrValidationOffset is a free data retrieval call binding the contract method 0x73b24540.
//
// Solidity: function curr_validation_offset() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CurrValidationOffset(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "curr_validation_offset")
	return *ret0, err
}

// CurrValidationOffset is a free data retrieval call binding the contract method 0x73b24540.
//
// Solidity: function curr_validation_offset() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CurrValidationOffset() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrValidationOffset(&_MasternodeRegistryV2.CallOpts)
}

// CurrValidationOffset is a free data retrieval call binding the contract method 0x73b24540.
//
// Solidity: function curr_validation_offset() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CurrValidationOffset() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrValidationOffset(&_MasternodeRegistryV2.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CurrentMasternode(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "current_masternode")
	return *ret0, err
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.CurrentMasternode(&_MasternodeRegistryV2.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.CurrentMasternode(&_MasternodeRegistryV2.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CurrentPayouts(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "current_payouts")
	return *ret0, err
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CurrentPayouts() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrentPayouts(&_MasternodeRegistryV2.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CurrentPayouts() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrentPayouts(&_MasternodeRegistryV2.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Enumerate(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "enumerate")
	return *ret0, err
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.Enumerate(&_MasternodeRegistryV2.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.Enumerate(&_MasternodeRegistryV2.CallOpts)
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) EnumerateActive(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "enumerateActive")
	return *ret0, err
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) EnumerateActive() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.EnumerateActive(&_MasternodeRegistryV2.CallOpts)
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) EnumerateActive() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.EnumerateActive(&_MasternodeRegistryV2.CallOpts)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) GetReward(opts *bind.CallOpts, _blockNumber *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "getReward", _blockNumber)
	return *ret0, err
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.GetReward(&_MasternodeRegistryV2.CallOpts, _blockNumber)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.GetReward(&_MasternodeRegistryV2.CallOpts, _blockNumber)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Info(opts *bind.CallOpts, masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Owner          common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "info", masternode)
	return *ret, err
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Info(&_MasternodeRegistryV2.CallOpts, masternode)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Info(&_MasternodeRegistryV2.CallOpts, masternode)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address masternode) constant returns(bool)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) IsActive(opts *bind.CallOpts, masternode common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "isActive", masternode)
	return *ret0, err
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address masternode) constant returns(bool)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) IsActive(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.IsActive(&_MasternodeRegistryV2.CallOpts, masternode)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address masternode) constant returns(bool)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) IsActive(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.IsActive(&_MasternodeRegistryV2.CallOpts, masternode)
}

// LastBlockNumber is a free data retrieval call binding the contract method 0x1eeaebb2.
//
// Solidity: function last_block_number() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) LastBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "last_block_number")
	return *ret0, err
}

// LastBlockNumber is a free data retrieval call binding the contract method 0x1eeaebb2.
//
// Solidity: function last_block_number() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) LastBlockNumber() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.LastBlockNumber(&_MasternodeRegistryV2.CallOpts)
}

// LastBlockNumber is a free data retrieval call binding the contract method 0x1eeaebb2.
//
// Solidity: function last_block_number() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) LastBlockNumber() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.LastBlockNumber(&_MasternodeRegistryV2.CallOpts)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnActive(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_active")
	return *ret0, err
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnActive() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActive(&_MasternodeRegistryV2.CallOpts)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnActive() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActive(&_MasternodeRegistryV2.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnActiveCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_active_collateral")
	return *ret0, err
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActiveCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActiveCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnAnnounced(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_announced")
	return *ret0, err
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnAnnounced() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnounced(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnAnnounced() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnounced(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnAnnouncedCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_announced_collateral")
	return *ret0, err
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnEverCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_ever_collateral")
	return *ret0, err
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnEverCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnEverCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 next_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidations, uint256 seq_payouts, uint256 last_vote_epoch)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	SwFeatures     *big.Int
	NextHeartbeat  *big.Int
	InactiveSince  *big.Int
	ValidatorIndex *big.Int
	Invalidations  *big.Int
	SeqPayouts     *big.Int
	LastVoteEpoch  *big.Int
}, error) {
	ret := new(struct {
		SwFeatures     *big.Int
		NextHeartbeat  *big.Int
		InactiveSince  *big.Int
		ValidatorIndex *big.Int
		Invalidations  *big.Int
		SeqPayouts     *big.Int
		LastVoteEpoch  *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_status", arg0)
	return *ret, err
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 next_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidations, uint256 seq_payouts, uint256 last_vote_epoch)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnStatus(arg0 common.Address) (struct {
	SwFeatures     *big.Int
	NextHeartbeat  *big.Int
	InactiveSince  *big.Int
	ValidatorIndex *big.Int
	Invalidations  *big.Int
	SeqPayouts     *big.Int
	LastVoteEpoch  *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.MnStatus(&_MasternodeRegistryV2.CallOpts, arg0)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 next_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidations, uint256 seq_payouts, uint256 last_vote_epoch)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnStatus(arg0 common.Address) (struct {
	SwFeatures     *big.Int
	NextHeartbeat  *big.Int
	InactiveSince  *big.Int
	ValidatorIndex *big.Int
	Invalidations  *big.Int
	SeqPayouts     *big.Int
	LastVoteEpoch  *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.MnStatus(&_MasternodeRegistryV2.CallOpts, arg0)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) OwnerInfo(opts *bind.CallOpts, owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Masternode     common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "ownerInfo", owner)
	return *ret, err
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.OwnerInfo(&_MasternodeRegistryV2.CallOpts, owner)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.OwnerInfo(&_MasternodeRegistryV2.CallOpts, owner)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Proxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.Proxy(&_MasternodeRegistryV2.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Proxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.Proxy(&_MasternodeRegistryV2.CallOpts)
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) RequireValidation(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "require_validation")
	return *ret0, err
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) RequireValidation() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.RequireValidation(&_MasternodeRegistryV2.CallOpts)
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) RequireValidation() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.RequireValidation(&_MasternodeRegistryV2.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) TokenProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "token_proxy")
	return *ret0, err
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TokenProxy(&_MasternodeRegistryV2.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TokenProxy(&_MasternodeRegistryV2.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) TreasuryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "treasury_proxy")
	return *ret0, err
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TreasuryProxy(&_MasternodeRegistryV2.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TreasuryProxy(&_MasternodeRegistryV2.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) V1storage() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.V1storage(&_MasternodeRegistryV2.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) V1storage() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.V1storage(&_MasternodeRegistryV2.CallOpts)
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) ValidationTarget(opts *bind.CallOpts, masternode common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "validationTarget", masternode)
	return *ret0, err
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) ValidationTarget(masternode common.Address) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidationTarget(&_MasternodeRegistryV2.CallOpts, masternode)
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) ValidationTarget(masternode common.Address) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidationTarget(&_MasternodeRegistryV2.CallOpts, masternode)
}

// ValidationPeriods is a free data retrieval call binding the contract method 0x18a2ac19.
//
// Solidity: function validation_periods() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) ValidationPeriods(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "validation_periods")
	return *ret0, err
}

// ValidationPeriods is a free data retrieval call binding the contract method 0x18a2ac19.
//
// Solidity: function validation_periods() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) ValidationPeriods() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.ValidationPeriods(&_MasternodeRegistryV2.CallOpts)
}

// ValidationPeriods is a free data retrieval call binding the contract method 0x18a2ac19.
//
// Solidity: function validation_periods() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) ValidationPeriods() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.ValidationPeriods(&_MasternodeRegistryV2.CallOpts)
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) ValidatorList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "validator_list", arg0)
	return *ret0, err
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) ValidatorList(arg0 *big.Int) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidatorList(&_MasternodeRegistryV2.CallOpts, arg0)
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) ValidatorList(arg0 *big.Int) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidatorList(&_MasternodeRegistryV2.CallOpts, arg0)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Announce(opts *bind.TransactOpts, masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "announce", masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Announce(&_MasternodeRegistryV2.TransactOpts, masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Announce(&_MasternodeRegistryV2.TransactOpts, masternode, ipv4address, enode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Denounce(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "denounce", masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Denounce(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Denounce(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Destroy(&_MasternodeRegistryV2.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Destroy(&_MasternodeRegistryV2.TransactOpts, _newImpl)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Heartbeat(opts *bind.TransactOpts, block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "heartbeat", block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Heartbeat(&_MasternodeRegistryV2.TransactOpts, block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Heartbeat(&_MasternodeRegistryV2.TransactOpts, block_number, block_hash, sw_features)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Invalidate(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "invalidate", masternode)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Invalidate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Invalidate(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Invalidate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Invalidate(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Migrate(&_MasternodeRegistryV2.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Migrate(&_MasternodeRegistryV2.TransactOpts, _oldImpl)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) OnCollateralUpdate(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "onCollateralUpdate", owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.OnCollateralUpdate(&_MasternodeRegistryV2.TransactOpts, owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.OnCollateralUpdate(&_MasternodeRegistryV2.TransactOpts, owner)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Reward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "reward")
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Reward(&_MasternodeRegistryV2.TransactOpts)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Reward(&_MasternodeRegistryV2.TransactOpts)
}

// MasternodeRegistryV2AnnouncedIterator is returned from FilterAnnounced and is used to iterate over the raw logs and unpacked data for Announced events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2AnnouncedIterator struct {
	Event *MasternodeRegistryV2Announced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2AnnouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Announced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Announced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2AnnouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2AnnouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Announced represents a Announced event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Announced struct {
	Masternode  common.Address
	Owner       common.Address
	Ipv4address uint32
	Enode       [2][32]byte
	Collateral  *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAnnounced is a free log retrieval operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterAnnounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV2AnnouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2AnnouncedIterator{contract: _MasternodeRegistryV2.contract, event: "Announced", logs: logs, sub: sub}, nil
}

// WatchAnnounced is a free log subscription operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchAnnounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Announced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Announced)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Announced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV2DeactivatedIterator is returned from FilterDeactivated and is used to iterate over the raw logs and unpacked data for Deactivated events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2DeactivatedIterator struct {
	Event *MasternodeRegistryV2Deactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2DeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Deactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Deactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2DeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2DeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Deactivated represents a Deactivated event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Deactivated struct {
	Masternode common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDeactivated is a free log retrieval operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address indexed masternode)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterDeactivated(opts *bind.FilterOpts, masternode []common.Address) (*MasternodeRegistryV2DeactivatedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Deactivated", masternodeRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2DeactivatedIterator{contract: _MasternodeRegistryV2.contract, event: "Deactivated", logs: logs, sub: sub}, nil
}

// WatchDeactivated is a free log subscription operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address indexed masternode)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchDeactivated(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Deactivated, masternode []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Deactivated", masternodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Deactivated)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Deactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV2DenouncedIterator is returned from FilterDenounced and is used to iterate over the raw logs and unpacked data for Denounced events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2DenouncedIterator struct {
	Event *MasternodeRegistryV2Denounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2DenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Denounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Denounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2DenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2DenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Denounced represents a Denounced event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Denounced struct {
	Masternode common.Address
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDenounced is a free log retrieval operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterDenounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV2DenouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2DenouncedIterator{contract: _MasternodeRegistryV2.contract, event: "Denounced", logs: logs, sub: sub}, nil
}

// WatchDenounced is a free log subscription operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchDenounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Denounced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Denounced)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Denounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV2InvalidationIterator is returned from FilterInvalidation and is used to iterate over the raw logs and unpacked data for Invalidation events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2InvalidationIterator struct {
	Event *MasternodeRegistryV2Invalidation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2InvalidationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Invalidation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Invalidation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2InvalidationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2InvalidationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Invalidation represents a Invalidation event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Invalidation struct {
	Masternode common.Address
	Validator  common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInvalidation is a free log retrieval operation binding the contract event 0x389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d331.
//
// Solidity: event Invalidation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterInvalidation(opts *bind.FilterOpts, masternode []common.Address, validator []common.Address) (*MasternodeRegistryV2InvalidationIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Invalidation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2InvalidationIterator{contract: _MasternodeRegistryV2.contract, event: "Invalidation", logs: logs, sub: sub}, nil
}

// WatchInvalidation is a free log subscription operation binding the contract event 0x389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d331.
//
// Solidity: event Invalidation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchInvalidation(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Invalidation, masternode []common.Address, validator []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Invalidation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Invalidation)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Invalidation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
