// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package abi

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// MasternodeRegistryV2ABI is the input ABI used to generate the binding from.
const MasternodeRegistryV2ABI = "[{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_newImpl\",\"type\":\"address\"}],\"name\":\"destroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"active_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_of_all_times\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_masternode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"v1storage\",\"outputs\":[{\"internalType\":\"contractStorageMasternodeRegistryV1\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"require_validation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"invalidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mn_status\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sw_features\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next_heartbeat\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactive_since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validator_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invalidation_since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invalidations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seq_payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_vote_epoch\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validator_list\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced_collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cleanup_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_active_collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"block_number\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"block_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sw_features\",\"type\":\"uint256\"}],\"name\":\"heartbeat\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current_payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury_proxy\",\"outputs\":[{\"internalType\":\"contractIGovernedProxy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_announced\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ownerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"announced_block\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"validationTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"denounce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mn_ever_collateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"onCollateralUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contractIGovernedContract\",\"name\":\"_oldImpl\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"}],\"name\":\"announce\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"canHeartbeat\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"can_heartbeat\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validation_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerateActive\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"masternodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"collateralLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enumerate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"masternodes\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_token_proxy\",\"type\":\"address\"},{\"internalType\":\"contractIGovernedProxy\",\"name\":\"_treasury_proxy\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"_config\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ipv4address\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32[2]\",\"name\":\"enode\",\"type\":\"bytes32[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"Announced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Denounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"Invalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"masternode\",\"type\":\"address\"}],\"name\":\"Deactivated\",\"type\":\"event\"}]"

// MasternodeRegistryV2Bin is the compiled bytecode used for deploying new contracts.
const MasternodeRegistryV2Bin = `60806040523480156200001157600080fd5b506040516200496038038062004960833981810160405260e08110156200003757600080fd5b5080516020820151604080840151600080546001600160a01b0319166001600160a01b038616179055905192939192909160600190620000779062000173565b604051809103906000f08015801562000094573d6000803e3d6000fd5b50600280546001600160a01b03199081166001600160a01b039384161790915560038054821686841617905560048054909116918416919091179055805160085560208101516009556040810151600a556060810151600b819055683635c9adc5dea000008110156200016857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e697469616c20636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b505050505062000181565b61097b8062003fe583390190565b613e5480620001916000396000f3fe6080604052600436106102185760003560e01c80639c5e8ae21161011d578063cdc7d4ad116100b0578063dd227a221161007f578063e2cb219511610064578063e2cb2195146108db578063ec55688914610909578063ff9f78b31461091e57610218565b8063dd227a2214610861578063e1d6f43a1461087657610218565b8063cdc7d4ad14610750578063ce5494bb14610790578063d70d5c30146107d0578063d9966aba1461082157610218565b8063b83e1605116100ec578063b83e16051461067b578063c3db74d6146106bb578063ca0e551f146106fb578063cb4f40c51461073b57610218565b80639c5e8ae2146105e85780639f8a13d7146105fd578063a273178414610651578063ab00fdc41461066657610218565b806337a3931f116101b057806357f2a7d81161017f5780636d41ff4e116101645780636d41ff4e1461058857806384afd47f1461059d57806391ceac96146105b257610218565b806357f2a7d81461055e5780635f6e2c7b1461057357610218565b806337a3931f1461045e5780634d1b4dae1461049e5780634e60b9811461051f578063521f284d1461054957610218565b80631c4b774b116101ec5780631c4b774b146103f0578063228cb7331461042c5780632d0593051461043457806335ab13f61461044957610218565b8062f55d9d1461027f57806306661abd146102c15780630aae7a6b146103015780631a26763c146103b2575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561028b57600080fd5b506102bf600480360360208110156102a257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610933565b005b3480156102cd57600080fd5b506102d66109db565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561030d57600080fd5b506103416004803603602081101561032457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109f5565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b8381101561038f578181015183820152602001610377565b505050509050018381526020018281526020019550505050505060405180910390f35b3480156103be57600080fd5b506103c7610af4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103fc57600080fd5b5061041a6004803603602081101561041357600080fd5b5035610b10565b60408051918252519081900360200190f35b6102bf610c48565b34801561044057600080fd5b506103c7610ea4565b34801561045557600080fd5b5061041a610ec0565b34801561046a57600080fd5b506102bf6004803603602081101561048157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ec6565b3480156104aa57600080fd5b506104de600480360360208110156104c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661129e565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b34801561052b57600080fd5b506103c76004803603602081101561054257600080fd5b50356112e1565b34801561055557600080fd5b5061041a611315565b34801561056a57600080fd5b5061041a61131b565b34801561057f57600080fd5b5061041a611321565b34801561059457600080fd5b5061041a611327565b3480156105a957600080fd5b506103c761132d565b3480156105be57600080fd5b506102bf600480360360608110156105d557600080fd5b5080359060208101359060400135611349565b3480156105f457600080fd5b5061041a6115f9565b34801561060957600080fd5b5061063d6004803603602081101561062057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166115ff565b604080519115158252519081900360200190f35b34801561065d57600080fd5b506103c7611637565b34801561067257600080fd5b5061041a611653565b34801561068757600080fd5b506103416004803603602081101561069e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611659565b3480156106c757600080fd5b506103c7600480360360208110156106de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166117d8565b34801561070757600080fd5b506102bf6004803603602081101561071e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118ab565b34801561074757600080fd5b5061041a61192f565b34801561075c57600080fd5b506102bf6004803603602081101561077357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611935565b34801561079c57600080fd5b506102bf600480360360208110156107b357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b59565b3480156107dc57600080fd5b506102bf600480360360808110156107f357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611beb565b34801561082d57600080fd5b5061063d6004803603602081101561084457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cb9565b34801561086d57600080fd5b5061041a611cff565b34801561088257600080fd5b5061088b611d05565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156108c75781810151838201526020016108af565b505050509050019250505060405180910390f35b3480156108e757600080fd5b506108f0611db7565b6040805192835260208301919091528051918290030190f35b34801561091557600080fd5b506103c7611dd0565b34801561092a57600080fd5b5061088b611dec565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6109c281611ec1565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600e54600554600c54600d54600b54939492939192909190565b600080610a00613d78565b600080610a0b613d96565b600254610a2e9073ffffffffffffffffffffffffffffffffffffffff1688611f50565b608081015190915073ffffffffffffffffffffffffffffffffffffffff16610ab757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610b7a57600080fd5b505afa158015610b8e573d6000803e3d6000fd5b505050506040513d6020811015610ba457600080fd5b505190508215801590610c3157508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d6020811015610c2d57600080fd5b5051155b15610c4257677ed7cd92ff12000091505b50919050565b60015415610cb757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315610de5576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3257600080fd5b505afa158015610d46573d6000803e3d6000fd5b505050506040513d6020811015610d5c57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b5050505050505b677ed7cd92ff120000341415610e9c574360115410610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b620186a05a11610e7157fe5b34303114610e7b57fe5b620186a05a118015610e925750610e90612082565b155b15610e9c57610e7b565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60015415610f3557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000610f43612303565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fe057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69646174696f6e20666f722073656c660000000000000000000000604482015290519081900360640190fd5b60006009544381610fed57fe5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040902091900491506110218382612332565b61108c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b818160070154106110fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f416c726561647920696e76616c69646174656400000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1661111e846117d8565b73ffffffffffffffffffffffffffffffffffffffff16146111a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420746172676574000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f602052604090206111cf8582612332565b61123a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b60078201839055600581018054600101905560405173ffffffffffffffffffffffffffffffffffffffff80861691908716907f389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d33190600090a350506000600155505050565b600f602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b601081815481106112ee57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600e5481565b600d5481565b600a5481565b600c5481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600154156113b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561145157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b818340146114c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b60006114ca612303565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604090209091506114fc8282612332565b61156757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b42816001015411156115da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6115e2612383565b420160018083019190915592905550600090555050565b60075481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f6020526040812061162f908390612332565b90505b919050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080611664613d78565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b1580156116dc57600080fd5b505afa1580156116f0573d6000803e3d6000fd5b505050506040513d602081101561170657600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff861661178c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b611794613d96565b61179e8288611f50565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b60105460095460009190827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830182438161180f57fe5b048161181757fe5b0660010190506000600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050838282018161186f57fe5b0690506010818154811061187f57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169695505050505050565b6001541561191a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055610e9c8161192a612303565b61239a565b600b5481565b600154156119a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b158015611a2057600080fd5b505afa158015611a34573d6000803e3d6000fd5b505050506040513d6020811015611a4a57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611a70575050610e9c565b600080611a7c8561284d565b91509150611a88613d96565b600254611aab9073ffffffffffffffffffffffffffffffffffffffff1685611f50565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600f6020526040812091925090611ae09083868661298d565b90506001816003811115611af057fe5b1415611b4b57683635c9adc5dea000008410611b415760e0820151611b13613d78565b5060408051808201825290840151815260608401516020820152611b3a878a8885856129ec565b5050611b4b565b611b4b858861239a565b505050505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611bdf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611be881612d3d565b50565b60015415611c5a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611c68612303565b90506000611c7582613609565b9050611cad858383878760028060200260405190810160405280929190826002602002808284376000920191909152506129ec915050565b50506000600155505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260408120611ce88382612332565b8015611cf8575042816001015411155b9392505050565b60095481565b6060600e54604051908082528060200260200182016040528015611d33578160200160208202803883390190505b50905060005b8151811015611db35760108181548110611d4f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611d8657fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611d39565b5090565b683635c9adc5dea000009069152d02c7e14af680000090565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6060600554604051908082528060200260200182016040528015611e1a578160200160208202803883390190505b5060065490915073ffffffffffffffffffffffffffffffffffffffff1680611e425750611ebe565b80611e4b613d96565b60005b82858281518110611e5b57fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254611e8c911684611f50565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff8084169085161415611e4e57505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015611f3557600080fd5b505af1158015611f49573d6000803e3d6000fd5b5050505050565b611f58613d96565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b158015611fd657600080fd5b505afa158015611fea573d6000803e3d6000fd5b505050506040513d61010081101561200157600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b60065460075460009173ffffffffffffffffffffffffffffffffffffffff1690816120b257600192505050611ebe565b6120ba613d96565b6002546120dd9073ffffffffffffffffffffffffffffffffffffffff1684611f50565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f60205260409020600581015460048201546006830154600190960195939450919290919085101561213057600785905561218c565b60006005840181905543600485015560c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556007555b6000612198848661368f565b905060008160038111156121a857fe5b141561220c576121b883836136ba565b15806121f75750608085015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b1561220c576001975050505050505050611ebe565b600181600381111561221a57fe5b14156122335761222e87866080015161239a565b6122f5565b6006840154156122d75760006006850155426002850155602085015161225a9088906136fb565b60c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831617905560006007819055604051918916917f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c009190a26122f5565b600a548460020154420311156122f5576122f587866080015161239a565b600097505050505050505090565b6000805473ffffffffffffffffffffffffffffffffffffffff1633141561232b575032611ebe565b5033611ebe565b600061233c613d96565b60025461235f9073ffffffffffffffffffffffffffffffffffffffff1685611f50565b9050600061236d848361368f565b600381111561237857fe5b149150505b92915050565b600e54600402610708811015611ebe575061070890565b60025473ffffffffffffffffffffffffffffffffffffffff166123bb613d96565b6123c58285611f50565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166123ee575050612849565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461248c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff1614156124f157600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556126bf565b60065473ffffffffffffffffffffffffffffffffffffffff858116911614156125635760c0810151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560006007555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b1580156126a657600080fd5b505af11580156126ba573d6000803e3d6000fd5b505050505b602080820151600d805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600f90915260409020600601541561270b5761270b8482602001516136fb565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600f602052604080822082815560018101839055600281018390556003810183905560048082018490556005820184905560068201849055600790910183905581517f72f5f2570000000000000000000000000000000000000000000000000000000081529081019390935251928516926372f5f25792602480820193929182900301818387803b1580156127bc57600080fd5b505af11580156127d0573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156128b857600080fd5b505afa1580156128cc573d6000803e3d6000fd5b505050506040513d60208110156128e257600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015282519316926378c7d97992602480840193919291829003018186803b15801561295057600080fd5b505afa158015612964573d6000803e3d6000fd5b505050506040513d604081101561297a57600080fd5b5080516020909101519094909350915050565b60008460060154600014156129a4575060026129e4565b6001850154611c20014211156129bc575060036129e4565b836020015183146129cf575060016129e4565b83518211156129e0575060016129e4565b5060005b949350505050565b60025473ffffffffffffffffffffffffffffffffffffffff16612a0f8186613850565b612a198187613928565b612a22836139c4565b600080612a2f8389613b9d565b915091508273ffffffffffffffffffffffffffffffffffffffff1663f71169df898988888b43888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280838360005b83811015612b04578181015183820152602001612aec565b505050509050018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015612b9f57600080fd5b505af1158015612bb3573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f60205260409020612be4612383565b42016001820155683635c9adc5dea0000087046006820155600e80546001908101909155600580549091019055600c805488019055600d8054880190819055600b54811115612c3357600b8190555b436004830155601080546003840181905560018101825560009182527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8d81169182179092556040805163ffffffff8c168152928d169391927f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09928c928c928f92909160208301918591908190849084905b83811015612d17578181015183820152602001612cff565b50505050905001828152602001935050505060405180910390a350505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612da757600080fd5b505af1158015612dbb573d6000803e3d6000fd5b5050505060008190508073ffffffffffffffffffffffffffffffffffffffff16632d0593056040518163ffffffff1660e01b815260040160206040518083038186803b158015612e0a57600080fd5b505afa158015612e1e573d6000803e3d6000fd5b505050506040513d6020811015612e3457600080fd5b5051600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517fab00fdc400000000000000000000000000000000000000000000000000000000815290519183169163ab00fdc491600480820192602092909190829003018186803b158015612eca57600080fd5b505afa158015612ede573d6000803e3d6000fd5b505050506040513d6020811015612ef457600080fd5b5051600555604080517f1a26763c000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691631a26763c916004808301926020929190829003018186803b158015612f5f57600080fd5b505afa158015612f73573d6000803e3d6000fd5b505050506040513d6020811015612f8957600080fd5b5051600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517f9c5e8ae2000000000000000000000000000000000000000000000000000000008152905191831691639c5e8ae291600480820192602092909190829003018186803b15801561301f57600080fd5b505afa158015613033573d6000803e3d6000fd5b505050506040513d602081101561304957600080fd5b5051600755604080517fcb4f40c5000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163cb4f40c5916004808301926020929190829003018186803b1580156130b457600080fd5b505afa1580156130c8573d6000803e3d6000fd5b505050506040513d60208110156130de57600080fd5b5051600b55604080517f6d41ff4e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691636d41ff4e916004808301926020929190829003018186803b15801561314957600080fd5b505afa15801561315d573d6000803e3d6000fd5b505050506040513d602081101561317357600080fd5b5051600c55604080517f57f2a7d8000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8316916357f2a7d8916004808301926020929190829003018186803b1580156131de57600080fd5b505afa1580156131f2573d6000803e3d6000fd5b505050506040513d602081101561320857600080fd5b5051600d55604080517f521f284d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163521f284d916004808301926020929190829003018186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d602081101561329d57600080fd5b5051600e55604080517fff9f78b3000000000000000000000000000000000000000000000000000000008152905160609173ffffffffffffffffffffffffffffffffffffffff84169163ff9f78b391600480820192600092909190829003018186803b15801561330c57600080fd5b505afa158015613320573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561336757600080fd5b810190808051604051939291908464010000000082111561338757600080fd5b90830190602082018581111561339c57600080fd5b82518660208202830111640100000000821117156133b957600080fd5b82525081516020918201928201910280838360005b838110156133e65781810151838201526020016133ce565b5050505091909101604052505043601155505080519091505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101901561360357600082828151811061343657fe5b60200260200101519050613448613dda565b8473ffffffffffffffffffffffffffffffffffffffff16634d1b4dae836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b1580156134c657600080fd5b505afa1580156134da573d6000803e3d6000fd5b505050506040513d6101008110156134f157600080fd5b50805160408083015160808085015160a08087015160c08089015160e0998a0151998b01998a52908a01908152918901908152928801918252878501938452948752600489810242016020808a019182526010805460608c0181815260018083019093557f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9e909e169d8e17905560009c8d52600f90925296909a2098518955519488019490945591516002870155955160038601555190840155925160058301559151600682015590516007909101556133ff565b50505050565b60006136148261284d565b509050683635c9adc5dea0000081101561163257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b60008060006136a1846080015161284d565b915091506136b18585848461298d565b95945050505050565b6000600854600e5410156136d05750600161237d565b600954438390039081816136e057fe5b046001019050600281816136f057fe5b049093109392505050565b60108054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061372f57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8681168452600f9092526040808420600390810154939092168085529320018190556010805492935090918391908390811061378a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060108054806137dd57fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055908101909155600e805490910190555050600c805491909103905550565b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156138cf57600080fd5b505afa1580156138e3573d6000803e3d6000fd5b505050506040513d60208110156138f957600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81161561392357613923818361239a565b505050565b613930613d96565b61393a8383611f50565b608081015190915073ffffffffffffffffffffffffffffffffffffffff161561392357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff0000821661ff008316637f00000083148015906139ee575082630a00000014155b8015613a0c57508263c0000000148015613a0a57508162a80000145b155b8015613a2f57508263ac000000148015613a2d57508162f000001662100000145b155b8015613a3a57508215155b8015613a5d5750826364000000148015613a5b57508162c000001662400000145b155b8015613a7b57508263a9000000148015613a7957508162fe0000145b155b8015613a9e57508263c6000000148015613a9c57508162fe00001662120000145b155b8015613ac957508263c6000000148015613aba57508162330000145b8015613ac7575080616400145b155b8015613af057508263cb000000148015613ae1575081155b8015613aee575080617100145b155b8015613b0657508263f00000001663e000000014155b8015613b1c57508263f00000001663f000000014155b8015613b3257508363ffffffff1663ffffffff14155b61360357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff1660008115613d2757613bc6613d96565b613bd08584611f50565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b158015613c6657600080fd5b505af1158015613c7a573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b158015613d0957600080fd5b505af1158015613d1d573d6000803e3d6000fd5b5050505050613d71565b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600060075580805b9250929050565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509056fea265627a7a7231582030f0637944dd21a57a3ce0a00a717a9cd24df775042ff1ab00c8ea04c90ab50564736f6c634300050b00326080604052600080546001600160a01b03191633179055610956806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063412cbac01161005b578063412cbac01461016857806341c0e1b5146101fa57806372f5f25714610202578063f71169df146102355761007d565b806313af4035146100825780631f9579ca146100b757806328d566be1461010c575b600080fd5b6100b56004803603602081101561009857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661029f565b005b6100b5600480360360a08110156100cd57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020810135151591604082013581169160608101351515916080909101351661036c565b61013f6004803603602081101561012257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104b1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61019b6004803603602081101561017e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166104d9565b60408051988952602089019790975287870195909552606087019390935273ffffffffffffffffffffffffffffffffffffffff9182166080870152811660a08601521660c084015263ffffffff1660e083015251908190036101000190f35b6100b5610551565b6100b56004803603602081101561021857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166105da565b6100b5600480360361012081101561024c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169163ffffffff60408301351691606081019160a08201359160c08101359160e0820135811691610100013516610720565b60005473ffffffffffffffffffffffffffffffffffffffff16331461032557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103f257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602052604090208415610460576005810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790555b82156104a9576006810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b505050505050565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6001602081905260009182526040909120805491810154600282015460038301546004840154600585015460069095015493949293919273ffffffffffffffffffffffffffffffffffffffff918216929082169181169074010000000000000000000000000000000000000000900463ffffffff1688565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105d757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b33ff5b60005473ffffffffffffffffffffffffffffffffffffffff16331461066057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff90811660008181526001602081815260408084206004810180549097168552600280845291852080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811690915595855291839052838255918101839055908101829055600381019190915582548216909255600582018054909116905560060180547fffffffffffffffff000000000000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f74206f776e65722100000000000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff80891660009081526001602052604090206004810154909190811690891681146108515773ffffffffffffffffffffffffffffffffffffffff8116156107fd57fe5b73ffffffffffffffffffffffffffffffffffffffff898116600090815260026020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016918c169190911790555b5060048101805473ffffffffffffffffffffffffffffffffffffffff998a167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600682018054883560028501556020909801356003840155600183019690965593815560050180549288169284169290921790915590941663ffffffff9390931674010000000000000000000000000000000000000000027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff909216919091179092161790555056fea265627a7a723158206cfb90b6412c3168baddb34a1af45cbcc329d1eaee3f6a5ed18fbf25a427048164736f6c634300050b0032`

// DeployMasternodeRegistryV2 deploys a new Ethereum contract, binding an instance of MasternodeRegistryV2 to it.
func DeployMasternodeRegistryV2(auth *bind.TransactOpts, backend bind.ContractBackend, _proxy common.Address, _token_proxy common.Address, _treasury_proxy common.Address, _config [4]*big.Int) (common.Address, *types.Transaction, *MasternodeRegistryV2, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV2ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(MasternodeRegistryV2Bin), backend, _proxy, _token_proxy, _treasury_proxy, _config)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MasternodeRegistryV2{MasternodeRegistryV2Caller: MasternodeRegistryV2Caller{contract: contract}, MasternodeRegistryV2Transactor: MasternodeRegistryV2Transactor{contract: contract}, MasternodeRegistryV2Filterer: MasternodeRegistryV2Filterer{contract: contract}}, nil
}

// MasternodeRegistryV2Bin is the compiled bytecode of contract after deployment.
const MasternodeRegistryV2RuntimeBin = `6080604052600436106102185760003560e01c80639c5e8ae21161011d578063cdc7d4ad116100b0578063dd227a221161007f578063e2cb219511610064578063e2cb2195146108db578063ec55688914610909578063ff9f78b31461091e57610218565b8063dd227a2214610861578063e1d6f43a1461087657610218565b8063cdc7d4ad14610750578063ce5494bb14610790578063d70d5c30146107d0578063d9966aba1461082157610218565b8063b83e1605116100ec578063b83e16051461067b578063c3db74d6146106bb578063ca0e551f146106fb578063cb4f40c51461073b57610218565b80639c5e8ae2146105e85780639f8a13d7146105fd578063a273178414610651578063ab00fdc41461066657610218565b806337a3931f116101b057806357f2a7d81161017f5780636d41ff4e116101645780636d41ff4e1461058857806384afd47f1461059d57806391ceac96146105b257610218565b806357f2a7d81461055e5780635f6e2c7b1461057357610218565b806337a3931f1461045e5780634d1b4dae1461049e5780634e60b9811461051f578063521f284d1461054957610218565b80631c4b774b116101ec5780631c4b774b146103f0578063228cb7331461042c5780632d0593051461043457806335ab13f61461044957610218565b8062f55d9d1461027f57806306661abd146102c15780630aae7a6b146103015780631a26763c146103b2575b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f7420737570706f7274656400000000000000000000000000000000000000604482015290519081900360640190fd5b34801561028b57600080fd5b506102bf600480360360208110156102a257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610933565b005b3480156102cd57600080fd5b506102d66109db565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561030d57600080fd5b506103416004803603602081101561032457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166109f5565b6040805173ffffffffffffffffffffffffffffffffffffffff8716815263ffffffff861660208201529081810190859080838360005b8381101561038f578181015183820152602001610377565b505050509050018381526020018281526020019550505050505060405180910390f35b3480156103be57600080fd5b506103c7610af4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156103fc57600080fd5b5061041a6004803603602081101561041357600080fd5b5035610b10565b60408051918252519081900360200190f35b6102bf610c48565b34801561044057600080fd5b506103c7610ea4565b34801561045557600080fd5b5061041a610ec0565b34801561046a57600080fd5b506102bf6004803603602081101561048157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610ec6565b3480156104aa57600080fd5b506104de600480360360208110156104c157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661129e565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b34801561052b57600080fd5b506103c76004803603602081101561054257600080fd5b50356112e1565b34801561055557600080fd5b5061041a611315565b34801561056a57600080fd5b5061041a61131b565b34801561057f57600080fd5b5061041a611321565b34801561059457600080fd5b5061041a611327565b3480156105a957600080fd5b506103c761132d565b3480156105be57600080fd5b506102bf600480360360608110156105d557600080fd5b5080359060208101359060400135611349565b3480156105f457600080fd5b5061041a6115f9565b34801561060957600080fd5b5061063d6004803603602081101561062057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166115ff565b604080519115158252519081900360200190f35b34801561065d57600080fd5b506103c7611637565b34801561067257600080fd5b5061041a611653565b34801561068757600080fd5b506103416004803603602081101561069e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611659565b3480156106c757600080fd5b506103c7600480360360208110156106de57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166117d8565b34801561070757600080fd5b506102bf6004803603602081101561071e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118ab565b34801561074757600080fd5b5061041a61192f565b34801561075c57600080fd5b506102bf6004803603602081101561077357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611935565b34801561079c57600080fd5b506102bf600480360360208110156107b357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611b59565b3480156107dc57600080fd5b506102bf600480360360808110156107f357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169063ffffffff60208201351690604001611beb565b34801561082d57600080fd5b5061063d6004803603602081101561084457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611cb9565b34801561086d57600080fd5b5061041a611cff565b34801561088257600080fd5b5061088b611d05565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156108c75781810151838201526020016108af565b505050509050019250505060405180910390f35b3480156108e757600080fd5b506108f0611db7565b6040805192835260208301919091528051918290030190f35b34801561091557600080fd5b506103c7611dd0565b34801561092a57600080fd5b5061088b611dec565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109b957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6109c281611ec1565b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600e54600554600c54600d54600b54939492939192909190565b600080610a00613d78565b600080610a0b613d96565b600254610a2e9073ffffffffffffffffffffffffffffffffffffffff1688611f50565b608081015190915073ffffffffffffffffffffffffffffffffffffffff16610ab757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e6b6e6f776e206d61737465726e6f64650000000000000000000000000000604482015290519081900360640190fd5b608081015160e082015160408051808201825290840151815260608401516020808301919091528401519351929a91995097509195509350915050565b60065473ffffffffffffffffffffffffffffffffffffffff1681565b60048054604080517f8abf60770000000000000000000000000000000000000000000000000000000081529051600093849373ffffffffffffffffffffffffffffffffffffffff1692638abf60779281830192602092829003018186803b158015610b7a57600080fd5b505afa158015610b8e573d6000803e3d6000fd5b505050506040513d6020811015610ba457600080fd5b505190508215801590610c3157508073ffffffffffffffffffffffffffffffffffffffff166352782d86846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d6020811015610c2d57600080fd5b5051155b15610c4257677ed7cd92ff12000091505b50919050565b60015415610cb757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055343031036000811315610de5576000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3257600080fd5b505afa158015610d46573d6000803e3d6000fd5b505050506040513d6020811015610d5c57600080fd5b5051604080517f228cb733000000000000000000000000000000000000000000000000000000008152905191925073ffffffffffffffffffffffffffffffffffffffff83169163228cb733918591600480830192600092919082900301818588803b158015610dca57600080fd5b505af1158015610dde573d6000803e3d6000fd5b5050505050505b677ed7cd92ff120000341415610e9c574360115410610e6557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616c6c206f757473696465206f6620676f7665726e616e6365210000000000604482015290519081900360640190fd5b620186a05a11610e7157fe5b34303114610e7b57fe5b620186a05a118015610e925750610e90612082565b155b15610e9c57610e7b565b506000600155565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60085481565b60015415610f3557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000610f43612303565b90508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fe057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69646174696f6e20666f722073656c660000000000000000000000604482015290519081900360640190fd5b60006009544381610fed57fe5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040902091900491506110218382612332565b61108c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f74206163746976652063616c6c6572000000000000000000000000000000604482015290519081900360640190fd5b818160070154106110fe57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f416c726561647920696e76616c69646174656400000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff1661111e846117d8565b73ffffffffffffffffffffffffffffffffffffffff16146111a057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420746172676574000000000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f602052604090206111cf8582612332565b61123a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f742061637469766520746172676574000000000000000000000000000000604482015290519081900360640190fd5b60078201839055600581018054600101905560405173ffffffffffffffffffffffffffffffffffffffff80861691908716907f389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d33190600090a350506000600155505050565b600f602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b601081815481106112ee57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600e5481565b600d5481565b600a5481565b600c5481565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b600154156113b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4385900301111561145157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f546f6f206f6c6420626c6f636b00000000000000000000000000000000000000604482015290519081900360640190fd5b818340146114c057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f426c6f636b206d69736d61746368000000000000000000000000000000000000604482015290519081900360640190fd5b60006114ca612303565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f602052604090209091506114fc8282612332565b61156757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4e6f742061637469766500000000000000000000000000000000000000000000604482015290519081900360640190fd5b42816001015411156115da57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f546f6f206561726c790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6115e2612383565b420160018083019190915592905550600090555050565b60075481565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f6020526040812061162f908390612332565b90505b919050565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080611664613d78565b600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291516000938493169182916328d566be91602480820192602092909190829003018186803b1580156116dc57600080fd5b505afa1580156116f0573d6000803e3d6000fd5b505050506040513d602081101561170657600080fd5b5051955073ffffffffffffffffffffffffffffffffffffffff861661178c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f556e6b6e6f776e206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b611794613d96565b61179e8288611f50565b60e081015160408051808201825290830151815260608301516020808301919091528301519251999b919a50989197509095509350505050565b60105460095460009190827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830182438161180f57fe5b048161181757fe5b0660010190506000600f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050838282018161186f57fe5b0690506010818154811061187f57fe5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff169695505050505050565b6001541561191a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055610e9c8161192a612303565b61239a565b600b5481565b600154156119a457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60018055600254604080517f28d566be00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529151919092169160009183916328d566be916024808301926020929190829003018186803b158015611a2057600080fd5b505afa158015611a34573d6000803e3d6000fd5b505050506040513d6020811015611a4a57600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff8116611a70575050610e9c565b600080611a7c8561284d565b91509150611a88613d96565b600254611aab9073ffffffffffffffffffffffffffffffffffffffff1685611f50565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600f6020526040812091925090611ae09083868661298d565b90506001816003811115611af057fe5b1415611b4b57683635c9adc5dea000008410611b415760e0820151611b13613d78565b5060408051808201825290840151815260608401516020820152611b3a878a8885856129ec565b5050611b4b565b611b4b858861239a565b505050505050506000600155565b60005473ffffffffffffffffffffffffffffffffffffffff163314611bdf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f4e6f742070726f78790000000000000000000000000000000000000000000000604482015290519081900360640190fd5b611be881612d3d565b50565b60015415611c5a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f5265656e74727900000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600180556000611c68612303565b90506000611c7582613609565b9050611cad858383878760028060200260405190810160405280929190826002602002808284376000920191909152506129ec915050565b50506000600155505050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600f60205260408120611ce88382612332565b8015611cf8575042816001015411155b9392505050565b60095481565b6060600e54604051908082528060200260200182016040528015611d33578160200160208202803883390190505b50905060005b8151811015611db35760108181548110611d4f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611d8657fe5b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152600101611d39565b5090565b683635c9adc5dea000009069152d02c7e14af680000090565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6060600554604051908082528060200260200182016040528015611e1a578160200160208202803883390190505b5060065490915073ffffffffffffffffffffffffffffffffffffffff1680611e425750611ebe565b80611e4b613d96565b60005b82858281518110611e5b57fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600254611e8c911684611f50565b60c08101519350915060010173ffffffffffffffffffffffffffffffffffffffff8084169085161415611e4e57505050505b90565b600254604080517f13af403500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152915191909216916313af403591602480830192600092919082900301818387803b158015611f3557600080fd5b505af1158015611f49573d6000803e3d6000fd5b5050505050565b611f58613d96565b8273ffffffffffffffffffffffffffffffffffffffff1663412cbac0836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b158015611fd657600080fd5b505afa158015611fea573d6000803e3d6000fd5b505050506040513d61010081101561200157600080fd5b50805160208083015160408085015160608087015160808089015160a0808b015160c0808d015160e09d8e015163ffffffff169d8f019d909d5273ffffffffffffffffffffffffffffffffffffffff9c8d16908e01528b16908c01529890981697890197909752870195909552850193909352830191909152815292915050565b60065460075460009173ffffffffffffffffffffffffffffffffffffffff1690816120b257600192505050611ebe565b6120ba613d96565b6002546120dd9073ffffffffffffffffffffffffffffffffffffffff1684611f50565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f60205260409020600581015460048201546006830154600190960195939450919290919085101561213057600785905561218c565b60006005840181905543600485015560c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556007555b6000612198848661368f565b905060008160038111156121a857fe5b141561220c576121b883836136ba565b15806121f75750608085015160405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f193505050505b1561220c576001975050505050505050611ebe565b600181600381111561221a57fe5b14156122335761222e87866080015161239a565b6122f5565b6006840154156122d75760006006850155426002850155602085015161225a9088906136fb565b60c0850151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92831617905560006007819055604051918916917f749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c009190a26122f5565b600a548460020154420311156122f5576122f587866080015161239a565b600097505050505050505090565b6000805473ffffffffffffffffffffffffffffffffffffffff1633141561232b575032611ebe565b5033611ebe565b600061233c613d96565b60025461235f9073ffffffffffffffffffffffffffffffffffffffff1685611f50565b9050600061236d848361368f565b600381111561237857fe5b149150505b92915050565b600e54600402610708811015611ebe575061070890565b60025473ffffffffffffffffffffffffffffffffffffffff166123bb613d96565b6123c58285611f50565b608081015190915073ffffffffffffffffffffffffffffffffffffffff166123ee575050612849565b806080015173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461248c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b8373ffffffffffffffffffffffffffffffffffffffff168160c0015173ffffffffffffffffffffffffffffffffffffffff1614156124f157600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556126bf565b60065473ffffffffffffffffffffffffffffffffffffffff858116911614156125635760c0810151600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560006007555b60a081015160c0820151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff938416600482015260006024820181905260448201819052600160648301529284166084820152905192851692631f9579ca9260a48084019391929182900301818387803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b50505060c082015160a0830151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201526001602482015291831660448301526000606483018190526084830181905290519286169350631f9579ca9260a48084019382900301818387803b1580156126a657600080fd5b505af11580156126ba573d6000803e3d6000fd5b505050505b602080820151600d805491909103905573ffffffffffffffffffffffffffffffffffffffff85166000908152600f90915260409020600601541561270b5761270b8482602001516136fb565b73ffffffffffffffffffffffffffffffffffffffff8085166000818152600f602052604080822082815560018101839055600281018390556003810183905560048082018490556005820184905560068201849055600790910183905581517f72f5f2570000000000000000000000000000000000000000000000000000000081529081019390935251928516926372f5f25792602480820193929182900301818387803b1580156127bc57600080fd5b505af11580156127d0573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190555050608081015160405173ffffffffffffffffffffffffffffffffffffffff918216918616907f55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe855290600090a350505b5050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638abf60776040518163ffffffff1660e01b815260040160206040518083038186803b1580156128b857600080fd5b505afa1580156128cc573d6000803e3d6000fd5b505050506040513d60208110156128e257600080fd5b5051604080517f78c7d97900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015282519316926378c7d97992602480840193919291829003018186803b15801561295057600080fd5b505afa158015612964573d6000803e3d6000fd5b505050506040513d604081101561297a57600080fd5b5080516020909101519094909350915050565b60008460060154600014156129a4575060026129e4565b6001850154611c20014211156129bc575060036129e4565b836020015183146129cf575060016129e4565b83518211156129e0575060016129e4565b5060005b949350505050565b60025473ffffffffffffffffffffffffffffffffffffffff16612a0f8186613850565b612a198187613928565b612a22836139c4565b600080612a2f8389613b9d565b915091508273ffffffffffffffffffffffffffffffffffffffff1663f71169df898988888b43888a6040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018763ffffffff1663ffffffff16815260200186600260200280838360005b83811015612b04578181015183820152602001612aec565b505050509050018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200198505050505050505050600060405180830381600087803b158015612b9f57600080fd5b505af1158015612bb3573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff88166000908152600f60205260409020612be4612383565b42016001820155683635c9adc5dea0000087046006820155600e80546001908101909155600580549091019055600c805488019055600d8054880190819055600b54811115612c3357600b8190555b436004830155601080546003840181905560018101825560009182527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8d81169182179092556040805163ffffffff8c168152928d169391927f935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09928c928c928f92909160208301918591908190849084905b83811015612d17578181015183820152602001612cff565b50505050905001828152602001935050505060405180910390a350505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166341c0e1b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612da757600080fd5b505af1158015612dbb573d6000803e3d6000fd5b5050505060008190508073ffffffffffffffffffffffffffffffffffffffff16632d0593056040518163ffffffff1660e01b815260040160206040518083038186803b158015612e0a57600080fd5b505afa158015612e1e573d6000803e3d6000fd5b505050506040513d6020811015612e3457600080fd5b5051600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517fab00fdc400000000000000000000000000000000000000000000000000000000815290519183169163ab00fdc491600480820192602092909190829003018186803b158015612eca57600080fd5b505afa158015612ede573d6000803e3d6000fd5b505050506040513d6020811015612ef457600080fd5b5051600555604080517f1a26763c000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691631a26763c916004808301926020929190829003018186803b158015612f5f57600080fd5b505afa158015612f73573d6000803e3d6000fd5b505050506040513d6020811015612f8957600080fd5b5051600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604080517f9c5e8ae2000000000000000000000000000000000000000000000000000000008152905191831691639c5e8ae291600480820192602092909190829003018186803b15801561301f57600080fd5b505afa158015613033573d6000803e3d6000fd5b505050506040513d602081101561304957600080fd5b5051600755604080517fcb4f40c5000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163cb4f40c5916004808301926020929190829003018186803b1580156130b457600080fd5b505afa1580156130c8573d6000803e3d6000fd5b505050506040513d60208110156130de57600080fd5b5051600b55604080517f6d41ff4e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff831691636d41ff4e916004808301926020929190829003018186803b15801561314957600080fd5b505afa15801561315d573d6000803e3d6000fd5b505050506040513d602081101561317357600080fd5b5051600c55604080517f57f2a7d8000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8316916357f2a7d8916004808301926020929190829003018186803b1580156131de57600080fd5b505afa1580156131f2573d6000803e3d6000fd5b505050506040513d602081101561320857600080fd5b5051600d55604080517f521f284d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff83169163521f284d916004808301926020929190829003018186803b15801561327357600080fd5b505afa158015613287573d6000803e3d6000fd5b505050506040513d602081101561329d57600080fd5b5051600e55604080517fff9f78b3000000000000000000000000000000000000000000000000000000008152905160609173ffffffffffffffffffffffffffffffffffffffff84169163ff9f78b391600480820192600092909190829003018186803b15801561330c57600080fd5b505afa158015613320573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052602081101561336757600080fd5b810190808051604051939291908464010000000082111561338757600080fd5b90830190602082018581111561339c57600080fd5b82518660208202830111640100000000821117156133b957600080fd5b82525081516020918201928201910280838360005b838110156133e65781810151838201526020016133ce565b5050505091909101604052505043601155505080519091505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101901561360357600082828151811061343657fe5b60200260200101519050613448613dda565b8473ffffffffffffffffffffffffffffffffffffffff16634d1b4dae836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506101006040518083038186803b1580156134c657600080fd5b505afa1580156134da573d6000803e3d6000fd5b505050506040513d6101008110156134f157600080fd5b50805160408083015160808085015160a08087015160c08089015160e0998a0151998b01998a52908a01908152918901908152928801918252878501938452948752600489810242016020808a019182526010805460608c0181815260018083019093557f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9e909e169d8e17905560009c8d52600f90925296909a2098518955519488019490945591516002870155955160038601555190840155925160058301559151600682015590516007909101556133ff565b50505050565b60006136148261284d565b509050683635c9adc5dea0000081101561163257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420636f6c6c61746572616c0000000000000000000000000000604482015290519081900360640190fd5b60008060006136a1846080015161284d565b915091506136b18585848461298d565b95945050505050565b6000600854600e5410156136d05750600161237d565b600954438390039081816136e057fe5b046001019050600281816136f057fe5b049093109392505050565b60108054600091907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061372f57fe5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8681168452600f9092526040808420600390810154939092168085529320018190556010805492935090918391908390811061378a57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060108054806137dd57fe5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055908101909155600e805490910190555050600c805491909103905550565b60008273ffffffffffffffffffffffffffffffffffffffff166328d566be836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156138cf57600080fd5b505afa1580156138e3573d6000803e3d6000fd5b505050506040513d60208110156138f957600080fd5b5051905073ffffffffffffffffffffffffffffffffffffffff81161561392357613923818361239a565b505050565b613930613d96565b61393a8383611f50565b608081015190915073ffffffffffffffffffffffffffffffffffffffff161561392357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206f776e657200000000000000000000000000000000000000604482015290519081900360640190fd5b63ff000000811662ff0000821661ff008316637f00000083148015906139ee575082630a00000014155b8015613a0c57508263c0000000148015613a0a57508162a80000145b155b8015613a2f57508263ac000000148015613a2d57508162f000001662100000145b155b8015613a3a57508215155b8015613a5d5750826364000000148015613a5b57508162c000001662400000145b155b8015613a7b57508263a9000000148015613a7957508162fe0000145b155b8015613a9e57508263c6000000148015613a9c57508162fe00001662120000145b155b8015613ac957508263c6000000148015613aba57508162330000145b8015613ac7575080616400145b155b8015613af057508263cb000000148015613ae1575081155b8015613aee575080617100145b155b8015613b0657508263f00000001663e000000014155b8015613b1c57508263f00000001663f000000014155b8015613b3257508363ffffffff1663ffffffff14155b61360357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57726f6e67204950000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60065473ffffffffffffffffffffffffffffffffffffffff1660008115613d2757613bc6613d96565b613bd08584611f50565b60a0810151604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260006024830181905260448301819052600160648401528982166084840152925193965093945092881692631f9579ca9260a4808301939282900301818387803b158015613c6657600080fd5b505af1158015613c7a573d6000803e3d6000fd5b5050604080517f1f9579ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600160248301528881166044830152600060648301819052608483018190529251908a169450631f9579ca935060a4808301939282900301818387803b158015613d0957600080fd5b505af1158015613d1d573d6000803e3d6000fd5b5050505050613d71565b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316179055600060075580805b9250929050565b60405180604001604052806002906020820280388339509192915050565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6040518061010001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152509056fea265627a7a7231582030f0637944dd21a57a3ce0a00a717a9cd24df775042ff1ab00c8ea04c90ab50564736f6c634300050b0032`

// MasternodeRegistryV2 is an auto generated Go binding around an Ethereum contract.
type MasternodeRegistryV2 struct {
	MasternodeRegistryV2Caller     // Read-only binding to the contract
	MasternodeRegistryV2Transactor // Write-only binding to the contract
	MasternodeRegistryV2Filterer   // Log filterer for contract events
}

// MasternodeRegistryV2Caller is an auto generated read-only Go binding around an Ethereum contract.
type MasternodeRegistryV2Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV2Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MasternodeRegistryV2Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV2Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MasternodeRegistryV2Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MasternodeRegistryV2Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MasternodeRegistryV2Session struct {
	Contract     *MasternodeRegistryV2 // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MasternodeRegistryV2CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MasternodeRegistryV2CallerSession struct {
	Contract *MasternodeRegistryV2Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// MasternodeRegistryV2TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MasternodeRegistryV2TransactorSession struct {
	Contract     *MasternodeRegistryV2Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// MasternodeRegistryV2Raw is an auto generated low-level Go binding around an Ethereum contract.
type MasternodeRegistryV2Raw struct {
	Contract *MasternodeRegistryV2 // Generic contract binding to access the raw methods on
}

// MasternodeRegistryV2CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MasternodeRegistryV2CallerRaw struct {
	Contract *MasternodeRegistryV2Caller // Generic read-only contract binding to access the raw methods on
}

// MasternodeRegistryV2TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MasternodeRegistryV2TransactorRaw struct {
	Contract *MasternodeRegistryV2Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMasternodeRegistryV2 creates a new instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2(address common.Address, backend bind.ContractBackend) (*MasternodeRegistryV2, error) {
	contract, err := bindMasternodeRegistryV2(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2{MasternodeRegistryV2Caller: MasternodeRegistryV2Caller{contract: contract}, MasternodeRegistryV2Transactor: MasternodeRegistryV2Transactor{contract: contract}, MasternodeRegistryV2Filterer: MasternodeRegistryV2Filterer{contract: contract}}, nil
}

// NewMasternodeRegistryV2Caller creates a new read-only instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2Caller(address common.Address, caller bind.ContractCaller) (*MasternodeRegistryV2Caller, error) {
	contract, err := bindMasternodeRegistryV2(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2Caller{contract: contract}, nil
}

// NewMasternodeRegistryV2Transactor creates a new write-only instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2Transactor(address common.Address, transactor bind.ContractTransactor) (*MasternodeRegistryV2Transactor, error) {
	contract, err := bindMasternodeRegistryV2(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2Transactor{contract: contract}, nil
}

// NewMasternodeRegistryV2Filterer creates a new log filterer instance of MasternodeRegistryV2, bound to a specific deployed contract.
func NewMasternodeRegistryV2Filterer(address common.Address, filterer bind.ContractFilterer) (*MasternodeRegistryV2Filterer, error) {
	contract, err := bindMasternodeRegistryV2(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2Filterer{contract: contract}, nil
}

// bindMasternodeRegistryV2 binds a generic wrapper to an already deployed contract.
func bindMasternodeRegistryV2(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MasternodeRegistryV2ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV2 *MasternodeRegistryV2Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV2.Contract.MasternodeRegistryV2Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV2 *MasternodeRegistryV2Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.MasternodeRegistryV2Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV2 *MasternodeRegistryV2Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.MasternodeRegistryV2Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _MasternodeRegistryV2.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.contract.Transact(opts, method, params...)
}

// CanHeartbeat is a free data retrieval call binding the contract method 0xd9966aba.
//
// Solidity: function canHeartbeat(address masternode) constant returns(bool can_heartbeat)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CanHeartbeat(opts *bind.CallOpts, masternode common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "canHeartbeat", masternode)
	return *ret0, err
}

// CanHeartbeat is a free data retrieval call binding the contract method 0xd9966aba.
//
// Solidity: function canHeartbeat(address masternode) constant returns(bool can_heartbeat)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CanHeartbeat(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.CanHeartbeat(&_MasternodeRegistryV2.CallOpts, masternode)
}

// CanHeartbeat is a free data retrieval call binding the contract method 0xd9966aba.
//
// Solidity: function canHeartbeat(address masternode) constant returns(bool can_heartbeat)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CanHeartbeat(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.CanHeartbeat(&_MasternodeRegistryV2.CallOpts, masternode)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CleanupPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "cleanup_period")
	return *ret0, err
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CleanupPeriod(&_MasternodeRegistryV2.CallOpts)
}

// CleanupPeriod is a free data retrieval call binding the contract method 0x5f6e2c7b.
//
// Solidity: function cleanup_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CleanupPeriod() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CleanupPeriod(&_MasternodeRegistryV2.CallOpts)
}

// CollateralLimits is a free data retrieval call binding the contract method 0xe2cb2195.
//
// Solidity: function collateralLimits() constant returns(uint256 min, uint256 max)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CollateralLimits(opts *bind.CallOpts) (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	ret := new(struct {
		Min *big.Int
		Max *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "collateralLimits")
	return *ret, err
}

// CollateralLimits is a free data retrieval call binding the contract method 0xe2cb2195.
//
// Solidity: function collateralLimits() constant returns(uint256 min, uint256 max)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CollateralLimits() (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.CollateralLimits(&_MasternodeRegistryV2.CallOpts)
}

// CollateralLimits is a free data retrieval call binding the contract method 0xe2cb2195.
//
// Solidity: function collateralLimits() constant returns(uint256 min, uint256 max)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CollateralLimits() (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.CollateralLimits(&_MasternodeRegistryV2.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Count(opts *bind.CallOpts) (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	ret := new(struct {
		Active           *big.Int
		Total            *big.Int
		ActiveCollateral *big.Int
		TotalCollateral  *big.Int
		MaxOfAllTimes    *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "count")
	return *ret, err
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Count(&_MasternodeRegistryV2.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() constant returns(uint256 active, uint256 total, uint256 active_collateral, uint256 total_collateral, uint256 max_of_all_times)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Count() (struct {
	Active           *big.Int
	Total            *big.Int
	ActiveCollateral *big.Int
	TotalCollateral  *big.Int
	MaxOfAllTimes    *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Count(&_MasternodeRegistryV2.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CurrentMasternode(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "current_masternode")
	return *ret0, err
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.CurrentMasternode(&_MasternodeRegistryV2.CallOpts)
}

// CurrentMasternode is a free data retrieval call binding the contract method 0x1a26763c.
//
// Solidity: function current_masternode() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CurrentMasternode() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.CurrentMasternode(&_MasternodeRegistryV2.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) CurrentPayouts(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "current_payouts")
	return *ret0, err
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) CurrentPayouts() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrentPayouts(&_MasternodeRegistryV2.CallOpts)
}

// CurrentPayouts is a free data retrieval call binding the contract method 0x9c5e8ae2.
//
// Solidity: function current_payouts() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) CurrentPayouts() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.CurrentPayouts(&_MasternodeRegistryV2.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Enumerate(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "enumerate")
	return *ret0, err
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.Enumerate(&_MasternodeRegistryV2.CallOpts)
}

// Enumerate is a free data retrieval call binding the contract method 0xff9f78b3.
//
// Solidity: function enumerate() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Enumerate() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.Enumerate(&_MasternodeRegistryV2.CallOpts)
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) EnumerateActive(opts *bind.CallOpts) ([]common.Address, error) {
	var (
		ret0 = new([]common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "enumerateActive")
	return *ret0, err
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) EnumerateActive() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.EnumerateActive(&_MasternodeRegistryV2.CallOpts)
}

// EnumerateActive is a free data retrieval call binding the contract method 0xe1d6f43a.
//
// Solidity: function enumerateActive() constant returns(address[] masternodes)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) EnumerateActive() ([]common.Address, error) {
	return _MasternodeRegistryV2.Contract.EnumerateActive(&_MasternodeRegistryV2.CallOpts)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) GetReward(opts *bind.CallOpts, _blockNumber *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "getReward", _blockNumber)
	return *ret0, err
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.GetReward(&_MasternodeRegistryV2.CallOpts, _blockNumber)
}

// GetReward is a free data retrieval call binding the contract method 0x1c4b774b.
//
// Solidity: function getReward(uint256 _blockNumber) constant returns(uint256 amount)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) GetReward(_blockNumber *big.Int) (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.GetReward(&_MasternodeRegistryV2.CallOpts, _blockNumber)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Info(opts *bind.CallOpts, masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Owner          common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "info", masternode)
	return *ret, err
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Info(&_MasternodeRegistryV2.CallOpts, masternode)
}

// Info is a free data retrieval call binding the contract method 0x0aae7a6b.
//
// Solidity: function info(address masternode) constant returns(address owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Info(masternode common.Address) (struct {
	Owner          common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.Info(&_MasternodeRegistryV2.CallOpts, masternode)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address masternode) constant returns(bool)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) IsActive(opts *bind.CallOpts, masternode common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "isActive", masternode)
	return *ret0, err
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address masternode) constant returns(bool)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) IsActive(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.IsActive(&_MasternodeRegistryV2.CallOpts, masternode)
}

// IsActive is a free data retrieval call binding the contract method 0x9f8a13d7.
//
// Solidity: function isActive(address masternode) constant returns(bool)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) IsActive(masternode common.Address) (bool, error) {
	return _MasternodeRegistryV2.Contract.IsActive(&_MasternodeRegistryV2.CallOpts, masternode)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnActive(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_active")
	return *ret0, err
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnActive() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActive(&_MasternodeRegistryV2.CallOpts)
}

// MnActive is a free data retrieval call binding the contract method 0x521f284d.
//
// Solidity: function mn_active() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnActive() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActive(&_MasternodeRegistryV2.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnActiveCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_active_collateral")
	return *ret0, err
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActiveCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnActiveCollateral is a free data retrieval call binding the contract method 0x6d41ff4e.
//
// Solidity: function mn_active_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnActiveCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnActiveCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnAnnounced(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_announced")
	return *ret0, err
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnAnnounced() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnounced(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnounced is a free data retrieval call binding the contract method 0xab00fdc4.
//
// Solidity: function mn_announced() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnAnnounced() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnounced(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnAnnouncedCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_announced_collateral")
	return *ret0, err
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnAnnouncedCollateral is a free data retrieval call binding the contract method 0x57f2a7d8.
//
// Solidity: function mn_announced_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnAnnouncedCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnAnnouncedCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnEverCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_ever_collateral")
	return *ret0, err
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnEverCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnEverCollateral is a free data retrieval call binding the contract method 0xcb4f40c5.
//
// Solidity: function mn_ever_collateral() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnEverCollateral() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.MnEverCollateral(&_MasternodeRegistryV2.CallOpts)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 next_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidation_since, uint256 invalidations, uint256 seq_payouts, uint256 last_vote_epoch)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) MnStatus(opts *bind.CallOpts, arg0 common.Address) (struct {
	SwFeatures        *big.Int
	NextHeartbeat     *big.Int
	InactiveSince     *big.Int
	ValidatorIndex    *big.Int
	InvalidationSince *big.Int
	Invalidations     *big.Int
	SeqPayouts        *big.Int
	LastVoteEpoch     *big.Int
}, error) {
	ret := new(struct {
		SwFeatures        *big.Int
		NextHeartbeat     *big.Int
		InactiveSince     *big.Int
		ValidatorIndex    *big.Int
		InvalidationSince *big.Int
		Invalidations     *big.Int
		SeqPayouts        *big.Int
		LastVoteEpoch     *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "mn_status", arg0)
	return *ret, err
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 next_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidation_since, uint256 invalidations, uint256 seq_payouts, uint256 last_vote_epoch)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) MnStatus(arg0 common.Address) (struct {
	SwFeatures        *big.Int
	NextHeartbeat     *big.Int
	InactiveSince     *big.Int
	ValidatorIndex    *big.Int
	InvalidationSince *big.Int
	Invalidations     *big.Int
	SeqPayouts        *big.Int
	LastVoteEpoch     *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.MnStatus(&_MasternodeRegistryV2.CallOpts, arg0)
}

// MnStatus is a free data retrieval call binding the contract method 0x4d1b4dae.
//
// Solidity: function mn_status(address ) constant returns(uint256 sw_features, uint256 next_heartbeat, uint256 inactive_since, uint256 validator_index, uint256 invalidation_since, uint256 invalidations, uint256 seq_payouts, uint256 last_vote_epoch)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) MnStatus(arg0 common.Address) (struct {
	SwFeatures        *big.Int
	NextHeartbeat     *big.Int
	InactiveSince     *big.Int
	ValidatorIndex    *big.Int
	InvalidationSince *big.Int
	Invalidations     *big.Int
	SeqPayouts        *big.Int
	LastVoteEpoch     *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.MnStatus(&_MasternodeRegistryV2.CallOpts, arg0)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) OwnerInfo(opts *bind.CallOpts, owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	ret := new(struct {
		Masternode     common.Address
		Ipv4address    uint32
		Enode          [2][32]byte
		Collateral     *big.Int
		AnnouncedBlock *big.Int
	})
	out := ret
	err := _MasternodeRegistryV2.contract.Call(opts, out, "ownerInfo", owner)
	return *ret, err
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.OwnerInfo(&_MasternodeRegistryV2.CallOpts, owner)
}

// OwnerInfo is a free data retrieval call binding the contract method 0xb83e1605.
//
// Solidity: function ownerInfo(address owner) constant returns(address masternode, uint32 ipv4address, bytes32[2] enode, uint256 collateral, uint256 announced_block)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) OwnerInfo(owner common.Address) (struct {
	Masternode     common.Address
	Ipv4address    uint32
	Enode          [2][32]byte
	Collateral     *big.Int
	AnnouncedBlock *big.Int
}, error) {
	return _MasternodeRegistryV2.Contract.OwnerInfo(&_MasternodeRegistryV2.CallOpts, owner)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) Proxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "proxy")
	return *ret0, err
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Proxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.Proxy(&_MasternodeRegistryV2.CallOpts)
}

// Proxy is a free data retrieval call binding the contract method 0xec556889.
//
// Solidity: function proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) Proxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.Proxy(&_MasternodeRegistryV2.CallOpts)
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) RequireValidation(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "require_validation")
	return *ret0, err
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) RequireValidation() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.RequireValidation(&_MasternodeRegistryV2.CallOpts)
}

// RequireValidation is a free data retrieval call binding the contract method 0x35ab13f6.
//
// Solidity: function require_validation() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) RequireValidation() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.RequireValidation(&_MasternodeRegistryV2.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) TokenProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "token_proxy")
	return *ret0, err
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TokenProxy(&_MasternodeRegistryV2.CallOpts)
}

// TokenProxy is a free data retrieval call binding the contract method 0x84afd47f.
//
// Solidity: function token_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) TokenProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TokenProxy(&_MasternodeRegistryV2.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) TreasuryProxy(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "treasury_proxy")
	return *ret0, err
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TreasuryProxy(&_MasternodeRegistryV2.CallOpts)
}

// TreasuryProxy is a free data retrieval call binding the contract method 0xa2731784.
//
// Solidity: function treasury_proxy() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) TreasuryProxy() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.TreasuryProxy(&_MasternodeRegistryV2.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) V1storage(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "v1storage")
	return *ret0, err
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) V1storage() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.V1storage(&_MasternodeRegistryV2.CallOpts)
}

// V1storage is a free data retrieval call binding the contract method 0x2d059305.
//
// Solidity: function v1storage() constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) V1storage() (common.Address, error) {
	return _MasternodeRegistryV2.Contract.V1storage(&_MasternodeRegistryV2.CallOpts)
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) ValidationTarget(opts *bind.CallOpts, masternode common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "validationTarget", masternode)
	return *ret0, err
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) ValidationTarget(masternode common.Address) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidationTarget(&_MasternodeRegistryV2.CallOpts, masternode)
}

// ValidationTarget is a free data retrieval call binding the contract method 0xc3db74d6.
//
// Solidity: function validationTarget(address masternode) constant returns(address target)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) ValidationTarget(masternode common.Address) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidationTarget(&_MasternodeRegistryV2.CallOpts, masternode)
}

// ValidationPeriod is a free data retrieval call binding the contract method 0xdd227a22.
//
// Solidity: function validation_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) ValidationPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "validation_period")
	return *ret0, err
}

// ValidationPeriod is a free data retrieval call binding the contract method 0xdd227a22.
//
// Solidity: function validation_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) ValidationPeriod() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.ValidationPeriod(&_MasternodeRegistryV2.CallOpts)
}

// ValidationPeriod is a free data retrieval call binding the contract method 0xdd227a22.
//
// Solidity: function validation_period() constant returns(uint256)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) ValidationPeriod() (*big.Int, error) {
	return _MasternodeRegistryV2.Contract.ValidationPeriod(&_MasternodeRegistryV2.CallOpts)
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Caller) ValidatorList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _MasternodeRegistryV2.contract.Call(opts, out, "validator_list", arg0)
	return *ret0, err
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) ValidatorList(arg0 *big.Int) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidatorList(&_MasternodeRegistryV2.CallOpts, arg0)
}

// ValidatorList is a free data retrieval call binding the contract method 0x4e60b981.
//
// Solidity: function validator_list(uint256 ) constant returns(address)
func (_MasternodeRegistryV2 *MasternodeRegistryV2CallerSession) ValidatorList(arg0 *big.Int) (common.Address, error) {
	return _MasternodeRegistryV2.Contract.ValidatorList(&_MasternodeRegistryV2.CallOpts, arg0)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Announce(opts *bind.TransactOpts, masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "announce", masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Announce(&_MasternodeRegistryV2.TransactOpts, masternode, ipv4address, enode)
}

// Announce is a paid mutator transaction binding the contract method 0xd70d5c30.
//
// Solidity: function announce(address masternode, uint32 ipv4address, bytes32[2] enode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Announce(masternode common.Address, ipv4address uint32, enode [2][32]byte) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Announce(&_MasternodeRegistryV2.TransactOpts, masternode, ipv4address, enode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Denounce(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "denounce", masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Denounce(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Denounce is a paid mutator transaction binding the contract method 0xca0e551f.
//
// Solidity: function denounce(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Denounce(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Denounce(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Destroy(opts *bind.TransactOpts, _newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "destroy", _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Destroy(&_MasternodeRegistryV2.TransactOpts, _newImpl)
}

// Destroy is a paid mutator transaction binding the contract method 0x00f55d9d.
//
// Solidity: function destroy(address _newImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Destroy(_newImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Destroy(&_MasternodeRegistryV2.TransactOpts, _newImpl)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Heartbeat(opts *bind.TransactOpts, block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "heartbeat", block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Heartbeat(&_MasternodeRegistryV2.TransactOpts, block_number, block_hash, sw_features)
}

// Heartbeat is a paid mutator transaction binding the contract method 0x91ceac96.
//
// Solidity: function heartbeat(uint256 block_number, bytes32 block_hash, uint256 sw_features) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Heartbeat(block_number *big.Int, block_hash [32]byte, sw_features *big.Int) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Heartbeat(&_MasternodeRegistryV2.TransactOpts, block_number, block_hash, sw_features)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Invalidate(opts *bind.TransactOpts, masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "invalidate", masternode)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Invalidate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Invalidate(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Invalidate is a paid mutator transaction binding the contract method 0x37a3931f.
//
// Solidity: function invalidate(address masternode) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Invalidate(masternode common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Invalidate(&_MasternodeRegistryV2.TransactOpts, masternode)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Migrate(opts *bind.TransactOpts, _oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "migrate", _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Migrate(&_MasternodeRegistryV2.TransactOpts, _oldImpl)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _oldImpl) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Migrate(_oldImpl common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Migrate(&_MasternodeRegistryV2.TransactOpts, _oldImpl)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) OnCollateralUpdate(opts *bind.TransactOpts, owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "onCollateralUpdate", owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.OnCollateralUpdate(&_MasternodeRegistryV2.TransactOpts, owner)
}

// OnCollateralUpdate is a paid mutator transaction binding the contract method 0xcdc7d4ad.
//
// Solidity: function onCollateralUpdate(address owner) returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) OnCollateralUpdate(owner common.Address) (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.OnCollateralUpdate(&_MasternodeRegistryV2.TransactOpts, owner)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Transactor) Reward(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MasternodeRegistryV2.contract.Transact(opts, "reward")
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2Session) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Reward(&_MasternodeRegistryV2.TransactOpts)
}

// Reward is a paid mutator transaction binding the contract method 0x228cb733.
//
// Solidity: function reward() returns()
func (_MasternodeRegistryV2 *MasternodeRegistryV2TransactorSession) Reward() (*types.Transaction, error) {
	return _MasternodeRegistryV2.Contract.Reward(&_MasternodeRegistryV2.TransactOpts)
}

// MasternodeRegistryV2AnnouncedIterator is returned from FilterAnnounced and is used to iterate over the raw logs and unpacked data for Announced events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2AnnouncedIterator struct {
	Event *MasternodeRegistryV2Announced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2AnnouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Announced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Announced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2AnnouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2AnnouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Announced represents a Announced event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Announced struct {
	Masternode  common.Address
	Owner       common.Address
	Ipv4address uint32
	Enode       [2][32]byte
	Collateral  *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterAnnounced is a free log retrieval operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterAnnounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV2AnnouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2AnnouncedIterator{contract: _MasternodeRegistryV2.contract, event: "Announced", logs: logs, sub: sub}, nil
}

// WatchAnnounced is a free log subscription operation binding the contract event 0x935a2f33570c4840d82856d75f5d0aafca32c5e6b31db5627552304a7dc82c09.
//
// Solidity: event Announced(address indexed masternode, address indexed owner, uint32 ipv4address, bytes32[2] enode, uint256 collateral)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchAnnounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Announced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Announced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Announced)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Announced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV2DeactivatedIterator is returned from FilterDeactivated and is used to iterate over the raw logs and unpacked data for Deactivated events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2DeactivatedIterator struct {
	Event *MasternodeRegistryV2Deactivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2DeactivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Deactivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Deactivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2DeactivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2DeactivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Deactivated represents a Deactivated event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Deactivated struct {
	Masternode common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDeactivated is a free log retrieval operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address indexed masternode)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterDeactivated(opts *bind.FilterOpts, masternode []common.Address) (*MasternodeRegistryV2DeactivatedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Deactivated", masternodeRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2DeactivatedIterator{contract: _MasternodeRegistryV2.contract, event: "Deactivated", logs: logs, sub: sub}, nil
}

// WatchDeactivated is a free log subscription operation binding the contract event 0x749cb6b4c510bc468cf6b9c2086d6f0a54d6b18e25d37bf3200e68eab0880c00.
//
// Solidity: event Deactivated(address indexed masternode)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchDeactivated(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Deactivated, masternode []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Deactivated", masternodeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Deactivated)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Deactivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV2DenouncedIterator is returned from FilterDenounced and is used to iterate over the raw logs and unpacked data for Denounced events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2DenouncedIterator struct {
	Event *MasternodeRegistryV2Denounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2DenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Denounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Denounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2DenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2DenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Denounced represents a Denounced event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Denounced struct {
	Masternode common.Address
	Owner      common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterDenounced is a free log retrieval operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterDenounced(opts *bind.FilterOpts, masternode []common.Address, owner []common.Address) (*MasternodeRegistryV2DenouncedIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2DenouncedIterator{contract: _MasternodeRegistryV2.contract, event: "Denounced", logs: logs, sub: sub}, nil
}

// WatchDenounced is a free log subscription operation binding the contract event 0x55faf8e51ab442f8d8510476317b2e313144c3db60adc284affef64140fe8552.
//
// Solidity: event Denounced(address indexed masternode, address indexed owner)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchDenounced(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Denounced, masternode []common.Address, owner []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Denounced", masternodeRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Denounced)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Denounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// MasternodeRegistryV2InvalidationIterator is returned from FilterInvalidation and is used to iterate over the raw logs and unpacked data for Invalidation events raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2InvalidationIterator struct {
	Event *MasternodeRegistryV2Invalidation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MasternodeRegistryV2InvalidationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MasternodeRegistryV2Invalidation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MasternodeRegistryV2Invalidation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MasternodeRegistryV2InvalidationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MasternodeRegistryV2InvalidationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MasternodeRegistryV2Invalidation represents a Invalidation event raised by the MasternodeRegistryV2 contract.
type MasternodeRegistryV2Invalidation struct {
	Masternode common.Address
	Validator  common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInvalidation is a free log retrieval operation binding the contract event 0x389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d331.
//
// Solidity: event Invalidation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) FilterInvalidation(opts *bind.FilterOpts, masternode []common.Address, validator []common.Address) (*MasternodeRegistryV2InvalidationIterator, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.FilterLogs(opts, "Invalidation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return &MasternodeRegistryV2InvalidationIterator{contract: _MasternodeRegistryV2.contract, event: "Invalidation", logs: logs, sub: sub}, nil
}

// WatchInvalidation is a free log subscription operation binding the contract event 0x389d58799d7eca76264c556a007ffbc7c60caa4e3c8ea0564e791af3a1b9d331.
//
// Solidity: event Invalidation(address indexed masternode, address indexed validator)
func (_MasternodeRegistryV2 *MasternodeRegistryV2Filterer) WatchInvalidation(opts *bind.WatchOpts, sink chan<- *MasternodeRegistryV2Invalidation, masternode []common.Address, validator []common.Address) (event.Subscription, error) {

	var masternodeRule []interface{}
	for _, masternodeItem := range masternode {
		masternodeRule = append(masternodeRule, masternodeItem)
	}
	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _MasternodeRegistryV2.contract.WatchLogs(opts, "Invalidation", masternodeRule, validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MasternodeRegistryV2Invalidation)
				if err := _MasternodeRegistryV2.contract.UnpackLog(event, "Invalidation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
